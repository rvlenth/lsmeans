
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Additional tests of lsmeans for various models
> # tests1.R tests the features of lsmeans, so we don't
> # repeat those here. The primary purpose of these tests
> # is to ensure that various models other than lm and its
> # relatives are adequately supported. So the main thrust
> # to simply confirm that we can build a reference grid
> # and extract the needed statistics.
> 
> require(lsmeans)
Loading required package: lsmeans
> 
> ## --- lme and gls ---
> require(nlme)
Loading required package: nlme
> 
> Oats.lme <- lme(yield ~ Variety + factor(nitro), ~1|Block/Variety, 
+                data=Oats)
> summary(ref.grid(Oats.lme))
 Variety     nitro prediction       SE df
 Golden Rain   0.0   79.91667 8.220351 NA
 Marvellous    0.0   85.20833 8.220351 NA
 Victory       0.0   73.04167 8.220351 NA
 Golden Rain   0.2   99.41667 8.220351 NA
 Marvellous    0.2  104.70833 8.220351 NA
 Victory       0.2   92.54167 8.220351 NA
 Golden Rain   0.4  114.75000 8.220351 NA
 Marvellous    0.4  120.04167 8.220351 NA
 Victory       0.4  107.87500 8.220351 NA
 Golden Rain   0.6  123.91667 8.220351 NA
 Marvellous    0.6  129.20833 8.220351 NA
 Victory       0.6  117.04167 8.220351 NA

> 
> warp.gls <- gls(breaks ~ wool*tension, 
+                 data = warpbreaks, correlation = corAR1())
> summary(ref.grid(warp.gls))
 wool tension prediction       SE df
 A    L         44.50574 3.452495 48
 B    L         28.22279 3.452028 48
 A    M         24.15417 3.452028 48
 B    M         28.79771 3.452028 48
 A    H         24.54306 3.452028 48
 B    H         18.71849 3.452495 48

> 
> 
> ## --- lmer, glmer, glmer.nb ---
> require(lme4)
Loading required package: lme4
Loading required package: lattice
Loading required package: Matrix

Attaching package: 'lme4'

The following object is masked from 'package:nlme':

    lmList

> 
> Oats.lmer <- lmer(yield ~ Variety + factor(nitro) + (1|Block/Variety), 
+                data=Oats)
> summary(ref.grid(Oats.lmer))
Loading required package: pbkrtest
Loading required package: MASS
Loading required package: parallel
 Variety     nitro prediction       SE    df
 Golden Rain   0.0   79.91667 8.220376 10.93
 Marvellous    0.0   85.20833 8.220376 10.93
 Victory       0.0   73.04167 8.220376 10.93
 Golden Rain   0.2   99.41667 8.220376 10.93
 Marvellous    0.2  104.70833 8.220376 10.93
 Victory       0.2   92.54167 8.220376 10.93
 Golden Rain   0.4  114.75000 8.220376 10.93
 Marvellous    0.4  120.04167 8.220376 10.93
 Victory       0.4  107.87500 8.220376 10.93
 Golden Rain   0.6  123.91667 8.220376 10.93
 Marvellous    0.6  129.20833 8.220376 10.93
 Victory       0.6  117.04167 8.220376 10.93

> 
> cbpp.glmer <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+              family = binomial, data = cbpp)
> summary(ref.grid(cbpp.glmer))
 period prediction        SE df
 1       -1.398343 0.2278506 NA
 2       -2.390268 0.3102381 NA
 3       -2.526559 0.3307012 NA
 4       -2.978088 0.4325283 NA

> 
> grouse.gnb  <- glmer.nb(TICKS ~ YEAR+HEIGHT+(1|BROOD), 
+ 	data=grouseticks)
> summary(ref.grid(grouse.gnb, data = grouseticks))
 YEAR   HEIGHT prediction        SE df
 95   462.2407  0.5310712 0.1743994 NA
 96   462.2407  1.6617012 0.1494906 NA
 97   462.2407 -0.4634428 0.1886439 NA

> 
> ## --- coxph and survreg ---
> require(survival)
Loading required package: survival
Loading required package: splines
> 
> #### borrowed from man pages
> bladder1 <- bladder[bladder$enum < 5, ] 
> blad.cph <- coxph(Surv(stop, event) ~ (rx + size + number) * strata(enum) + 
+       cluster(id), data = bladder1)
> summary(ref.grid(blad.cph))      
       rx     size   number enum id  prediction        SE df
 1.447059 2.011765 2.105882    1 43  0.53370578 0.3992126 NA
 1.447059 2.011765 2.105882    2 43 -0.12984613 0.3146391 NA
 1.447059 2.011765 2.105882    3 43 -0.42235066 0.2411776 NA
 1.447059 2.011765 2.105882    4 43  0.01849101 0.4201967 NA

> 
> lung.sr <- survreg(Surv(time, status) ~ ph.ecog + age + strata(sex), 
+ 	data = lung)      
> summary(ref.grid(lung.sr), type = "response")
   ph.ecog     age sex response       SE  df
 0.9513274 62.4823   1  428.698 25.92372 222
 0.9513274 62.4823   2  428.698 25.92372 222

> 
> 
> 
> ## --- coxme ---
> require(coxme)
Loading required package: coxme
Loading required package: bdsmatrix

Attaching package: 'bdsmatrix'

The following object is masked from 'package:base':

    backsolve

> 
> eortc.cme <- coxme(Surv(y, uncens) ~ trt + (trt| center) + strata(center), 
+ 	data = eortc)
> summary(ref.grid(eortc.cme, at=list(center=c(1:5))))
       trt center prediction        SE df
 0.7124408      1   1.272665 0.0963723 NA
 0.7124408      2   2.015853 0.1242911 NA
 0.7124408      3   2.015853 0.1242911 NA
 0.7124408      4   2.015853 0.1242911 NA
 0.7124408      5   2.015853 0.1242911 NA

> 
> 
> 
> ## --- selected MASS models ---
> ## Except for polr, these work just because of inheriting from
> ## other objects
> require(MASS)
> 
> warp.rlm <- rlm(breaks ~ wool*tension, data = warpbreaks)
> summary(ref.grid(warp.rlm))
 wool tension prediction       SE df
 A    L         42.76428 3.780488 NA
 B    L         28.22222 3.780488 NA
 A    M         24.00000 3.780488 NA
 B    M         28.77778 3.780488 NA
 A    H         24.24406 3.780488 NA
 B    H         18.77778 3.780488 NA

> 
> house.plr <- polr(Sat ~ (Infl + Type + Cont)^2, weights = Freq, 
+ 	data = housing)
> summary(ref.grid(house.plr))

Re-fitting to get Hessian

 Infl   Type      Cont cut           prediction        SE df
 Low    Tower     Low  Low|Medium  -0.800131759 0.1956761 NA
 Medium Tower     Low  Low|Medium  -0.677175652 0.1786529 NA
 High   Tower     Low  Low|Medium  -1.685167542 0.2428981 NA
 Low    Apartment Low  Low|Medium   0.380108926 0.1718776 NA
 Medium Apartment Low  Low|Medium  -0.586036224 0.1546418 NA
 High   Apartment Low  Low|Medium  -1.200439956 0.1817073 NA
 Low    Atrium    Low  Low|Medium  -0.345374274 0.2659389 NA
 Medium Atrium    Low  Low|Medium  -0.876774726 0.2765238 NA
 High   Atrium    Low  Low|Medium  -1.018188059 0.3089842 NA
 Low    Terrace   Low  Low|Medium   0.249682944 0.2739672 NA
 Medium Terrace   Low  Low|Medium  -0.360907685 0.2428470 NA
 High   Terrace   Low  Low|Medium  -1.284760095 0.3257505 NA
 Low    Tower     High Low|Medium  -1.358906390 0.2019081 NA
 Medium Tower     High Low|Medium  -1.208368508 0.1887943 NA
 High   Tower     High Low|Medium  -2.300698782 0.3004202 NA
 Low    Apartment High Low|Medium  -0.117772284 0.1363756 NA
 Medium Apartment High Low|Medium  -1.056335660 0.1355478 NA
 High   Apartment High Low|Medium  -1.755077775 0.1847514 NA
 Low    Atrium    High Low|Medium  -0.626814111 0.2078994 NA
 Medium Atrium    High Low|Medium  -1.130632788 0.2199665 NA
 High   Atrium    High Low|Medium  -1.356384505 0.2719325 NA
 Low    Terrace   High Low|Medium   0.487162816 0.1915779 NA
 Medium Terrace   High Low|Medium  -0.095846039 0.2068932 NA
 High   Terrace   High Low|Medium  -1.104036831 0.3164890 NA
 Low    Tower     Low  Medium|High  0.405172760 0.1947316 NA
 Medium Tower     Low  Medium|High  0.528128867 0.1782484 NA
 High   Tower     Low  Medium|High -0.479863023 0.2397401 NA
 Low    Apartment Low  Medium|High  1.585413446 0.1762584 NA
 Medium Apartment Low  Medium|High  0.619268295 0.1546701 NA
 High   Apartment Low  Medium|High  0.004864563 0.1789580 NA
 Low    Atrium    Low  Medium|High  0.859930245 0.2667438 NA
 Medium Atrium    Low  Medium|High  0.328529794 0.2757641 NA
 High   Atrium    Low  Medium|High  0.187116460 0.3077682 NA
 Low    Terrace   Low  Medium|High  1.454987464 0.2762873 NA
 Medium Terrace   Low  Medium|High  0.844396834 0.2438197 NA
 High   Terrace   Low  Medium|High -0.079455575 0.3239336 NA
 Low    Tower     High Medium|High -0.153601870 0.1989654 NA
 Medium Tower     High Medium|High -0.003063989 0.1861962 NA
 High   Tower     High Medium|High -1.095394262 0.2965892 NA
 Low    Apartment High Medium|High  1.087532235 0.1392353 NA
 Medium Apartment High Medium|High  0.148968859 0.1327629 NA
 High   Apartment High Medium|High -0.549773256 0.1801456 NA
 Low    Atrium    High Medium|High  0.578490409 0.2078147 NA
 Medium Atrium    High Medium|High  0.074671732 0.2179052 NA
 High   Atrium    High Medium|High -0.151079985 0.2697800 NA
 Low    Terrace   High Medium|High  1.692467336 0.1957739 NA
 Medium Terrace   High Medium|High  1.109458481 0.2088250 NA
 High   Terrace   High Medium|High  0.101267688 0.3152482 NA

> 
> quine.nb1 <- glm.nb(Days ~ Sex/(Age + Eth*Lrn), data = quine)
> summary(ref.grid(quine.nb1))
 Sex Age Eth Lrn prediction        SE df
 F   F0  A   AL    3.019188 0.2970622 NA
 M   F0  A   AL    2.543783 0.2611083 NA
 F   F1  A   AL    2.310315 0.2682741 NA
 M   F1  A   AL    1.820048 0.3281214 NA
 F   F2  A   AL    2.404324 0.3336259 NA
 M   F2  A   AL    3.172203 0.2352321 NA
 F   F3  A   AL    2.676841 0.2367972 NA
 M   F3  A   AL    3.694626 0.2513014 NA
 F   F0  N   AL    2.946064 0.2959795 NA
 M   F0  N   AL    1.864796 0.2588487 NA
 F   F1  N   AL    2.237190 0.2594093 NA
 M   F1  N   AL    1.141061 0.3319348 NA
 F   F2  N   AL    2.331200 0.3283119 NA
 M   F2  N   AL    2.493216 0.2388060 NA
 F   F3  N   AL    2.603717 0.2294096 NA
 M   F3  N   AL    3.015639 0.2536726 NA
 F   F0  A   SL    3.962764 0.3570461 NA
 M   F0  A   SL    2.782693 0.3171966 NA
 F   F1  A   SL    3.253891 0.2173757 NA
 M   F1  A   SL    2.058958 0.3385617 NA
 F   F2  A   SL    3.347900 0.2359040 NA
 M   F2  A   SL    3.411113 0.2992520 NA
 F   F3  A   SL    3.620417 0.3478964 NA
 M   F3  A   SL    3.933536 0.3794741 NA
 F   F0  N   SL    2.531149 0.3607846 NA
 M   F0  N   SL    2.865122 0.3134316 NA
 F   F1  N   SL    1.822275 0.2233510 NA
 M   F1  N   SL    2.141387 0.2737954 NA
 F   F2  N   SL    1.916285 0.2390888 NA
 M   F2  N   SL    3.493542 0.3057193 NA
 F   F3  N   SL    2.188802 0.3515401 NA
 M   F3  N   SL    4.015964 0.3748084 NA

> 
> bact.pql <- glmmPQL(y ~ trt + I(week > 2), random = ~ 1 | ID,
+ 	family = binomial, data = bacteria)
iteration 1
iteration 2
iteration 3
iteration 4
iteration 5
iteration 6
> summary(ref.grid(bact.pql), type = "response")
 trt         week      prob         SE df
 placebo 4.454545 0.8587270 0.05344492 NA
 drug    4.454545 0.6358511 0.11115596 NA
 drug+   4.454545 0.7408574 0.09152735 NA

> 
> proc.time()
   user  system elapsed 
  12.19    0.12   12.52 
