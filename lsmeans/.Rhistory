lsmip(wine.clm, temp*contact ~ rating | judge, mode = "prob")
wine8 = wine[wine$judge=="8", ]
with(wine8, table(rating, interaction(temp, contact)))
wine.clm
wine.clm0 = clm(rating~temp*contact, data=wine)
anova(wine.clm0, wine.clm)
names(wine)
with(wine, table(rating,judge))
q9("no")
q("no")
library(lsmeans)
install.packages("mediation")
install.packages("MCMCpack")
vignette("using-lsmeans")
?lsmeans
detach(package:lsmeans)
install.packages("lsmeans")
install.packages("lsmeans")
vignette("using-lemeans")
vignette("using-lsmeans")
vignette("using-lsmeans", package="lsmeans")
install.packages("lsmeans")
vignette("using-lsmeans", package="lsmeans")
q("no")
library(lsmeans)
vignette("using-lsmeans")
?texi2pdf
texi2pdf
tools::texi2pdf
tools::texi2dvi
library(lsmeans)
library(tools)
buildVignettes("lsmeans")
vignette("using-lsmeans")
library(lsmeans)
vignette("using-lsmeans")
detach(package:lsmeans)
library(lsmeans)
vignette("using-lsmeans")
?texi2pdf
getwd()
setwd("vignettes")
dir()
Sweave("using-lsmeans.rnw")
dir()
texi2pdf("using-lsmeans.tex", clean = TRUE)
args(texi2pdf)
texi2pdf("using-lsmeans.tex", clean = TRUE, texi2dvi = "latexmk")
q("no")
q("no")
warp.lm <- lm(breaks ~ wool * tension, data = warpbreaks)
lsmeans(warp.lm, list(pairwise ~ wool|tension, pairwise ~ tension|wool))
library(lsmeans)
lsmlist <- lsmeans(warp.lm, list(pairwise ~ wool|tension, pairwise ~ tension|wool))
names(lsmlist)
lsmlist
mydiffs = lsmlist[[4]]
mydiffs@linfct = rbind(lsmlist[[2]]@linfct, lsmlist[[4]]@linfct)
mydiffs@grid = rbind(lsmlist[[2]]@grid, lsmlist[[4]]@grid)
lsmlist[[4]]@grid
mydiffs@grid = data.frame(contrast=1:9)
mydiffs
nrowmydiffs@linfct
mydiffs@linfct
mydiffs@grid = data.frame(contrast=1:9)
mydiffs@grid
mydiffs@misc
mydiffs = update(mydiffs, pri.vars="contrast", by.vars=NULL)
mydiffs
mydiffs = update(mydiffs, pri.vars="contrast", by.vars=NULL,adjust="mvt")
mydiffs
mydiffs = lsmlist[[4]]
mydiffs@linfct = rbind(lsmlist[[2]]@linfct, lsmlist[[4]]@linfct)
mydiffs@grid = data.frame(contrast=1:9)
mydiffs = update(mydiffs, pri.vars="contrast", by.vars=NULL, adjust="mvt")
mydiffs
q("no")
x = data.frame()
x$xyz = 1:5
?data.frame
x = data.frame(row.rames=1:5)
x$xyz = 1:5
x
x[3,"xyz"] = 17
x
library(lsmeans)
warp.lm = lm(breaks ~ wool * tension, data = warpbreaks)
lsms = lsmeans(warp.lm, list(pairwise ~ wool|tension, pairwise ~ tension|wool))
lsms
lsmeans:::rbind.ref.grid(lsms[[2]], lsms[[4]])
lsmeans:::rbind.ref.grid(lsms[[2]], lsms[[4]])
objs
bhats
obj@linfct
gnms
grid
rows
grid
g
as.character(g[[1]])
rows
grid()
grid
obj@grid = grid
library(lsmeans)
rbind(lsms[[2]], lsms[[4]])
x = .Last.value
summay(x)
summary(x)
summary(x, by="wool")
summary(x, by="tension")
?update.ref.grid
x
summary(x, adj = "tukey")
library(lsmeans)
x = rbind(lsms[[2]], lsms[[4]])
x
summary(x, adj="tukey")
rbind(lsms[[3]], lsms[[4]])
test(.Last.value, adj="tukey")
rbind(lsms[[2]], lsms[[3]], lsms[[4]])
lsms[[4]]@grid
rbind(lsms[[4]], lsms[[2]])
library(lsmeans)
rbind(lsms[[4]], lsms[[2]])
frst = lsms[[1]]
frst = updata(frst, by=NULL)
frst = update(frst, by=NULL)
rbind(frst, lsms[[4]], lsms[[2]])
get("[")
methods("[")
get("[.data.frame")
getMethod("[","terms")
getS3Method("[","terms")
?getMethod
?method
?methods
.S3methods("[", "terms")
stats:::[.terms]
get("stats:::[.terms")
get("[.simple.list")
# extract rows of a ref.grid
"[.ref.grid" <- function(x, i, ...) {
}
fix("[.ref.grid")
[.ref.grid = edit()
"[.ref.grid" <- edit()
library(lsmeans)
example("lsmeans")
ls()
warp.lsm
warp.lsm[c(1,2,3,5)]
w = warp.lsm[c(1,2,3,5)]
w@linfct
w@grid
w@misc
summary(w, adjust="none")
w
summary(w, inder=F)
summary(w, infer=F)
print(summary(w, infer=F))
as.data.frame(w, infer=F)
as.data.frame(summary(w, infer=F))
w[1:3]
w[1:2]
w[1]
warp.lsm[2]
warp.lsm[1:3]
warp.lsm[c(1,3,5)]
ls()
get("[.ref.grid")
w@misc
fix("[.ref.grid")
w = update(w, famSize = NULL)
w
nrow(summary(w))
summary(w)
w = update(w, famSize = 1)
w = update(w, famSize = 2)
summary(w)
summary(w, adjust="none")
as.data.frame(summary(w, adjust="none"))
as.data.frame(test(w, adjust="none"))
as.data.frame(test(w))
test(w)
test(w, adjust="none")
w = update(w, famSize = NULL)
test(w, adjust="none")
test(w)
as.data.frame(test(w))
as.data.frame(test(w, adjust="none"))
as.data.frame(test(w))
test(update(w, famSize=2))
w@misc
w@misc$by.vars = NULL
w@misc
w
fix("[.ref.grid")
warp.lsm[c(1:3,5)]
test(.Last.value)
w = warp.lsm[c(1:3,5)]
w@misc
w@by.vars = NULL
w@misc$by.vars = NULL
w
test(w)
test(w, adjust="none")
pairs(w)
library(lme4)
?predict.merMod
library(lsmeans)
vignette("using-lsmeans")
vignette("using-lsmeans")
vignette("using-lsmeans")
q("no")
citation("lsmeans")
library(lsmeans)
citation("lsmeans")
?lme4::lmer
citation("lme4")
?person
library(lsmeans)
citation("lsmeans")
library(lsmeans)
citation("lsmeans")
person("Russ", "Lenth", role=c("aut","cre"))
library(lsmeans)
citation("lsmeans")
citation("doBy")
install.packages("doBy")
citation("doBy")
?doBy::LSmeans
library(lsmeans)
citation("lsmeans")
library(lsmeans)
citation("lsmeans")
c(person("Russell", "Lenth", role = c("aut", "cre")),
person(comment = "with contributions by"),
person("Maxime", "Herv\\'e", role = "ctb"))
library(lsmeans)
citation("lsmeans")
?lsmeans
require(lsmeans)
require(lattice)
warp.lm <- lm(breaks ~ wool * tension, data = warpbreaks)
p1 <- lsmip(warp.lm, wool ~ tension)  # two different pch
attr(p1, "lattice")
library(lsmeans)
require(lsmeans)
require(lattice)
warp.lm <- lm(breaks ~ wool * tension, data = warpbreaks)
p1 <- lsmip(warp.lm, wool ~ tension)  # two different pch
attr(p1, "lattice")
test(pairs(lsmeans(warp.lm, "warp")), joint = TRUE)
test(pairs(lsmeans(warp.lm, "wool")), joint = TRUE)
test(pairs(lsmeans(warp.lm, "tension")), joint = TRUE)
anova(warp.lm)
warpbreaks = warpbreaks[sample(seq_along(warpbreaks[[1]]), 20), ]
nrow(warpbreaks)
with(warpbreaks, table(wool, tension))
warp.lm = lm(breaks ~ wool*tension, data=warpbreaks)
library(car)
Anova(warp.lm, type="II")
Anova(warp.lm, type="III")
test(pairs(lsmeans(warp.lm, "tension")), joint = TRUE)
test(pairs(lsmeans(warp.lm, "wool")), joint = TRUE)
test(contrast(lsmeans(warp.lm, "wool"), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warp.lm, "tension"), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warp.lm, c("wool", "tension")), "dunnett"), joint = TRUE)
anova(wool.lm, update(wool.lm, .~1))
anova(warp.lm, update(warp.lm, .~1))
q("no")
dat <- structure(list(id = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L,
2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L,
5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L,
7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 10L,
10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 12L,
12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L,
14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 16L, 16L, 16L, 16L,
16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 18L, 18L, 18L, 18L, 18L,
18L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 20L, 20L,
21L, 21L, 21L, 21L, 21L, 21L, 22L, 22L, 22L, 22L, 22L, 22L, 23L,
23L, 23L, 23L, 23L, 23L, 24L, 24L, 24L, 24L, 24L, 24L, 25L, 25L,
25L, 25L, 25L, 25L, 26L, 26L, 26L, 26L, 26L, 26L, 27L, 27L, 27L,
27L, 27L, 27L, 28L, 28L, 28L, 28L, 28L, 28L, 29L, 29L, 29L, 29L,
29L, 29L, 30L, 30L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 31L, 31L,
31L, 32L, 32L, 32L, 32L, 32L, 32L, 33L, 33L, 33L, 33L, 33L, 33L,
34L, 34L, 34L, 34L, 34L, 34L, 35L, 35L, 35L, 35L, 35L, 35L, 36L,
36L, 36L, 36L, 36L, 36L, 37L, 37L, 37L, 37L, 37L, 37L, 38L, 38L,
38L, 38L, 38L, 38L, 39L, 39L, 39L, 39L, 39L, 39L, 40L, 40L, 40L,
40L, 40L, 40L, 41L, 41L, 41L, 41L, 41L, 41L, 42L, 42L, 42L, 42L,
42L, 42L, 43L, 43L, 43L, 43L, 43L, 43L, 44L, 44L, 44L, 44L, 44L,
44L, 45L, 45L, 45L, 45L, 45L, 45L, 46L, 46L, 46L, 46L, 46L, 46L,
47L, 47L, 47L, 47L, 47L, 47L, 48L, 48L, 48L, 48L, 48L, 48L, 49L,
49L, 49L, 49L, 49L, 49L, 50L, 50L, 50L, 50L, 50L, 50L, 51L, 51L,
51L, 51L, 51L, 51L, 52L, 52L, 52L, 52L, 52L, 52L, 53L, 53L, 53L,
53L, 53L, 53L, 54L, 54L, 54L, 54L, 54L, 54L, 55L, 55L, 55L, 55L,
55L, 55L, 56L, 56L, 56L, 56L, 56L, 56L, 57L, 57L, 57L, 57L, 57L,
57L, 58L, 58L, 58L, 58L, 58L, 58L, 59L, 59L, 59L, 59L, 59L, 59L,
60L, 60L, 60L, 60L, 60L, 60L), .Label = c("1", "2", "3", "4",
"5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
"17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27",
"28", "29", "30", "32", "33", "34", "35", "36", "37", "38", "39",
"40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50",
"51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61",
"62"), class = "factor"), condition = structure(c(2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,
1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L), .Label = c("fixed", "random"), class = "factor"),
validity = structure(c(1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L), .Label = c("valid", "invalid"), class = "factor"),
believability = structure(c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L), .Label = c("believable", "abstract",
"unbelievable"), class = "factor"), response = c(2.5, 3.25,
4, 4.5, 3.25, 3.75, 4.25, 2.75, 3.5, 3.25, 3.75, 4, 2, 2,
2.25, 2.25, 3, 2.5, 3.25, 3.5, 3.25, 3.5, 3.25, 1.75, 4.5,
3.25, 2.75, 3.5, 3.75, 1.25, 2.5, 3.5, 3.25, 3.25, 4, 3.25,
4, 4, 3.75, 2.5, 4.5, 2.75, 3.5, 3.25, 2.25, 3.25, 3.5, 3.25,
3.75, 3.75, 3.25, 4.75, 3.5, 3.75, 3, 2.25, 3.25, 3.25, 2.75,
3, 2, 3.75, 2.25, 3.25, 4.5, 3.25, 3, 2.25, 4, 3.5, 3, 3.75,
3, 1.25, 2.75, 3.75, 3, 3.25, 3.75, 4, 3.75, 3.75, 3, 3,
3.25, 3.75, 3.75, 3.25, 3.75, 3.5, 3, 3.25, 3.25, 4, 3, 4.25,
3.5, 3.5, 4.75, 3.5, 2.75, 1.75, 3.25, 2.75, 2.25, 4, 3.5,
1.75, 3.5, 2.75, 2.75, 4.25, 3.25, 3, 4.25, 3, 2.5, 3.25,
3.5, 2, 3.5, 3.25, 3.25, 3, 2.5, 4.25, 3.25, 2.25, 2.75,
3.5, 2.5, 2.25, 3.25, 3.75, 4, 4.25, 3.75, 2.75, 4, 4, 1.75,
4.5, 4, 2, 3.75, 3.5, 3.75, 3.5, 3.5, 2.5, 3.25, 3.75, 3.25,
4.25, 3.75, 3.25, 4.5, 3.75, 4.25, 3.5, 4, 4, 3.5, 2.25,
3.75, 2.75, 2.25, 3.25, 3.75, 3.5, 2, 2.25, 2, 2.75, 3.5,
2.25, 2.25, 3.5, 3, 2.5, 4.5, 3, 3, 3.25, 2.5, 2.25, 2, 1,
2.5, 2, 1.25, 1.75, 2.5, 2.75, 4, 4.25, 3, 2.5, 3.5, 2.75,
3.25, 3, 3, 2, 3, 3.5, 2.75, 4, 4, 2, 3.25, 3, 3.75, 3.5,
2.75, 2.25, 3.75, 3.25, 3.75, 3.75, 4, 3.5, 4.25, 2.5, 3,
4.5, 3.5, 1, 3, 3, 2.5, 3.5, 3, 3.75, 4.5, 3.5, 2.75, 2.75,
3, 3.75, 3, 3.25, 3.5, 3, 2.75, 2.75, 3.5, 3.5, 4.5, 4.25,
4, 3.25, 4.25, 3.5, 3.25, 2.75, 2.75, 2.25, 3, 3.25, 2.5,
3, 3.25, 3.5, 4.75, 3, 3, 4, 2.5, 2.75, 2.75, 2.75, 3.75,
3.25, 3, 3.5, 2.75, 3, 2.5, 2.75, 4.5, 2, 3, 1, 3.25, 2,
2.25, 2.75, 3.5, 4, 3.75, 2.5, 3.5, 2, 2.75, 3.25, 2.25,
3.5, 3.75, 1.5, 2.5, 2.75, 2.75, 2.25, 2.75, 2.25, 3.5, 2.75,
2, 2.5, 3, 2.25, 3.75, 2, 3.25, 4, 2.75, 3.25, 3.75, 2.25,
2.75, 3.5, 3.5, 3, 3.5, 3.75, 3.25, 3.5, 3.75, 3, 2.75, 2.5,
3.5, 2.25, 2.5, 3, 3.25, 2, 3, 2.5, 2.5, 3.5, 3.75, 4.25,
3.5, 3.5, 4.25, 2.75, 2.75, 3.25, 3.25, 3.75, 3.75, 3.5,
3, 1.25, 3, 3, 2.5, 4.25)), .Names = c("id", "condition",
"validity", "believability", "response"), row.names = c(NA, -360L
), class = "data.frame")
head(dat)
require(lsmeans)
afex::set_sum_contrasts()
a1 <- aov(response~condition*believability*validity+Error(id/(believability*validity)), dat)
siummary(a1)
summary(a1)
# set up reference grid with interaction per condition:
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
test(con1, joint=TRUE)
test(con1, joint=TRUE, by="condition")
con1@misc$dffcn
con1@misc
con1@dffun
con1@dfargs
dff = con1@dffun
dfa = con1@dfargs
fix(dff
)
con2@grid
dff(con2@linfct[1:4, ])
fix(dff)
dff(con2@linfct[1:4, ])
trace(dff)
dff(con2@linfct[1:4, ])
debug(dff)
dff(con2@linfct[1:4, ])
V
k
v
dfargs$wts
names(dfa$wts)
dimnames(dfa$wts)
dimnames(dfa$wts) = list(NULL,NULL)
dimnames(dfa$wts)
dfa$wts
names(dfa)
names(dfa)$vmats
names(dfa$vmats)
dimnames(dfa$vmats)
names(dfa$vmats[[1]])
dfa$vmats
names(dfa)
names(dfa$Vmats[[1]])
dimnames(dfa$Vmats[[1]])
dfa$Vmats
dimnames(dfa$Vmats)
class(dfa$Vmats)
sapply(dfa$Vmats, class)
for(i in 1:4) dimnames(dfa$Vmats[[i]]) = list(NULL,NULL)
names(dfa$Vmats)
names(dfa$Vmats) = 1:4
dfa$Vmats
names(dfa)
dff(con2@linfct[1:4, ])
v
dfargs$Vdf
j = 1
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, ])[ii]
k = con2@linfct
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, ])[ii]
dfargs=dfa
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, ])[ii]
ii
kk
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, , dop=FALSE])[ii]
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, , drop=FALSE])[ii]
dfargs$wts[j,]
dfargs$wts[j,][ii]
kk
fix(ddf)
fix(dff)
k*dfargs$wts[j,]
names(dfa$wts) = NULL
k*dfa$wts[j,]
k
dimnames(k)=list(NULL,NULL)
k
dff(k)
debug(dff)
dff(k)
fix(dff)
dff=edit()
debug(dff)
dff(k)
j
k*dfargs$wts[j,]
q("no")
q("no")
