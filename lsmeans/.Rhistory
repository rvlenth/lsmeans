library()
ls()
library()
data(experiment, package=multcompView)
data(experiment, package="multcompView"")
data(experiment, package="multcompView")
requireNamespace(multcompView)
requireNamespace("multcompView")
search()
attachNamespace("multcompView")
search()
example(multcompLetters)
lsmeans(exp_aov, cld~treatments)
library(lsmeans)
lsmeans(exp_aov, cld~treatments)[[1]]
source('~/Programming/R/devel/LSMEANS/lsmeans/R/cld.lsm.R')
lsmeans(exp_aov, cld~treatments)[[1]]
ls(all=TRUE)
library(lsmeans)
rm(.get.cld)
lsmeans(exp_aov, cld~treatments)[[1]]
lsmeans(exp_aov, cld~treatments, conf=99)[[1]]
lsmeans(exp_aov, cld~treatments, conf=99.9)[[1]]
lsmeans(exp_aov, cld~treatments, conf=99.99)[[1]]
lsmeans(exp_aov, cld~treatments, conf=1)[[1]]
lsmeans(exp_aov, cld~treatments, conf=.9999999)[[1]]
lsmeans(exp_aov, cld~treatments, conf=.9)[[1]]
lsmeans(exp_aov, cld~treatments, conf=.8)[[1]]
ls()
example(lsmeans)
lsmeans(Oats.lmer, cld ~ Variety*nitro)[[1]]
lsmeans(Oats.lmer, cld ~ Variety*nitro)[[1]]
lsmeans(Oats.lmer, cld ~ nitro|Variety)[[1]]
q("no")
installed.packages()["lme4",1:3]
data(Oats, package="nlme")
library(lme4)
Oats.lmer = lmer(yield ~ Variety*factor(nitro) + (1|Block/Variety),
subset = 1:26, data=Oats)
Oats.lmerp = lmer(yield ~ Variety*poly(nitro,2) + (1|Block/Variety),
subset = 1:26, data=Oats)
class(Oats.lmep)
class(Oats.lmerp)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/recover.data.R')
.recover.data(Oats.lmerp)
q("no")
data(Oats, package="nlme")
Oats.lmer = lmer(yield ~ Variety*factor(nitro) + (1|Block/Variety),
subset = 1:26, data=Oats)
library(lme4)
Oats.lmer = lmer(yield ~ Variety*factor(nitro) + (1|Block/Variety),
subset = 1:26, data=Oats)
all.names(terms(Oats.lmer))
source('~/Programming/R/devel/LSMEANS/lsmeans/R/recover.data.R')
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
ref.grid(Oats.lmer, at=list(Variety="Victory"))
ref.grid(Oats.lmer, at=list(Variety="Victoy"))
ref.grid(Oats.lmer, at=list(Variety="Victory", nitro=seq(0,1,by=.25)))
ref.grid(Oats.lmer, at=list(Variety="Victory", nitro=seq(0,1,by=.25)), cov.reduce=FALSE)
ref.grid(Oats.lmer, at=list(Variety="Victory", nitro=seq(0,1,by=.25)), cov.reduce=function(x,nm)median(x))
ref.grid(Oats.lmer, at=list(Variety="Victory", nitro=seq(0,1,by=.25)), cov.reduce=function(x,nm) x[1]
)
source('~/Programming/R/devel/LSMEANS/lsmeans/test-data.R')
ref.grid(warp.data)
ref.grid(warp.data, cov.reduce=FALSE)
ref.grid(warp.data, cov.reduce=function(x,nm) median(x))
ref.grid(warp.data)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/recover.data.R')
.recover.data(warp.with)
attr(.Last.data, "terms")
.recover.data(warp.with)
attr(.Last.value, "terms")
attributes(.recover.data(warp.with))
source('~/.active-rstudio-document')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/recover.data.R')
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
source('~/.active-rstudio-document')
ref.grid(Oats.lmer)
setMethod("show", "ref.grid", function(x) {
levs = x@levels
for (nm in names(lev)) {
cat(paste(nm, "= ", sep=""))
cat(paste(levs[[nm]], collapse = ", "))
cat("\n")
}
})
source('~/.active-rstudio-document')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lmer)
ref.grid(Oats.lmer)@grid
ref.grid(Oats.lmer)@levels
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
print(ref.grid(Oats.lmer))
setMethod("print", "ref.grid", NULL)
print(ref.grid(Oats.lmer))
removeMethod("print", "ref.grid")
print(ref.grid(Oats.lmer))
showMethods("ref.grid")
showMethods("print")
showMethods("show")
showMethods(".recover.data")
ref.grid(Oats.lmer)
ref.grid(warp.data)
ref.grid(warp.data, cov.reduce=FALSE)
ref.grid(warp.data, cov.reduce=function(x,name) median(x))
coef(warp.data)
coef(Oats.lmer)
fixef(Oats.lmer)
ref.grid(Oats.lme)
q("no")
source('~/Programming/R/devel/LSMEANS/lsmeans/test-data.R')
ls()
source('~/Programming/R/devel/LSMEANS/lsmeans/R/recover.data.R')
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.lme)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/lsm.basis.R')
ref.grid(Oats.lme)
ref.grid(Oats.lmer)
og = .Last.value
og@X
og@V
og@nbasis
og@ddfm
namespace(lsmeans)
nameSpace(lsmeans)
?requireNamespace
loadedNameSpaces()
loadedNamespaces()
requireNamespace("lsmeans")
loadedNamespaces()
lsmeans:::.KRdf.mer
loadedNamespaces()
ls()
ref.grid(Oats.aov)
ref.grid(Oats.aove)
ref.grid(Oats.aov) -> oag
oag@X
oag
?format
getMethod("show","ref.grid")
source('~/.active-rstudio-document')
oag
q("no")
mkf = function(x) function(...) x
mkf(5)
mkf = function(x) eval(function(...) x)
mkf(5)
z=mkf(5+7)
z(5)
mkf = function(x) eval(function(...) substitute(x))
z=mkf(5+7)
z(6)
z
mkf = function(x) eval(function(...) eval(x))
mkf(6)
mkf(6)()
mkf = function(x) function(...) x
mkf(6)()
mkf(7+11-3)
.Last.value(5)
ls()
q("no")
ls()
source('~/Programming/R/devel/LSMEANS/lsmeans/test-data.R')
ls()
Oats
library(reshape)
?cast
cast(Oats, ~Block*Variety)
Oats.m = melt(Oats)
Oats.m
cats(Oats.m, yield+nitro ~ Block*Variety)
cast(Oats.m, yield+nitro ~ Block*Variety)
cast(Oats, yield+nitro ~ Block*Variety)
Oats
cast(Oats, yield ~ nitro ~ Block*Variety)
cast(Oats, ~Block*Varirety)
cast(Oats, ~Block*Variety)
cast(Oats, yield~Block*Variety)
Oats.mult = with(Oats, expand.grid(Variety=levels(Variety), Block=levels(Block)))
Oats.mult = cbind(Oats.mult, yield = matrix(Oats$yield, ncol=4))
Oats.mult
names(Oats.mult)
source('~/.active-rstudio-document')
Oats.mult
names(Oats.mult)
source('~/.active-rstudio-document')
Oats.mult
head(Oats, 14)
source('~/.active-rstudio-document')
Oats.mult
Oats.mult.lm = lm(Yield ~ Block + Variety, data = Oats.mult)
Oats.mult.lm = lm(yield ~ Block + Variety, data = Oats.mult)
summary(Oats.mult.lm)
cl;ass(Oats.mult.lm)
class(Oats.mult.lm)
Oats.mult.lm$qr
coef(Oats.mult)
coef(Oats.mult.lm)
vcov(Oats.mult.lm)
diag(vcov(Oats.mult.lm))
model.matrix(Oats.mult.lm)
manova(Oats.mult.lm)
summary(manova(Oats.mult.lm))
lmer(yield ~ Variety + (1|Block), data=Oats.mult)
names(Oats.mult.lm)
x = matrix(rnorm(6), ncol=2)
x
kronecker(c(1,1,1), x)
Oats.mult.lm$rank
coef(Oats.mult.lm)
dimnames(coef(Oats.mult.lm))
x = 1:5
x = c(x, ylevs=c(6:9))
x
x=list()
x = c(x, ylevs=c(6:9))
x
q("no")
source('~/Programming/R/devel/LSMEANS/lsmeans/R/recover.data.R')
source('~/Programming/R/devel/LSMEANS/lsmeans/R/lsm.basis.R')
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ls()
source('~/Programming/R/devel/LSMEANS/lsmeans/test-data.R')
ls()
ref.grid(Oats.lmer)
ref.grid(Oats.mult.lm)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/lsm.basis.R')
ref.grid(Oats.mult.lm)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.mult.lm)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.mult.lm)
source('~/Programming/R/devel/LSMEANS/lsmeans/R/ref.grid.R')
ref.grid(Oats.mult.lm)
.Last.value@ref.levels
.Last.value@levels
q("no")
q("no")
q("no")
args(interaction.plot)
?coplot
example(coplot)
data(Oats, package="nlme")
coplot(yield~nitro|Variety)
coplot(yield~nitro|Variety, data=Oats)
plot()
plot(1,1)
coplot(yield~nitro|Variety, data=Oats)
coplot(yield~nitro|Block*Variety, data=Oats)
par(ask=F)
coplot(yield~nitro|Block*Variety, data=Oats, type="l")
coplot(yield~nitro|Variety, data=Oats, type="l")
coplot(yield~Block|Variety, data=Oats, type="l")
coplot(yield~Block|Variety, data=Oats, type="o")
coplot(yield~Block|Variety, data=Oats, type="o", show.given=FALSE)
library(mult.comp)
library(multcomp)
glht
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
source('H:/progs/R/devel/LSMEANS/lsmeans/test-data.R')
ls()
int.plot(Oats.lmer, ~Variety)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, 17)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, 17)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, 17)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, 17)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, 17)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, x~y)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/int.plot.R')
int.plot(Oats.lmer, x~y)
int.plot(Oats.lmer, "x")
int.plot(warpbreaks, "x")
q("no")
q("no")
q("no")
install.packages("multcompView")
library(lsmeans)
cgd.ph <- coxph(Surv(tstart, tstop, status) ~ treat * inherit +
sex + age + cluster(id), data = cgd)
lsmeans(cgd.ph, ~ treat | inherit)
pairs(.Last.value)
pairs(.Last.value, by=NULL)
lsmip(cgd.ph, treat ~ inherit | sex)
ls()
Oats.lsm = lsmeans(Oats.lmer, ~nitro|Variety)
library(lme4)
Oats.lsm = lsmeans(Oats.lmer, ~nitro|Variety)
class(Oats.lmer)
Oats.lmer = lmer(yield ~ factor(nitro)*Variety + (1|Block/Variety), data=Oats)
Oats.lsm = lsmeans(Oats.lmer, ~nitro|Variety)
Oats.glht = as.glht(Oats.lsm)
test(Oats.glht)
tests(Oats.glht)
summary(Oats.glht)
lapply(Oats.glht, test)
lapply(Oats.glht, tests)
ls("package:multcomp")
lapply(Oats.glht, adjusted)
lapply(Oats.glht, adjusted, NULL)
args(adjusted)
lapply(Oats.glht, adjusted, "single")
adjusted(Oats.glht[[1]])
adjusted(Oats.glht[[1]], type="sing")
confint(Oats.glht[[1]])
lapply(Oats.glht, confint)
library(rsm)
?coded.data
example(rsm)
CR
code2val(xs(CR.rsm), codings(CR.rsm))
ls()
code2val(xs(CR.rs2), codings(CR.rs2))
CR.rs2$xs
canonical(CR.rs2)$xs
xs(CR.rs1)
vignette("using-lsmeans")
?glht.lsmobj
search()
ls(8)
args(ls)
lsm
ls(envir="namespace:lsmeans")
?ls
getNamespace("lsmeans")
ls(envir=getNamespace("lsmeans"))
ls(envir=getNamespace("lsmeans"), pat="recover.data.")
ls(envir=getNamespace("lsmeans"), pat="lsm.basis.")
ls(envir=getNamespace("multcomp"), pat="modelparm.")
ls()
ls(all=T)
remove(list=ls())
save.image()
ls()
q("no")
install.packages("lsmeans")
vignette("lsmeans-changes", package="lsmeans")
sample(1:10000,10) -> s
s
sort(s)
sample(1:100000,100) -> s
s
sort(s)
sd(0:5)
x = c(rep(0,10), rep(1:5, 6))
x
x = c(rep(0,10), rep(1:5, each=6))
x
sd(x)
length(x)
x2 = c(rep(0,10), rep(c(1,3,5), each=6))
x2
sd(x2)
length(x2)
q("no")
library(lme4)
example(lme4)
example(lmer)
ls()
vcov(fm1)
requireNamespace("pbkrtest")
pbkrtest::vcovAdj(fm1)
ns = getNAmespace("pbkrtest")
ns = getNamespace("pbkrtest")
with(ns, vcovAdj(fm1))
vcov(fm2)
with(ns, vcovAdj(fm2))
vca = function(env, object)
with(env, vcovAdj(object))
vca(ns, fm1)
vca = function(object) {
ns = getNamespace("pbkrtest")
with(ns, vcovAdj(object))
}
vca(fm1)
?eval
fix(vca)
vca(fm1)
vca
vca(fm1)
fix(vca)
vca
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
?attach
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
fix(vca)
vca(fm1)
search()
detach()
fix(vca)
vca(fm1)
search()
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
vca
attachNamespace
fix(vca)
vca(fm1)
vca
library(lsmeans)
search()
ref.grid(fm1)
ref.grid(fm1, at=list(Days=c(3,4,5,6)))
ref.grid(fm1, at=list(Days=c(3,4,5,6))) -> rg
lsmeans(rg, "Days")
rg@V
slotNames(rg)
rg@dfargs
search()
loadedNamespaces()
library(pbkrtest)
loadedNamespaces()
q("no")
library(lme4)
example(lmer)
library(lsmeans)
lsmeans(fm1, "Days", at = list(Days=2:6))
search()
df = summary(lsmeans(fm1, "Days", at = list(Days=1:6)))
df
?mplot
?matrixplot
?matrix.plot
??matrix.plot
matplot(df$Days, df[, c(2,4,5)], type="l")
names(df)
matplot(df$Days, df[, c(2,5,6)], type="l")
?swiss
swiss.lm = lm(Fertility ~ (.)^2, data=swiss)
swiss.lm
summary(swiss)
summary(swiss.lm)
swiss.lm = lm(Fertility ~ (Agriculture+Education+Examination+Infant.Mortality)^2, data=swiss)
summary(swiss.lm)
summary(swiss)
swiss.rg = ref.grid(swiss.lm, at=list(
Agriculture = c(25,50,75),
Examination = c(8,16,24),
Infant.Mortality = c(15,20,25)))
swiss.rg
lsmip(swiss.rg, Agriculture ~ Examination | Infant.Mortality)
lsmip(swiss.rg, Agriculture ~ Examination | Infant.Mortality, ylab="Predicted Fertility")
lsns(swiss.rg, "Infant.Mortality")
lsmeans(swiss.rg, "Infant.Mortality")
lsmeans(swiss.rg, "Examination")
lsmeans(swiss.rg, "Examination", by = "Infant.Mortality")
swiss.rg
summary(swiss.lm)
lsmip(swiss.rg, Infant.Mortality ~ Examination | Agriculture, ylab="Predicted Fertility")
?swiss
pairs(swiss)
summary(swiss.rg)
predict(swiss.rg)
q("no")
source('H:/progs/R/devel/LSMEANS/lsmeans/test-data.R')
library(lsmeans)
setwd(c:/Lrmth/temp)
setwd("c:/Lenth/temp")
dir()
rource("battery.r")
source("battery.r")
fun <- read.csv('battery.csv', header=TRUE)
fun
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand, adjust='tukey')
result.pairs <- pairs(result.lsmo, adjust='tukey')
summary(result.pairs, infer=TRUE)
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand, adjust='tukey')
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand)
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand)
confint(pairs(result.lsmo))
q("no")
