aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
maxb
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
lsm.options(pbkrtest.limit = 1e6/2^30)
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
aug(); aug(); aug(); aug(); system.time(lsmeans(BOats.lmer, ~Variety))
system.time(pbkrtest::vcov(BOats.lmer))
system.time(pbkrtest::vcovAdj(BOats.lmer))
library(pbkrtest)
system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); print(system.time(vcovAdj(BOats.lmer)))
aug(); aug(); aug(); aug(); system.time(print(vcovAdj(BOats.lmer)))
fix(aug)
aug(); aug(); aug(); aug(); system.time(print(vcovAdj(BOats.lmer)))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
nrow(BOats)
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
aug(); aug(); aug(); aug(); system.time(vcovAdj(BOats.lmer))
class(BOats.lmer)
str(BOats.lmer)
summary(BOats.lmer)
q("no")
setwd("h:/scratch")
data=read.csv("alligator.csv")
head(data)
library(nnet)
fit=multinom(food~lake+sex+size, data = data)
library(effects)
I now wanted to get pairiwise Tukey posthoc tests between the different lakes using
library(lsmeans)
library(coda)
Oats.mclsm = lsmeans(Oats.mc)
Oats.mclsm = lsmeans(Oats.mc, "nitro")
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
plot(as.mcmc(Oats.mclsm))
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats, verbose = FALSE)
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
set.seed(12345); runif(5)
set.seed(12345); runif(5)
Oats.mclsm
contrast(Oats.mclsm, "consec")
packageVersion("lmerTest")
install.packages("lmerTest")
help("lsmeans", package="lmerTest")
citation("lmerTest")
q("no")
q("no")
library(pscl)
library(lsmeans)
example(hurdle)
ls()
tst = function(object, mode = c("mean","count","zero","prob.ratio")) {
mode = match.arg()
type = switch(mode,
mean = "response", count = "count", prob.ratio = "zero")
rg = ref.grid(object, mode = mode)
cat("predict results:\n ")
print(predict(object, new = rg@grid, type = type))
cat("\nref.grid results:\n")
summary(rg)
}
tst(fm_hnb1)
fix(tst)
tst=edit()
tst(fm_hnb1)
tst(fm_hnb2)
ls()
tst(fm_hp1)
tst(fm_hp2)
summary(fm_hp2)
summary(fm_hnb2)
summary(fm_hnb1)
ls()
fm_hnb1$dist
fm_hnb2$dist
fm_hp1$dist
fm_hp2$dist
tst(fm_hp2)
tst(fm_hnb1)
tst(fm_hnb1,"c")
fix(tst)
tst(fm_hnb1,"c")
tst(fm_hnb1,"z")
tst(fm_hnb1,"p")
tst(fm_hnb2,"m")
tst(fm_hnb2,"c")
tst(fm_hnb2,"z")
tst(fm_hnb2,"p")
tst(fm_hp1,"p")
tst(fm_hp1,"c")
tst(fm_hp1,"r")
tst(fm_hp1,"m")
tst(fm_hp2,"m")
tst(fm_hp2,"c")
tst(fm_hp2,"p")
library(lsmeans)
tst(fm_hp2,"p")
fm_hnb3 = update(fm_hnb1, dist = c("negbin", "geometric"))
?hurdle
fm_hnb3 = update(fm_hnb1, zero.dist = "geometric")
fm_hnb4 = update(fm_hnb1, dist = "geometric")
fm_hnb5 = update(fm_hnb1, dist = "geometric", zero.dist = "geom")
fm_hnb3$dist
fm_hnb4$dist
fm_hnb45dist
fm_hnb5dist
fm_hnb5$dist
tst(fm_hnb3)
tst(fm_hnb3, "c")
tst(fm_hnb3, "p")
tst(fm_hnb4)
tst(fm_hnb4, "c")
library(lsmeans)
tst(fm_hnb4)
tst(fm_hnb4,"c")
tst(fm_hnb4,"p")
tst(fm_hnb3)
tst(fm_hnb3,"c")
tst(fm_hnb3,"p")
tst(fm_hp2,"p")
tst(fm_hp2,"m")
tst(fm_hp2,"c")
tst(fm_hnb5,"c")
tst(fm_hnb5,"p")
tst(fm_hnb5,"m")
TST = function(object) {
print(tst(object, "mean"))
print(tst(object, "count"))
print(tst(object, "prob.ratio"))
}
TST(fm_hnb1)
TST(fm_hnb2)
TST(fm_hp1)
TST(fm_hp2)
TST(fm_hnb3)
TST(fm_hnb4)
TST(fm_hnb5)
fm_hp3 = update(fm_hp1, zero.dist = "negbin")
fm_hp3$dist
TST(fm_hp3)
summary(fm_hp3)
?hurdle
options()
options(help_type = NULL)
?hurdle
options(help_type = "text")
?hurdle
options(help_type = "html")
?hurdle
getwd()
load("h:/downloads/TakeoverBids.rda")
dir("h:/Downloads")
load("h:/Downloads/TakeoverBids.rda")
load("h:/Downloads/TakeoverBids.rda")
load("h:/Downloads/CodParasites.rda")
load("h:/Downloads/DebTrivedi.rda")
install.packages("//home.iowa.uiowa.edu/rlenth/Downloads/countreg_0.1-4.zip", repos = NULL)
install.packages("//home.iowa.uiowa.edu/rlenth/Downloads/countreg_0.1-4.zip", repos = NULL, type="source")
library(countreg)
ls(2)
data(TakeoverBids)
ls()
detach()
names(TakeoverBids)
TB.hnbb = hurdle(bids ~ .|., dist="negbin", zero.dist="bin", data=TakeoverBids)
TB.hnbnb = hurdle(bids ~ .|., dist="negbin", zero.dist="negbin", data=TakeoverBids)
TST(TB.hnbb)
TST(TB.hnbb)
ls()
summary(TB.hnbb)
TB.hnbnb = hurdle(bids ~ whiteknight+bidpremium|realrest, dist="negbin", zero.dist="negbin", data=TakeoverBids)
TB.hnbb = hurdle(bids ~ whiteknight+bidpremium|realrest, dist="negbin", zero.dist="bin", data=TakeoverBids)
TST(TB.hnbb)
tst(TB.hnbb)
tst(TB.hnbnb)
summary(TB.hnbnb)
tst(TB.hnbb,"p")
tst(TB.hnbb,"c")
tst(TB.hnbnb,"p")
tst(TB.hnbnb)
tst(TB.hnbnb,"c")
TB.hnbg = hurdle(bids ~ whiteknight+bidpremium|realrest, dist="negbin", zero.dist="geom", data=TakeoverBids)
tst(TB.hnbg,"m")
tst(TB.hnbg,"p")
coef(TB.hnbg)
coef(TB.hnbnb)
tst(TB.hnbg)
tst(TB.hnbnb)
?D
deriv(~(t/(t+mu))^t, "mu")
dv = .Last.value
with(list(t=1.5, mu=1.8), eval(ev))
with(list(t=1.5, mu=1.8), eval(dv))
with(list(t=1.5, mu=1.8), c((t/(t+mu)^(1+t), eval(dv))
with(list(t=1.5, mu=1.8), c((t/(t+mu)^(1+t), eval(dv))))
with(list(t=1.5, mu=1.8), c((t/(t+mu))^(1+t), eval(dv)))
with(list(t=1.5, mu=1.8), c((t/(t+mu))^(1+t), eval(dv)$mu))
with(list(t=1.5, mu=1.8), c((t/(t+mu))^(1+t), attr(eval(dv), "gradient"))
)
with(list(t=1.5, mu=1.8), c((t/(t+mu))^(1+t), attr(eval(dv), "gradient")))
with(list(t=1.5, mu=2.8), c((t/(t+mu))^(1+t), attr(eval(dv), "gradient")))
with(list(t=.5, mu=2.8), c((t/(t+mu))^(1+t), attr(eval(dv), "gradient")))
ls()
summary(TB.hnbnb)
summary(TB.hnbnp)
summary(TB.hnbp)
summary(TB.hnbg)
tst(TB.hnbp)
tst(TB.hnbg)
tst(TB.hnbnb)
summary(TB.hnbg)
summary(TB.hnbnb)
TB.hnbg = hurdle(bids ~ whiteknight + bidpremium | whiteknight + bidpremium, data = TakeoverBids,
dist = "negbin", zero.dist = "geometric")
summary(TB.hnbg)
tst(TB.hnbg)
TB.hnbg = hurdle(bids ~ whiteknight + bidpremium | whiteknight + bidpremium, data = TakeoverBids,
TB.hnbnb = hurdle(bids ~ whiteknight + bidpremium | whiteknight + bidpremium, data = TakeoverBids,
dist = "negbin", zero.dist = "negbin")
summary(TB.hnbnb)
tst(TB.hnbnb)
tst(TB.hnbnb,"c")
tst(TB.hnbnb,"p")
tst(TB.hnbnb,"z")
tst(TB.hnbg,"z")
summary(TB.hnbg)
tst(HB.hnbg)
tst(TB.hnbg)
tst(TB.hnbg, "c")
tst(TB.hnbg, "p")
tst(TB.hnbg, "z")
TBall.hnbg = hurdle(bids ~ . | ., data = TakeoverBids, dist = "negbin", zero.dist = "geometric")
TBall.hnbnb = hurdle(bids ~ . | ., data = TakeoverBids, dist = "negbin", zero.dist = "negbin")
summary(TBall.hnbg)
summary(TBall.hnbnb)
tst(TBall.hnbnb, "z")
TBall.hnbnb = hurdle(bids ~ . | 1, data = TakeoverBids, dist = "negbin", zero.dist = "negbin")
TBall.hnbnb = hurdle(bids ~ . | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "negbin")
summary(TBall.hnbnb)
tst(TBall.hnbnb, "z")
summary(ref.grid(TBall.hnbnb))
summary(ref.grid(TBall.hnbnb, mode="zero", type = "response"))
TBall.hnbg = hurdle(bids ~ . | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "geometric")
summary(ref.grid(TBall.hnbg, mode="zero", type = "response"))
TBall.hnbg = hurdle(bids ~ realrest | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "geometric")
r.hnbg = hurdle(bids ~ realrest | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "geometric")
r.hnbnb = hurdle(bids ~ realrest | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "negbin")
summary(r.hnbg)
summary(r.hnbnb)
tst(r.hnbg)
tst(r.hnbnb)
q("no")
library(lsmeans)
library(countreg)
help(hurdle)
example(hurdle)
ls()
class(fm_hnb1)
summary(ref.grid(fm_hnb1))
summary(ref.grid(fm_hnb1))
p1
dp1
p2
dp2
mu1
mu2
X2
diag(mu1 * dp2/p1)
mu1 * dp2/p1
diag(.Last.value)
matrix(mu1 * dp2/p1)
diag(1)
diag(.137)
diag(c(.137,.137))
diag(.137)
diag(2)
summary(fm_hnb1)
summary(fm_hnb2)
summary(cs)
summary(ref.grid(fm_hnb1, at=list(width=c(22,26,30),color=1:4)))
summary(ref.grid(fm_hnb2, at=list(width=c(22,26,30),color=1:4)))
data(TakeoverBids)
r.hnbg = hurdle(bids ~ realrest | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "geometric")
r.hnbnb = hurdle(bids ~ realrest | realrest, data = TakeoverBids, dist = "negbin", zero.dist = "negbin")
summary(r.hnbnb)
summary(r.hnbg)
summary(ref.grid(r.hnbg))
summary(ref.grid(r.hnbnb))
summary(r.hnbnb)
summary(fm_hnb2)
q("no")
install.packages("//home.iowa.uiowa.edu/rlenth/Downloads/lsmeans_2.20-31.tar.gz", repos = NULL, type = "source")
library(lsmeans)
vignette("uising-lsmeans")
vignette("using-lsmeans")
q("no")
update.packages()
library()
