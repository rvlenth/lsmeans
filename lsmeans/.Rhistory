"40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50",
"51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61",
"62"), class = "factor"), condition = structure(c(2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,
1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L), .Label = c("fixed", "random"), class = "factor"),
validity = structure(c(1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L), .Label = c("valid", "invalid"), class = "factor"),
believability = structure(c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L), .Label = c("believable", "abstract",
"unbelievable"), class = "factor"), response = c(2.5, 3.25,
4, 4.5, 3.25, 3.75, 4.25, 2.75, 3.5, 3.25, 3.75, 4, 2, 2,
2.25, 2.25, 3, 2.5, 3.25, 3.5, 3.25, 3.5, 3.25, 1.75, 4.5,
3.25, 2.75, 3.5, 3.75, 1.25, 2.5, 3.5, 3.25, 3.25, 4, 3.25,
4, 4, 3.75, 2.5, 4.5, 2.75, 3.5, 3.25, 2.25, 3.25, 3.5, 3.25,
3.75, 3.75, 3.25, 4.75, 3.5, 3.75, 3, 2.25, 3.25, 3.25, 2.75,
3, 2, 3.75, 2.25, 3.25, 4.5, 3.25, 3, 2.25, 4, 3.5, 3, 3.75,
3, 1.25, 2.75, 3.75, 3, 3.25, 3.75, 4, 3.75, 3.75, 3, 3,
3.25, 3.75, 3.75, 3.25, 3.75, 3.5, 3, 3.25, 3.25, 4, 3, 4.25,
3.5, 3.5, 4.75, 3.5, 2.75, 1.75, 3.25, 2.75, 2.25, 4, 3.5,
1.75, 3.5, 2.75, 2.75, 4.25, 3.25, 3, 4.25, 3, 2.5, 3.25,
3.5, 2, 3.5, 3.25, 3.25, 3, 2.5, 4.25, 3.25, 2.25, 2.75,
3.5, 2.5, 2.25, 3.25, 3.75, 4, 4.25, 3.75, 2.75, 4, 4, 1.75,
4.5, 4, 2, 3.75, 3.5, 3.75, 3.5, 3.5, 2.5, 3.25, 3.75, 3.25,
4.25, 3.75, 3.25, 4.5, 3.75, 4.25, 3.5, 4, 4, 3.5, 2.25,
3.75, 2.75, 2.25, 3.25, 3.75, 3.5, 2, 2.25, 2, 2.75, 3.5,
2.25, 2.25, 3.5, 3, 2.5, 4.5, 3, 3, 3.25, 2.5, 2.25, 2, 1,
2.5, 2, 1.25, 1.75, 2.5, 2.75, 4, 4.25, 3, 2.5, 3.5, 2.75,
3.25, 3, 3, 2, 3, 3.5, 2.75, 4, 4, 2, 3.25, 3, 3.75, 3.5,
2.75, 2.25, 3.75, 3.25, 3.75, 3.75, 4, 3.5, 4.25, 2.5, 3,
4.5, 3.5, 1, 3, 3, 2.5, 3.5, 3, 3.75, 4.5, 3.5, 2.75, 2.75,
3, 3.75, 3, 3.25, 3.5, 3, 2.75, 2.75, 3.5, 3.5, 4.5, 4.25,
4, 3.25, 4.25, 3.5, 3.25, 2.75, 2.75, 2.25, 3, 3.25, 2.5,
3, 3.25, 3.5, 4.75, 3, 3, 4, 2.5, 2.75, 2.75, 2.75, 3.75,
3.25, 3, 3.5, 2.75, 3, 2.5, 2.75, 4.5, 2, 3, 1, 3.25, 2,
2.25, 2.75, 3.5, 4, 3.75, 2.5, 3.5, 2, 2.75, 3.25, 2.25,
3.5, 3.75, 1.5, 2.5, 2.75, 2.75, 2.25, 2.75, 2.25, 3.5, 2.75,
2, 2.5, 3, 2.25, 3.75, 2, 3.25, 4, 2.75, 3.25, 3.75, 2.25,
2.75, 3.5, 3.5, 3, 3.5, 3.75, 3.25, 3.5, 3.75, 3, 2.75, 2.5,
3.5, 2.25, 2.5, 3, 3.25, 2, 3, 2.5, 2.5, 3.5, 3.75, 4.25,
3.5, 3.5, 4.25, 2.75, 2.75, 3.25, 3.25, 3.75, 3.75, 3.5,
3, 1.25, 3, 3, 2.5, 4.25)), .Names = c("id", "condition",
"validity", "believability", "response"), row.names = c(NA, -360L
), class = "data.frame")
require(lsmeans)
afex::set_sum_contrasts()
a1 <- aov(response~condition*believability*validity+Error(id/(believability*validity)), dat)
# set up reference grid with interaction per condition:
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
library(lsmeans)
test(con2, joint = TRUE, by = "condition")
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
test(con2, joint = FALSE)
library(lsmeans)
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
library(lsmeans)
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
con2@dffun
search()
.aovlist.dffun
ls(2)
.aovlist.dffun
q("no")
nrow(warpbreaks)
warp.lm = lm(breaks ~ wool * tension, data = warpbreaks)
sub =- sample(1:54, 39)
warpsub.lm = update(warp.lm, subset=sub)
anova(warp.lm)
anova(warpsub.lm)
warps.lm = updats(warpsub.lm, .~tension*wool)
warps.lm = update(warpsub.lm, .~tension*wool)
anova(warps.lm)
libray(car)
library(car)
Anova(warps.lm)
Anova(warpsub.lm)
Anova(warpsub.lm, type="III")
Anova(warp.lm)
Anova(warp.lm,type="III")
options(texi2dvi = "latexmk", signif.starts = FALSE)
Anova(warp.lm,type="III")
options(texi2dvi = "latexmk", signif.stars = FALSE)
Anova(warp.lm,type="III")
?print.anova
?anova
args(stats:::print.anova)
options(texi2dvi = "latexmk", show.signif.stars = FALSE)
Anova(warp.lm,type="III")
test(contrast(lsmeans(warp.lm, ~wool), "dunnett"), joint = TRUE)
library(lsmeans)
test(contrast(lsmeans(warp.lm, ~wool), "dunnett"), joint = TRUE)
anova(warp.lm)
anova(warpsub.lm)
test(contrast(lsmeans(warpsub.lm, ~wool), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warp.lm, ~tension), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warpsub.lm, ~tension), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warps.lm, ~tension), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warps.lm, ~tension:wool), "dunnett"), joint = TRUE)
?Anova
warpc.lm = update(warp.lm, contrasts = list(wool = "contr.sum", tension = "contr.sum"))
coef(warp.lm)
coef(warpc.lm)
Anova(warpc.lm, type = "III")
library(lsmeans)
example(summary.ref.grid)
rbind.default
?rbind
rbind.data.frame
showMethods("rbind")
ls()
rbind(t.w, w.t)
debug(rbind.ref.grid)
debug(lsmeans:::rbind.ref.grid)
rbind(t.w, w.t)
list(...)
debug(methods::rbind2)
rbind(t.w, w.t)
q("no")
q("no")
getwd()
setwd("./././././temp")
setwd("././././temp")
setwd("~")
getwd()
setwd("~/temp")
dir()
source("liviu.RData")
load("liviu.RData")
ls()
names(SwProp)
formula(sw.mod)
sw.mod$call
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
library(lsmeans)
formula(sw.mod)
sw.mod$call
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
repl
ls()
formula(sw.mod)
all.vars(formula(sw.mod))
lsmeans:::All.vars(formula(sw.mod))
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
vars
vars
vars
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
args(all.vars)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
list(...)
list(...)
list(...)
list(...)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
All.vars(lhs, functions = TRUE)
All.vars(lhs, functions = FALSE)
All.vars(lhs)
lhs
class(lhs)
as.formula(lhs)
form
class(form)
attr(data,"call")
attr(data,"call")$formula
eval(form)
class(data)
i
eval(i)
eval(sw.form[[i]])
attr(data, "call")
ls()
ls()
sw.mod
formula(sw.mod)
sw.mod$call
sw.mod$call$formula
all.vars(sw.mod$call$formula)
all.vars.call
methods("all.vars")
library(lsmeans)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
library(lsmeans)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
q("no")
getwd()
setwd("~/temp")
dir()
library(daewr)
install.packages("daewr")
library(daewr)
require(ggplot2)   # graphics
require(lsmeans)   # lsmeans, treatment comparisons
require(plyr)      # convenience functions such as mutate() & ddply()
require(car)       # Anova()
# change a few ggplot defaults
theme_set(theme_grey(base_size=14) +
theme(axis.text=element_text(colour='black')))
update_geom_defaults('point', list(size=4, shape=21))
update_geom_defaults('bar',   list(colour='black', fill='white'))
lsm.options(summary = list(infer=c(TRUE, TRUE)))
d = data.frame(
tx = sample( rep(c(35, 40, 45), each=2)) )
d = mutate(d,
height = 10 + tx + rnorm(6))
d
fit = lm(height ~ tx, data=d)   # SLR *with* intercept
summary(fit)
lsm = lsmeans(fit, ~tx, cov.reduce=F)
lsm
plot(lsm)
con = contrast(lsm, 'trt.vs.ctrl', ref=1)
con
plot(con)
plot(con, int.adjust = "dunnett")
con@misc
?plot.lsmobj
library(lsmeans)
plot(con)
int.adjust
plot(con, int.adjust="none")
int.adjust
library(lsmeans)
?plot.lsmobj
library(lsmeans)
?plot.lsmobj
library(lsmeans)
?plot.lsmobj
dir()
example(lsmeans)
ls()
warp.lsm@misc
plot(warp.lsm)
plot(update(warp.lsm, adjust=NULL))
plot(update(warp.lsm, adjust="bonf"))
plot(update(warp.lsm, adjust="bonf", by=NULL))
plot(update(warp.lsm, by=NULL))
search()
ls(8)
q("no")
q("no")
example(lsmeans::lsmeans)
library(lsmeans)
example(lsmeans)
ls()
city.lsm
names(summar y(city.lsm))
names(summary(city.lsm))
uC = c("A","B","oddball","C","D")
uC %in% LETTERS(1:4)
uC %in% LETTERS[1:4]
? "%in%"
grep(uC, LETTERS[1:4])
sapply(uC, %in%, LETTERS[1:4])
q("no")
library(lsmeans)
?models
package.version("lsmeans")
Package.version("lsmeans")
Package.Version("lsmeans")
??version
packageVersion("lsmeans")
packageVersion("MCMCglmm")
install.packages("MCMCglmm")
packageVersion("MCMCglmm")
citation("MCMCglmm")
citation("MASS")
library(MCMCglmm)
?mcmcglmm
ls(2)
?MCMCglmm
data(Oats, package=nlme)
data(Oats, package="nlme")
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random = Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
names(Oats)
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random - Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random = Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), nitt=1300, burnin=300, data =- Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), nitt=1300, burnin=300, data = Oats)
library(lsmeans)
library(coda)
Oats.mclsm = lsmeans(Oats.mc)
Oats.mclsm = lsmeans(Oats.mc, "nitro")
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
plot(as.mcmc(Oats.mclsm))
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats, verbose = FALSE)
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
set.seed(12345); runif(5)
set.seed(12345); runif(5)
Oats.mclsm
contrast(Oats.mclsm, "consec")
packageVersion("lmerTest")
install.packages("lmerTest")
help("lsmeans", package="lmerTest")
citation("lmerTest")
q("no")
q("no")
dir()
library(lsmeans)
vignette("using=lsmeans")
?lsmeans
example(rbind.ref.grid)
packageVersion("lsmeans")
packageVersion
q("no")
install.packages("glmmADMB", repos="http://R-Forge.R-project.org")
library(glmmADMB)
?glmmADMB
q("no")
install.packages("betareg")
help("modeltools-package", package = "modeltools")
??modeltools
library(modeltools)
ls(2)
?survReg
?Predict
methods("Predict")
Predict
betareg:::predict.betareg
betareg:::args(model.matrix,betareg)
args(betareg:::model.matrix,betareg)
args(betareg:::model.matrix.betareg)
args(betareg:::vcov.betareg)
library(betareg)
ls(2)
?betamix
args(betareg:::vcov.betamix)
args(betareg:::predict.betamix)
args(flexmix:::predict.flexmix)
search()
library(flexmix)
?flexmix
args(flexmix:::predict.FLXM)
ls(getNamespace("flexmix"))
ls(getNamespace("betamix"))
ls(envir=getNamespace("betamix"))
ls(getNamespace("betareg"))
?posterior.betamix
args(betareg:::posterior.betamix)
args(betareg:::terms.betareg)
example(betareg)
gy2
gy2$terms$full
args(betareg:::vcov.betareg)
args(betareg:::coef.betareg)
?coef.betare
?coef.betareg
?recode
??recode
head(model.matrix(gy2))
head(model.matrix(gy2, "mean"))
head(model.matrix(gy2, "prec"))
head(model.matrix(gy2, "full"))
library(lsmeans)
ref.grid(gy2)
ref.grid(gy2)
ref.grid(gy2)
library(lsmeans)
ref.grid(gy2)
ref.grid(gy2, mode = "precision")
library(lsmeans)
ref.grid(gy2, mode = "precision")
ref.grid(gy2, mode = "phi.link")
ref.grid(gy2, mode = "link")
ref.grid(gy2, mode = "link")
library(lsmeans)
ref.grid(gy2, mode = "link")
ref.grid(gy2, mode = "q")
ref.grid(gy2, mode = "")
ref.grid(gy2, mode = "v")
predict(ref.grid(gy2))
g1 = ref.grid(gy2)@grid
predict(gy2, new = g1)
predict(gy2, new = g1, type = "link")
predict(ref.grid(gy2, mode = "link"))
predict(gy2, new = g1, type = "prec")
predict(ref.grid(gy2, mode = "prec"))
predict(ref.grid(gy2, mode = "phi"))
exp(.Last.value)
library(multcomp)
?summary.glht
confint.glht
q("no")
install.packages("xtable")
library(lsmeans)
q("no")
setwd("C:\\Users\\Russell\\Dropbox\\Personal")
dir(pat="we")
dir()
wt = read.csv("Weights2016-02-24")
names(wt)
sapply(wt, class)
uw = sort(unique(wt$Weight))
uw
lastwt = function(x) rev(wt$Date[wt$Weight <= x])[1]
lastwt(155)
wt$Date = as.character(wt$Date)
lastwt(155)
lastwt(159.6)
sapply(uwt, lastwt)
lw = sapply(uw, lastwt)
cbind(uw, lw)
fix(lastwt)
lw = sapply(uw, lastwt)
cbind(uw, lw)
wt
wt = wt[1384:1]
wt = wt[1384:1,]
fix(lastwt)
lw = sapply(uw, lastwt)
cbind(uw,lw)
q("no")
