pairs(update(obj, V = .5 + diag(.5, 4)))
csmat = function(corr, k = 4)
corr + diag(1 - corr, k)
csmat(.9)
csmat(.99)
csmat(-.99)
pairs(update(obj, V = csmat(.5))
)
pairs(update(obj, V = csmat(.55)))
pairs(update(obj, V = csmat(.95)))
pairs(update(obj, V = csmat(-.95)))
cld(update(obj, V = csmat(-.95)))
cld(update(obj, V = csmat(.95)))
slotNames(obj)
library(lsmeans)
?update
library(lsmeans)
?models
library(lsmeans)
?update
?summary.ref.grid
q("no")
install.packages("xtable", repos="http://R-Forge.R-project.org")
library(lsmeans)
citation("lsmeans")
q("no")
library(lsmeans)
example(rbind.ref.grid)
lapply(objs, function(o) o@misc$avg.over)
objs[[1]]@misc
objs[[2]]@misc
objs[[3]]@misc
sqwarp.rg
summary(sqwarp.rg, type = "response")
str(pairs(sqwarp.rg, by = "wool"))
ls()
t.w
w.t
t = lsmeans(warp.rg, "tension")
w = lsmeans(warp.rg, "wool")
t
w
library(lsmeans)
w
library(lsmeans)
w
rbind(t,w)
.Last.value@misc
rbind(t,w)[1:2]
summary(warp.rg)
library(xtable)
example(xtableList)
ls()
xList
class(xList)
ls(2)
xtableLSMeans
?print.xtableList
args(lsmeans:::print.summary.ref.grid)
print.xtableList
print.xtable
d = 3*365 + 366
d/7
d %% 7
library(lsmeans)
library(lsmeans)
ttt = make.tran("boxcox", c(.379, -2.78964))
ttt = make.tran("power", c(.379, -2.78964))
library(lsmeans)
ttt = make.tran("power", c(.379, -2.78964))
ttt$name
x = seq(-4,4, by=.25)
plot(x, ttt$linkfun(x))
eta = seq(0,2,len=30)
plot(eta, ttt$linkinv(eta))
ttt = make.tran("boxcox", c(.379, -2.78964))
plot(x, ttt$linkfun(x))
plot(eta, ttt$linkinv(eta))
ttt$name
make.tran("boxcox", .379)
x
sign(x)
library(lsmeans)
ttt = make.tran("symp", 2)
library(lsmeans)
ttt = make.tran("symp", 2)
plot(x, ttt$linkfun(x), type = "l")
ttt
library(lsmeans)
ttt = make.tran("symp", 2)
plot(x, ttt$linkfun(x), type = "l")
plot(eta, ttt$linkinv(eta), type = "l")
plot(x, ttt$linkinv(x), type = "l")
ttt$name
library(lsmeans)
ttt = make.tran("symp", 2)
ttt$name
ttt = make.tran("symp", c(-.395, 1.5))
plot(x, ttt$linkfun(x), type = "l")
plot(x, ttt$linkinv(x), type = "l")
ttt = make.tran("symp", c(.395, 1.5))
plot(x, ttt$linkfun(x), type = "l")
plot(x, ttt$linkinv(x), type = "l")
abline(h=0, lty=3)
abline(h=1.5, lty=2)
ttt$name
txt = .Last.value
gsub("\(|\)", "|", txt)
gsub("(|)", "|", txt)
gsub("\\(|\\)", "|", txt)
library(lsmeans)
ttt = make.tran("symp", c(.395, 1.5))
ttt$name
library(lsmeans)
ttt = make.tran("symp", c(.395, 1.5))
ttt$name
make.tran("symp", 3)
make.tran("symp", -3)
make.tran("pow", -3)
library(lsmeans)
make.tran("power", 0)
library(lsmeans)
make.tran("power", 0)
make.tran("power", c(0,1))
library(lsmeans)
make.tran("power", c(0,1))
make.tran("power", c(0,1))
make.tran("power", c(0,1))
make.tran("power", c(0, -1))
library(lsmeans)
make.tran("power", c(0, 1))
make.tran("power", c(0, -1))
make.tran("power", c(0, -1.3789087))
make.tran("box", c(0, -1.3789087))
make.tran("box", c(.456, -1.3789087))
0^-1
make.link("log")
library(lsmeans)
make.link("genlog", c(1, 2))
make.tran("genlog", c(1, 2))
make.tran("genlog", c(1, 0))
make.tran("genlog", c(1, exp(1)))
make.tran("genlog", c(1, -1))
library(lsmeans)
make.tran("genlog", c(1, -1))
make.tran("genlog", c(1, 1))
make.tran("genlog", c(1, 1.01))
ttt = .Last.value
plot(x, ttt$linkfun(x))
ttt = make.tran("genlog", c(1, 1.01))
x
xx = x[17:33]
plot(xx, ttt$linkfun(xx))
ttt = make.tran("genlog", c(1, 2))
plot(xx, ttt$linkfun(xx))
environment(ttt$linkfun)$logbase
ttt$linkfun(xx)
ttt$linkfun
pmax(xx,0)
library(lsmeans)
ttt = make.tran("genlog", c(1, 2))
plot(xx, ttt$linkfun(xx))
plot(x, ttt$linkfun(x))
plot(eta, ttt$linkfun(eta))
plot(eta-.5, ttt$linkfun(eta-.5))
ttt = make.tran("genlog", c(1, 1.01))
plot(xx, ttt$linkfun(xx))
ttt = make.tran("genlog", c(1, 1.0001))
plot(xx, ttt$linkfun(xx))
ttt = make.tran("genlog", c(1, 1))
ttt
ttt = make.tran("genlog", c(1, pi))
ttt
ttt = make.tran("genlog", c(-3, pi))
ttt
plot(xx, ttt$linkfun(xx))
ttt = make.tran("genlog", c(1, pi))
plot(xx, ttt$linkfun(xx))
ttt = make.tran("genlog", c(1.5, pi))
plot(xx, ttt$linkfun(xx))
make.tran("genlog")
q("no")
strsplit(2*sqrt(y), "\\(")
strsplit("2*sqrt(y)", "\\(")
strsplit("2*sqrty)", "\\(")
strsplit("2*sqrty)", "\\*")
strsplit("2 * sqrty)", "\\*")
as.numeric("2 ")
as.numeric("xyz ")
form = 2*sqrt(y) ~ x1 + x2
strsplit(strsplit(form[2], "\\(")[[1]][1], "\\*")[[1]]
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2sqrt(y) ~ x1 + x2
form = 2+sqrt(y) ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2*y
form = 2+y ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2*y ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
try(as.numeric("xyz "))
try(as.numeric("xyz "), silent = TRUE)
args(try)
try(as.numeric("xyz "), silent = TRUE)
class(.Last.value)
?as.numeric
?suppressWarnings
suppressWarnings(as.numeric("xyz "))
suppressWarnings(as.numeric(" 3.789 "))
is
is.list(NULL)
link = lsmeans:::.make.tran("sqrt")
link = lsmeans:::.make.link("sqrt")
link$mult = 2
link
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult))
link2
link2$linkinv(3)
link2$mu.eta(3)
link$mu.eta(3)
link$linkinv(3)
ls(environment(link2$linkinv))
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult),
name = paste0(round(mult, 3), " * ", name))
link2
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult,
name = paste0(round(mult, 3), " * ", name)))
link2
library(lsmeans)
library(lsmeans)
warp.lm = lm(sqrt(breaks) + sqrt(1 + breaks) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
warp.lm = lm(sqrt(breaks) + sqrt(breaks+1) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
summary(.Last.value)
summary(.Last.value, type = "r")
summary(ref.grid(warp.lm), type = "r")
library(lsmeans)
summary(ref.grid(warp.lm), type = "r")
summary(ref.grid(warp.lm))
rg = ref.grid(warp.lm)
summary(rg)
summary(update(rg, tran.mult = 3))
summary(update(rg, tran.mult = 3), type = "response")
summary(update(rg, tran.mult = NULL), type = "response")
summary(update(rg, tran = "sqrt", tran.mult = NULL), type = "response")
rg@tran
rg@misc$tran
rg
warp.lm = lm(2*sqrt(breaks) ~ wool*tension, data = earpbreaks)
warp.lm = lm(2*sqrt(breaks) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
library(lsmeans)
ref.grid(warp.lm)
args(gsub)
library(lsmeans)
args(gsub)
ref.grid(warp.lm)
summary(ref.grid(warp.lm))
library(lsmeans)
ref.grid(warp.lm)
ref.grid(with(make.tran("boxcox", .5), update(warp.lm, 3 * linkfun(breaks) ~ .)))
warp.bc = with(make.tran("boxcox", .5), lm(3 * linkfun(breaks) ~ wool*tension, data = warpbreaks))
warp.bc
summary(warp.bc)
ref.grid(warp.bc)
summary(.Last.value)
summary(ref.grid(warp.bc), type = "r")
ref.grid(warp.bc)@misc$tran
library(lsmeans)
ref.grid(warp.bc)
summary(.Last.value)
ref.grid(warp.bc)
summary(.Last.value, type = "r")
summary(ref.grid(warp.lm), type = "r")
summary(warp.lm)
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
summary(ref.grid(warp.bc), type = "r")
summary(ref.grid(warp.bc))
summary(ref.grid(warp.lm))
make.tran("boxcox", .5)
summary(warp.bc)
summary(wwarp.lm)
summary(warp.lm)
lsmeans(warp.lm, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
make.tran("boxcox", .5)
library(lsmeans)
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
summary(warp.bc)
lsmeans(warp.bc, ~tension|wool, type ="r")
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.as = with(make.tran("asin.sqrt"), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
make.tran("asin.sqrt")
warp.as = with(make.tran("asin.sqrt", 1), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
with(make.tran("asin.sqrt"), warpbreaks$breaks)
with(make.tran("asin.sqrt"), linkfun(warpbreaks$breaks))
with(make.tran("asin.sqrt", 100), linkfun(warpbreaks$breaks))
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.as = with(make.tran("asin.sqrt", 100), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.as, ~tension|wool, type ="r")
warp = lm(breaks ~ wool*tension, data = warpbreaks)
lsmeans(warp, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
library(lsmeans)
lsmeans(warp.bc, ~tension|wool, type ="r")
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc, ~tension|wool, type ="r")
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.lm2 = warp.lm
warp.sq = update(warp.lm, sqrt(breaks) ~ .)
lsmeans(wwarp.sq, ~tension|wool, type ="r")
lsmeans(warp.sq, ~tension|wool, type ="r")
lsmeans:::.make.link("sqrt")
coef(warp.sq)
coef(warp.slm2)
coef(warp.lm2)
coef(warp.lm2)/2
library(lsmeans)
lsmeans(warp.lm, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
warp.bc3 = with(make.tran("boxcox", .5), lm(3*linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc3, ~tension|wool, type ="r")
q("no")
install.packages(c("BH", "BRugs", "car", "curl", "devtools", "DiagrammeR", "digest", "doBy", "DoE.base", "effects", "evaluate", "formatR", "geepack", "ggplot2", "git2r", "gtable", "Hmisc", "htmltools", "htmlwidgets", "httr", "knitr", "lattice", "latticeExtra", "lhs", "lme4", "lsmeans", "manipulate", "MBESS", "MCMCglmm", "MCMCpack", "memoise", "mixtools", "multcomp", "munsell", "mvtnorm", "pbkrtest", "pheatmap", "plm", "prodlim", "qualityTools", "quantreg", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "rgl", "rJava", "rms", "rstudioapi", "RVAideMemoire", "scales", "sfsmisc", "shiny", "statmod", "TeachingDemos", "TH.data", "timeSeries", "urca", "visNetwork", "XML"))
example(lsmeans)
library(lsmeans)
example(lsmeans)
ls()
warp.lsm
regrid(warp.lsm, "log")
warp.lms = upadte(warp.lm, breaks - 20 ~ .)
warp.lms = update(warp.lm, breaks - 20 ~ .)
lsmeans(warp.lms, ~ "tension|wool")
lsmeans(warp.lms, ~ tension|wool)
regrid(lsmeans(warp.lms, ~ tension|wool))
lrg = regrid(lsmeans(warp.lms, ~ tension|wool), "log")
lrg
lrg@bhat
lrg@bhat[6] = NA
lrg
lrg@bhat
lrg@V
lrg@linfct
lrg@nbasis
lrg@nbasis = matrix(c(0,0,0,0,0,1))
lrg@nbasis
lrg
vignette("using-lsmeans")
lrg
X
y
lrg@V
lrg@V = lrg@V[1:5,1:5]
lrg
V
X
summary(lrg, type="r")
args(mean)
args(mean.default)
mean(rep(NA,5))
mean(rep(NA,5), na.rm = TRUE)
NaN <= NaN
diff(3,4)
diff(3:4)
diff(c(NA,3))
diff(c(NA,NA))
library(lsmeans)
summary(lrg, type="r")
tmp
lsmeans(warp.lms, ~tension|wool)
loc(c(NA, 1:5))
log(c(NA, 1:5))
1:5[-(1:5)]
(1:5)[-(1:5)]
excl = c(3,7)
tmp = 1:9
sapply(excl, function(ii) 0 + (tmp == ii))
library(lsmeans)
ls()
warp.lsm
lrg = regrid(lsmeans(warp.lms, ~tension|wool), "log")
library(lsmeans)
lrg = regrid(lsmeans(warp.lms, ~tension|wool), "log")
lrg
summary(lrg, type="r")
summary(pairs(lrg), type="r")
pw = pairs(lsmeans(warp.lms, ~tension|wool))
pw
regrid(pw, "log")
summary(regrid(pw, "log"), type = "r")
lrg
update(lrg, predict.type = "r")
args(regrid)
library(lsmeans)
summary(regrid(pw, "log", pre="r"))
lrg
lrg@nbasis
lrg@V
?ref.grid
library(lsmeans)
warp.bc = with(make.tran("boxcox", -.271), lm(linkfun(breaks) ~ wool*tension))
warp.bc = with(make.tran("boxcox", -.271), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc, ~wool)
lsmeans(warp.bc, ~wool, trans="resp")
lsmeans(warp.bc, ~wool, type = "r")
lsmeans(warp.bc, ~wool, trans="log")
lsmeans(warp.bc, ~wool, trans="log", type="r")
rg = regrid(ref.grid(warp.bc), transform = "response")
lsmeans(rg, "wool")
rg = regrid(ref.grid(warp.bc, type = "response"), transform = "response")
rg = regrid(ref.grid(warp.bc, type = "response"), transform = "log")
lsmeans(rg, "wool")
q("no")
load("H:/Documents/Dropbox/consulting/FacSal2015/fy2015-final.RData")
ls()
pred.err = 1000000/predict(final.lm) - saleq$Annual.Salary
plot(pred.err ~ TrkRank, data = saleq)
summary(pred.err)
plot(1000000/predict(final.lm) ~ Annual.Salary, data = saleq)
abline(0,1)
plot(1000000/predict(final.lm) ~ Annual.Salary, data = saleq, col=as.numeric(TrkRank))
plot(1000000/predict(final.lm) ~ Annual.Salary, data = saleq, col=as.numeric(TrkRank), subset = TrkRank=="O.15")
abline(0,1)
pred.sal = 1000000/predict*(final.lm)
pred.sal = 1000000/predict(final.lm)
hist(pred.sal[saleq$TrkRank == "O.15"])
predict(final.lm)[1:10]
saleq$ID.Number[1:10]
pred.sal[1:10]
ls()
show.results
head(pred.salary)
pred.salary[7]
pred.sal[7]
pred.salary
plot(pred.salary ~ pred.sal)
abline(0,1,col="red")
q("no")
library(lsmeans)
64001.6941/62297.6263
log(64001.6941/62297.6263)
args(xtable:::print.xtableList)
args(xtable:::xtableList)
print(xtable(LSM))
library(xtable)
print(xtable(LSM))
getwd()
install.packages("../../xtable", repos=NULL)
install.packages("../../xtable", repos=NULL, type="source")
dir("../..")
detach(package:xtable)
install.packages("../../xtable", repos=NULL, type="source")
install.packages("spdep")
install.packages("splm")
install.packages("sphet")
q("no")
q("no")
# from the data wine, I estimated the model
library(ordinal)
data(wine)
fm22.clmm= clmm(rating~temp+contact +(1|judge),data=wine, Hess=T)
library(lsmeans)
rg <- ref.grid(fm22.clmm, mode = "link")
rg <- ref.grid(fm22.clmm, mode = "linear.predictor")
rg@bhat
rg
rg@linfct
lsmeans(fm22.clmm, "temp")
lsmeans(fm22.clmm, "temp", mode = "mean")
lsmeans(fm22.clmm, "temp", mode = "prob")
lsmeans(fm22.clmm, ~ rating|temp, mode = "prob")
lsmeans(fm22.clmm, ~ rating|temp, mode = "prob")
lsmeans(fm22.clmm, ~ cut|temp, mode = "cum")
lsmeans(fm22.clmm, ~ rating|temp, mode = "prob")
lsmeans(fm22.clmm, mode = "prob")
ref.grid(fm22.clmm, mode = "prob")
summary(ref.grid)
summary(ref.grid(fm22.clmm, mode = "prob"))
summary(ref.grid(fm22.clmm, mode = "mean"))
rg = ref.grid(fm22.clmm, mode = "mean")
lsmeans(rg, "temp")
lsmeans(rg, "temp")
lsmeans(rg, "temp")
lsmeans(rg, "temp")
xxx=lsmeans(rg, "temp")
xxx=lsmeans(rg, "temp")
debug(is.na)
xxx=lsmeans(rg, "temp")
q("no")
update.packages()
install.packages(c("ape", "BH", "BHH2", "car", "curl", "DEoptimR", "devtools", "DiagrammeR", "doBy", "dynaTree", "Ecfun", "effects", "evaluate", "formatR", "fortunes", "geepack", "git2r", "gplots", "heplots", "highr", "Hmisc", "htmltools", "httr", "jsonlite", "knitr", "lava", "lme4", "lsmeans", "mboost", "mime", "mixOmics", "multcomp", "nlme", "OpenMx", "openssl", "plyr", "quantreg", "R.matlab", "R.utils", "R2HTML", "Rcmdr", "RcmdrMisc", "Rcpp", "readxl", "relimp", "rms", "robustbase", "RODBC", "rpf", "rstudioapi", "RVAideMemoire", "scatterplot3d", "sem", "semTools", "shiny", "sp", "spdep", "SPOT", "StanHeaders", "stringi", "tseries", "vegan", "VGAM", "visNetwork", "withr", "xml2", "zoo"))
data(Oats, package="nlme")
library(lme4)
Oats.lmer = lmer(yield~Variety + factor(nitro) + (1|Block/Variety), data = Oats,
subset = -c(1,2,3,5,8,13,21,34,55))
library(lsmeans)
lsmeans(Oats.lmer, pairwise ~ Variety)
lsm.options(disable.satterth=FALSE)
lsmeans(Oats.lmer, pairwise ~ Variety)
install.packages("lmerTest")
lsmeans(Oats.lmer, pairwise ~ Variety)
?`extending-lsmeans`
?update
lsmeans(Oats.lmer, pairwise ~ Variety, opt = list(initMesg="Using Satterthwaite df"))
q("no")
