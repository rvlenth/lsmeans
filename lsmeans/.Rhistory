test(con1, joint=TRUE, by="condition")
con1@misc$dffcn
con1@misc
con1@dffun
con1@dfargs
dff = con1@dffun
dfa = con1@dfargs
fix(dff
)
con2@grid
dff(con2@linfct[1:4, ])
fix(dff)
dff(con2@linfct[1:4, ])
trace(dff)
dff(con2@linfct[1:4, ])
debug(dff)
dff(con2@linfct[1:4, ])
V
k
v
dfargs$wts
names(dfa$wts)
dimnames(dfa$wts)
dimnames(dfa$wts) = list(NULL,NULL)
dimnames(dfa$wts)
dfa$wts
names(dfa)
names(dfa)$vmats
names(dfa$vmats)
dimnames(dfa$vmats)
names(dfa$vmats[[1]])
dfa$vmats
names(dfa)
names(dfa$Vmats[[1]])
dimnames(dfa$Vmats[[1]])
dfa$Vmats
dimnames(dfa$Vmats)
class(dfa$Vmats)
sapply(dfa$Vmats, class)
for(i in 1:4) dimnames(dfa$Vmats[[i]]) = list(NULL,NULL)
names(dfa$Vmats)
names(dfa$Vmats) = 1:4
dfa$Vmats
names(dfa)
dff(con2@linfct[1:4, ])
v
dfargs$Vdf
j = 1
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, ])[ii]
k = con2@linfct
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, ])[ii]
dfargs=dfa
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, ])[ii]
ii
kk
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, , dop=FALSE])[ii]
ii = dfargs$Vidx[[j]]
kk = (k * dfargs$wts[j, , drop=FALSE])[ii]
dfargs$wts[j,]
dfargs$wts[j,][ii]
kk
fix(ddf)
fix(dff)
k*dfargs$wts[j,]
names(dfa$wts) = NULL
k*dfa$wts[j,]
k
dimnames(k)=list(NULL,NULL)
k
dff(k)
debug(dff)
dff(k)
fix(dff)
dff=edit()
debug(dff)
dff(k)
j
k*dfargs$wts[j,]
q("no")
q("no")
dat <- structure(list(id = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L,
2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L,
5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L,
7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 10L,
10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 12L,
12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L,
14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 16L, 16L, 16L, 16L,
16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 18L, 18L, 18L, 18L, 18L,
18L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 20L, 20L,
21L, 21L, 21L, 21L, 21L, 21L, 22L, 22L, 22L, 22L, 22L, 22L, 23L,
23L, 23L, 23L, 23L, 23L, 24L, 24L, 24L, 24L, 24L, 24L, 25L, 25L,
25L, 25L, 25L, 25L, 26L, 26L, 26L, 26L, 26L, 26L, 27L, 27L, 27L,
27L, 27L, 27L, 28L, 28L, 28L, 28L, 28L, 28L, 29L, 29L, 29L, 29L,
29L, 29L, 30L, 30L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 31L, 31L,
31L, 32L, 32L, 32L, 32L, 32L, 32L, 33L, 33L, 33L, 33L, 33L, 33L,
34L, 34L, 34L, 34L, 34L, 34L, 35L, 35L, 35L, 35L, 35L, 35L, 36L,
36L, 36L, 36L, 36L, 36L, 37L, 37L, 37L, 37L, 37L, 37L, 38L, 38L,
38L, 38L, 38L, 38L, 39L, 39L, 39L, 39L, 39L, 39L, 40L, 40L, 40L,
40L, 40L, 40L, 41L, 41L, 41L, 41L, 41L, 41L, 42L, 42L, 42L, 42L,
42L, 42L, 43L, 43L, 43L, 43L, 43L, 43L, 44L, 44L, 44L, 44L, 44L,
44L, 45L, 45L, 45L, 45L, 45L, 45L, 46L, 46L, 46L, 46L, 46L, 46L,
47L, 47L, 47L, 47L, 47L, 47L, 48L, 48L, 48L, 48L, 48L, 48L, 49L,
49L, 49L, 49L, 49L, 49L, 50L, 50L, 50L, 50L, 50L, 50L, 51L, 51L,
51L, 51L, 51L, 51L, 52L, 52L, 52L, 52L, 52L, 52L, 53L, 53L, 53L,
53L, 53L, 53L, 54L, 54L, 54L, 54L, 54L, 54L, 55L, 55L, 55L, 55L,
55L, 55L, 56L, 56L, 56L, 56L, 56L, 56L, 57L, 57L, 57L, 57L, 57L,
57L, 58L, 58L, 58L, 58L, 58L, 58L, 59L, 59L, 59L, 59L, 59L, 59L,
60L, 60L, 60L, 60L, 60L, 60L), .Label = c("1", "2", "3", "4",
"5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
"17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27",
"28", "29", "30", "32", "33", "34", "35", "36", "37", "38", "39",
"40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50",
"51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61",
"62"), class = "factor"), condition = structure(c(2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,
1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,
1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
2L, 2L, 2L, 2L, 2L), .Label = c("fixed", "random"), class = "factor"),
validity = structure(c(1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L,
2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L,
1L, 1L, 1L, 2L, 2L, 2L), .Label = c("valid", "invalid"), class = "factor"),
believability = structure(c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L,
3L, 1L, 2L, 3L, 1L, 2L, 3L), .Label = c("believable", "abstract",
"unbelievable"), class = "factor"), response = c(2.5, 3.25,
4, 4.5, 3.25, 3.75, 4.25, 2.75, 3.5, 3.25, 3.75, 4, 2, 2,
2.25, 2.25, 3, 2.5, 3.25, 3.5, 3.25, 3.5, 3.25, 1.75, 4.5,
3.25, 2.75, 3.5, 3.75, 1.25, 2.5, 3.5, 3.25, 3.25, 4, 3.25,
4, 4, 3.75, 2.5, 4.5, 2.75, 3.5, 3.25, 2.25, 3.25, 3.5, 3.25,
3.75, 3.75, 3.25, 4.75, 3.5, 3.75, 3, 2.25, 3.25, 3.25, 2.75,
3, 2, 3.75, 2.25, 3.25, 4.5, 3.25, 3, 2.25, 4, 3.5, 3, 3.75,
3, 1.25, 2.75, 3.75, 3, 3.25, 3.75, 4, 3.75, 3.75, 3, 3,
3.25, 3.75, 3.75, 3.25, 3.75, 3.5, 3, 3.25, 3.25, 4, 3, 4.25,
3.5, 3.5, 4.75, 3.5, 2.75, 1.75, 3.25, 2.75, 2.25, 4, 3.5,
1.75, 3.5, 2.75, 2.75, 4.25, 3.25, 3, 4.25, 3, 2.5, 3.25,
3.5, 2, 3.5, 3.25, 3.25, 3, 2.5, 4.25, 3.25, 2.25, 2.75,
3.5, 2.5, 2.25, 3.25, 3.75, 4, 4.25, 3.75, 2.75, 4, 4, 1.75,
4.5, 4, 2, 3.75, 3.5, 3.75, 3.5, 3.5, 2.5, 3.25, 3.75, 3.25,
4.25, 3.75, 3.25, 4.5, 3.75, 4.25, 3.5, 4, 4, 3.5, 2.25,
3.75, 2.75, 2.25, 3.25, 3.75, 3.5, 2, 2.25, 2, 2.75, 3.5,
2.25, 2.25, 3.5, 3, 2.5, 4.5, 3, 3, 3.25, 2.5, 2.25, 2, 1,
2.5, 2, 1.25, 1.75, 2.5, 2.75, 4, 4.25, 3, 2.5, 3.5, 2.75,
3.25, 3, 3, 2, 3, 3.5, 2.75, 4, 4, 2, 3.25, 3, 3.75, 3.5,
2.75, 2.25, 3.75, 3.25, 3.75, 3.75, 4, 3.5, 4.25, 2.5, 3,
4.5, 3.5, 1, 3, 3, 2.5, 3.5, 3, 3.75, 4.5, 3.5, 2.75, 2.75,
3, 3.75, 3, 3.25, 3.5, 3, 2.75, 2.75, 3.5, 3.5, 4.5, 4.25,
4, 3.25, 4.25, 3.5, 3.25, 2.75, 2.75, 2.25, 3, 3.25, 2.5,
3, 3.25, 3.5, 4.75, 3, 3, 4, 2.5, 2.75, 2.75, 2.75, 3.75,
3.25, 3, 3.5, 2.75, 3, 2.5, 2.75, 4.5, 2, 3, 1, 3.25, 2,
2.25, 2.75, 3.5, 4, 3.75, 2.5, 3.5, 2, 2.75, 3.25, 2.25,
3.5, 3.75, 1.5, 2.5, 2.75, 2.75, 2.25, 2.75, 2.25, 3.5, 2.75,
2, 2.5, 3, 2.25, 3.75, 2, 3.25, 4, 2.75, 3.25, 3.75, 2.25,
2.75, 3.5, 3.5, 3, 3.5, 3.75, 3.25, 3.5, 3.75, 3, 2.75, 2.5,
3.5, 2.25, 2.5, 3, 3.25, 2, 3, 2.5, 2.5, 3.5, 3.75, 4.25,
3.5, 3.5, 4.25, 2.75, 2.75, 3.25, 3.25, 3.75, 3.75, 3.5,
3, 1.25, 3, 3, 2.5, 4.25)), .Names = c("id", "condition",
"validity", "believability", "response"), row.names = c(NA, -360L
), class = "data.frame")
require(lsmeans)
afex::set_sum_contrasts()
a1 <- aov(response~condition*believability*validity+Error(id/(believability*validity)), dat)
# set up reference grid with interaction per condition:
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
library(lsmeans)
test(con2, joint = TRUE, by = "condition")
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
test(con2, joint = FALSE)
library(lsmeans)
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
library(lsmeans)
ls1 <- lsmeans(a1, ~validity:believability|condition)
# create the contrasts for validity – 1 df for each combination of the other factors:
con1 <- contrast(ls1, "trt.vs.ctrl1", by = c("believability","condition"))
# Now contrast these contrasts for each contrast (label in above results) and condition combination
con2 <- contrast(con1, "trt.vs.ctrl1", by = c("contrast","condition"))
# Finally, use test to obtain the joint tests
test(con2, joint = TRUE, by = "condition")
con2@dffun
search()
.aovlist.dffun
ls(2)
.aovlist.dffun
q("no")
nrow(warpbreaks)
warp.lm = lm(breaks ~ wool * tension, data = warpbreaks)
sub =- sample(1:54, 39)
warpsub.lm = update(warp.lm, subset=sub)
anova(warp.lm)
anova(warpsub.lm)
warps.lm = updats(warpsub.lm, .~tension*wool)
warps.lm = update(warpsub.lm, .~tension*wool)
anova(warps.lm)
libray(car)
library(car)
Anova(warps.lm)
Anova(warpsub.lm)
Anova(warpsub.lm, type="III")
Anova(warp.lm)
Anova(warp.lm,type="III")
options(texi2dvi = "latexmk", signif.starts = FALSE)
Anova(warp.lm,type="III")
options(texi2dvi = "latexmk", signif.stars = FALSE)
Anova(warp.lm,type="III")
?print.anova
?anova
args(stats:::print.anova)
options(texi2dvi = "latexmk", show.signif.stars = FALSE)
Anova(warp.lm,type="III")
test(contrast(lsmeans(warp.lm, ~wool), "dunnett"), joint = TRUE)
library(lsmeans)
test(contrast(lsmeans(warp.lm, ~wool), "dunnett"), joint = TRUE)
anova(warp.lm)
anova(warpsub.lm)
test(contrast(lsmeans(warpsub.lm, ~wool), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warp.lm, ~tension), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warpsub.lm, ~tension), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warps.lm, ~tension), "dunnett"), joint = TRUE)
test(contrast(lsmeans(warps.lm, ~tension:wool), "dunnett"), joint = TRUE)
?Anova
warpc.lm = update(warp.lm, contrasts = list(wool = "contr.sum", tension = "contr.sum"))
coef(warp.lm)
coef(warpc.lm)
Anova(warpc.lm, type = "III")
library(lsmeans)
example(summary.ref.grid)
rbind.default
?rbind
rbind.data.frame
showMethods("rbind")
ls()
rbind(t.w, w.t)
debug(rbind.ref.grid)
debug(lsmeans:::rbind.ref.grid)
rbind(t.w, w.t)
list(...)
debug(methods::rbind2)
rbind(t.w, w.t)
q("no")
q("no")
getwd()
setwd("./././././temp")
setwd("././././temp")
setwd("~")
getwd()
setwd("~/temp")
dir()
source("liviu.RData")
load("liviu.RData")
ls()
names(SwProp)
formula(sw.mod)
sw.mod$call
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
library(lsmeans)
formula(sw.mod)
sw.mod$call
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
repl
ls()
formula(sw.mod)
all.vars(formula(sw.mod))
lsmeans:::All.vars(formula(sw.mod))
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
vars
vars
vars
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
args(all.vars)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
list(...)
list(...)
list(...)
list(...)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
All.vars(lhs, functions = TRUE)
All.vars(lhs, functions = FALSE)
All.vars(lhs)
lhs
class(lhs)
as.formula(lhs)
form
class(form)
attr(data,"call")
attr(data,"call")$formula
eval(form)
class(data)
i
eval(i)
eval(sw.form[[i]])
attr(data, "call")
ls()
ls()
sw.mod
formula(sw.mod)
sw.mod$call
sw.mod$call$formula
all.vars(sw.mod$call$formula)
all.vars.call
methods("all.vars")
library(lsmeans)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
library(lsmeans)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
q("no")
getwd()
setwd("~/temp")
dir()
library(daewr)
install.packages("daewr")
library(daewr)
require(ggplot2)   # graphics
require(lsmeans)   # lsmeans, treatment comparisons
require(plyr)      # convenience functions such as mutate() & ddply()
require(car)       # Anova()
# change a few ggplot defaults
theme_set(theme_grey(base_size=14) +
theme(axis.text=element_text(colour='black')))
update_geom_defaults('point', list(size=4, shape=21))
update_geom_defaults('bar',   list(colour='black', fill='white'))
lsm.options(summary = list(infer=c(TRUE, TRUE)))
d = data.frame(
tx = sample( rep(c(35, 40, 45), each=2)) )
d = mutate(d,
height = 10 + tx + rnorm(6))
d
fit = lm(height ~ tx, data=d)   # SLR *with* intercept
summary(fit)
lsm = lsmeans(fit, ~tx, cov.reduce=F)
lsm
plot(lsm)
con = contrast(lsm, 'trt.vs.ctrl', ref=1)
con
plot(con)
plot(con, int.adjust = "dunnett")
con@misc
?plot.lsmobj
library(lsmeans)
plot(con)
int.adjust
plot(con, int.adjust="none")
int.adjust
library(lsmeans)
?plot.lsmobj
library(lsmeans)
?plot.lsmobj
library(lsmeans)
?plot.lsmobj
dir()
example(lsmeans)
ls()
warp.lsm@misc
plot(warp.lsm)
plot(update(warp.lsm, adjust=NULL))
plot(update(warp.lsm, adjust="bonf"))
plot(update(warp.lsm, adjust="bonf", by=NULL))
plot(update(warp.lsm, by=NULL))
search()
ls(8)
q("no")
q("no")
example(lsmeans::lsmeans)
library(lsmeans)
example(lsmeans)
ls()
city.lsm
names(summar y(city.lsm))
names(summary(city.lsm))
uC = c("A","B","oddball","C","D")
uC %in% LETTERS(1:4)
uC %in% LETTERS[1:4]
? "%in%"
grep(uC, LETTERS[1:4])
sapply(uC, %in%, LETTERS[1:4])
q("no")
library(lsmeans)
?models
package.version("lsmeans")
Package.version("lsmeans")
Package.Version("lsmeans")
??version
packageVersion("lsmeans")
packageVersion("MCMCglmm")
install.packages("MCMCglmm")
packageVersion("MCMCglmm")
citation("MCMCglmm")
citation("MASS")
library(MCMCglmm)
?mcmcglmm
ls(2)
?MCMCglmm
data(Oats, package=nlme)
data(Oats, package="nlme")
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random = Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
names(Oats)
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random - Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random = Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), nitt=1300, burnin=300, data =- Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), nitt=1300, burnin=300, data = Oats)
library(lsmeans)
library(coda)
Oats.mclsm = lsmeans(Oats.mc)
Oats.mclsm = lsmeans(Oats.mc, "nitro")
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
plot(as.mcmc(Oats.mclsm))
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats, verbose = FALSE)
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
set.seed(12345); runif(5)
set.seed(12345); runif(5)
Oats.mclsm
contrast(Oats.mclsm, "consec")
packageVersion("lmerTest")
install.packages("lmerTest")
help("lsmeans", package="lmerTest")
citation("lmerTest")
q("no")
q("no")
