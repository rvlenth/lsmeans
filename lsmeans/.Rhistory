names(TakeoverBids)
TB.hnbb = hurdle(bids ~ .|., dist="negbin", zero.dist="bin", data=TakeoverBids)
TB.hnbnb = hurdle(bids ~ .|., dist="negbin", zero.dist="negbin", data=TakeoverBids)
TST(TB.hnbb)
TST(TB.hnbb)
ls()
ls()
sw.mod
formula(sw.mod)
sw.mod$call
sw.mod$call$formula
all.vars(sw.mod$call$formula)
all.vars.call
methods("all.vars")
library(lsmeans)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
library(lsmeans)
lsmeans(sw.mod, ~spons_type.f2 | status_gen)
q("no")
getwd()
setwd("~/temp")
dir()
library(daewr)
install.packages("daewr")
library(daewr)
require(ggplot2)   # graphics
require(lsmeans)   # lsmeans, treatment comparisons
require(plyr)      # convenience functions such as mutate() & ddply()
require(car)       # Anova()
# change a few ggplot defaults
theme_set(theme_grey(base_size=14) +
theme(axis.text=element_text(colour='black')))
update_geom_defaults('point', list(size=4, shape=21))
update_geom_defaults('bar',   list(colour='black', fill='white'))
lsm.options(summary = list(infer=c(TRUE, TRUE)))
d = data.frame(
tx = sample( rep(c(35, 40, 45), each=2)) )
d = mutate(d,
height = 10 + tx + rnorm(6))
d
fit = lm(height ~ tx, data=d)   # SLR *with* intercept
summary(fit)
lsm = lsmeans(fit, ~tx, cov.reduce=F)
lsm
plot(lsm)
con = contrast(lsm, 'trt.vs.ctrl', ref=1)
con
plot(con)
plot(con, int.adjust = "dunnett")
con@misc
?plot.lsmobj
library(lsmeans)
plot(con)
int.adjust
plot(con, int.adjust="none")
int.adjust
library(lsmeans)
?plot.lsmobj
library(lsmeans)
?plot.lsmobj
library(lsmeans)
?plot.lsmobj
dir()
example(lsmeans)
ls()
warp.lsm@misc
plot(warp.lsm)
plot(update(warp.lsm, adjust=NULL))
plot(update(warp.lsm, adjust="bonf"))
plot(update(warp.lsm, adjust="bonf", by=NULL))
plot(update(warp.lsm, by=NULL))
search()
ls(8)
q("no")
q("no")
example(lsmeans::lsmeans)
library(lsmeans)
example(lsmeans)
ls()
city.lsm
names(summar y(city.lsm))
names(summary(city.lsm))
uC = c("A","B","oddball","C","D")
uC %in% LETTERS(1:4)
uC %in% LETTERS[1:4]
? "%in%"
grep(uC, LETTERS[1:4])
sapply(uC, %in%, LETTERS[1:4])
q("no")
library(lsmeans)
?models
package.version("lsmeans")
Package.version("lsmeans")
Package.Version("lsmeans")
??version
packageVersion("lsmeans")
packageVersion("MCMCglmm")
install.packages("MCMCglmm")
packageVersion("MCMCglmm")
citation("MCMCglmm")
citation("MASS")
library(MCMCglmm)
?mcmcglmm
ls(2)
?MCMCglmm
data(Oats, package=nlme)
data(Oats, package="nlme")
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random = Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
names(Oats)
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random - Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
Oats.mc <- MCMCglmm(log(yield) ~ Variety + factor(nitro),
random = Block + Block:Variety,
nitt = 1300, burnin = 300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), nitt=1300, burnin=300, data =- Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), nitt=1300, burnin=300, data = Oats)
library(lsmeans)
library(coda)
Oats.mclsm = lsmeans(Oats.mc)
Oats.mclsm = lsmeans(Oats.mc, "nitro")
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
plot(as.mcmc(Oats.mclsm))
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats)
Oats.mc = MCMCglmm(log(yield) ~ Variety + factor(nitro), random = ~ Block + Block:Variety, nitt=1300, burnin=300, data = Oats, verbose = FALSE)
Oats.mclsm = lsmeans(Oats.mc, "nitro", data = Oats)
plot(as.mcmc(Oats.mclsm))
set.seed(12345); runif(5)
set.seed(12345); runif(5)
Oats.mclsm
contrast(Oats.mclsm, "consec")
packageVersion("lmerTest")
install.packages("lmerTest")
help("lsmeans", package="lmerTest")
citation("lmerTest")
q("no")
q("no")
dir()
library(lsmeans)
vignette("using=lsmeans")
?lsmeans
example(rbind.ref.grid)
packageVersion("lsmeans")
packageVersion
q("no")
install.packages("glmmADMB", repos="http://R-Forge.R-project.org")
library(glmmADMB)
?glmmADMB
q("no")
install.packages("betareg")
help("modeltools-package", package = "modeltools")
??modeltools
library(modeltools)
ls(2)
?survReg
?Predict
methods("Predict")
Predict
betareg:::predict.betareg
betareg:::args(model.matrix,betareg)
args(betareg:::model.matrix,betareg)
args(betareg:::model.matrix.betareg)
args(betareg:::vcov.betareg)
library(betareg)
ls(2)
?betamix
args(betareg:::vcov.betamix)
args(betareg:::predict.betamix)
args(flexmix:::predict.flexmix)
search()
library(flexmix)
?flexmix
args(flexmix:::predict.FLXM)
ls(getNamespace("flexmix"))
ls(getNamespace("betamix"))
ls(envir=getNamespace("betamix"))
ls(getNamespace("betareg"))
?posterior.betamix
args(betareg:::posterior.betamix)
args(betareg:::terms.betareg)
example(betareg)
gy2
gy2$terms$full
args(betareg:::vcov.betareg)
args(betareg:::coef.betareg)
?coef.betare
?coef.betareg
?recode
??recode
head(model.matrix(gy2))
head(model.matrix(gy2, "mean"))
head(model.matrix(gy2, "prec"))
head(model.matrix(gy2, "full"))
library(lsmeans)
ref.grid(gy2)
ref.grid(gy2)
ref.grid(gy2)
library(lsmeans)
ref.grid(gy2)
ref.grid(gy2, mode = "precision")
library(lsmeans)
ref.grid(gy2, mode = "precision")
ref.grid(gy2, mode = "phi.link")
ref.grid(gy2, mode = "link")
ref.grid(gy2, mode = "link")
library(lsmeans)
ref.grid(gy2, mode = "link")
ref.grid(gy2, mode = "q")
ref.grid(gy2, mode = "")
ref.grid(gy2, mode = "v")
predict(ref.grid(gy2))
g1 = ref.grid(gy2)@grid
predict(gy2, new = g1)
predict(gy2, new = g1, type = "link")
predict(ref.grid(gy2, mode = "link"))
predict(gy2, new = g1, type = "prec")
predict(ref.grid(gy2, mode = "prec"))
predict(ref.grid(gy2, mode = "phi"))
exp(.Last.value)
library(multcomp)
?summary.glht
confint.glht
q("no")
install.packages("xtable")
library(lsmeans)
q("no")
strsplit(2*sqrt(y), "\\(")
strsplit("2*sqrt(y)", "\\(")
strsplit("2*sqrty)", "\\(")
strsplit("2*sqrty)", "\\*")
strsplit("2 * sqrty)", "\\*")
as.numeric("2 ")
as.numeric("xyz ")
form = 2*sqrt(y) ~ x1 + x2
strsplit(strsplit(form[2], "\\(")[[1]][1], "\\*")[[1]]
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2sqrt(y) ~ x1 + x2
form = 2+sqrt(y) ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2*y
form = 2+y ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2*y ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
try(as.numeric("xyz "))
try(as.numeric("xyz "), silent = TRUE)
args(try)
try(as.numeric("xyz "), silent = TRUE)
class(.Last.value)
?as.numeric
?suppressWarnings
suppressWarnings(as.numeric("xyz "))
suppressWarnings(as.numeric(" 3.789 "))
is
is.list(NULL)
link = lsmeans:::.make.tran("sqrt")
link = lsmeans:::.make.link("sqrt")
link$mult = 2
link
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult))
link2
link2$linkinv(3)
link2$mu.eta(3)
link$mu.eta(3)
link$linkinv(3)
ls(environment(link2$linkinv))
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult),
name = paste0(round(mult, 3), " * ", name))
link2
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult,
name = paste0(round(mult, 3), " * ", name)))
link2
library(lsmeans)
library(lsmeans)
warp.lm = lm(sqrt(breaks) + sqrt(1 + breaks) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
warp.lm = lm(sqrt(breaks) + sqrt(breaks+1) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
summary(.Last.value)
summary(.Last.value, type = "r")
summary(ref.grid(warp.lm), type = "r")
library(lsmeans)
summary(ref.grid(warp.lm), type = "r")
summary(ref.grid(warp.lm))
rg = ref.grid(warp.lm)
summary(rg)
summary(update(rg, tran.mult = 3))
summary(update(rg, tran.mult = 3), type = "response")
summary(update(rg, tran.mult = NULL), type = "response")
summary(update(rg, tran = "sqrt", tran.mult = NULL), type = "response")
rg@tran
rg@misc$tran
rg
warp.lm = lm(2*sqrt(breaks) ~ wool*tension, data = earpbreaks)
warp.lm = lm(2*sqrt(breaks) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
library(lsmeans)
ref.grid(warp.lm)
args(gsub)
library(lsmeans)
args(gsub)
ref.grid(warp.lm)
summary(ref.grid(warp.lm))
library(lsmeans)
ref.grid(warp.lm)
ref.grid(with(make.tran("boxcox", .5), update(warp.lm, 3 * linkfun(breaks) ~ .)))
warp.bc = with(make.tran("boxcox", .5), lm(3 * linkfun(breaks) ~ wool*tension, data = warpbreaks))
warp.bc
summary(warp.bc)
ref.grid(warp.bc)
summary(.Last.value)
summary(ref.grid(warp.bc), type = "r")
ref.grid(warp.bc)@misc$tran
library(lsmeans)
ref.grid(warp.bc)
summary(.Last.value)
ref.grid(warp.bc)
summary(.Last.value, type = "r")
summary(ref.grid(warp.lm), type = "r")
summary(warp.lm)
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
summary(ref.grid(warp.bc), type = "r")
summary(ref.grid(warp.bc))
summary(ref.grid(warp.lm))
make.tran("boxcox", .5)
summary(warp.bc)
summary(wwarp.lm)
summary(warp.lm)
lsmeans(warp.lm, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
make.tran("boxcox", .5)
library(lsmeans)
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
summary(warp.bc)
lsmeans(warp.bc, ~tension|wool, type ="r")
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.as = with(make.tran("asin.sqrt"), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
make.tran("asin.sqrt")
warp.as = with(make.tran("asin.sqrt", 1), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
with(make.tran("asin.sqrt"), warpbreaks$breaks)
with(make.tran("asin.sqrt"), linkfun(warpbreaks$breaks))
with(make.tran("asin.sqrt", 100), linkfun(warpbreaks$breaks))
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.as = with(make.tran("asin.sqrt", 100), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.as, ~tension|wool, type ="r")
warp = lm(breaks ~ wool*tension, data = warpbreaks)
lsmeans(warp, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
library(lsmeans)
lsmeans(warp.bc, ~tension|wool, type ="r")
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc, ~tension|wool, type ="r")
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.lm2 = warp.lm
warp.sq = update(warp.lm, sqrt(breaks) ~ .)
lsmeans(wwarp.sq, ~tension|wool, type ="r")
lsmeans(warp.sq, ~tension|wool, type ="r")
lsmeans:::.make.link("sqrt")
coef(warp.sq)
coef(warp.slm2)
coef(warp.lm2)
coef(warp.lm2)/2
library(lsmeans)
lsmeans(warp.lm, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
warp.bc3 = with(make.tran("boxcox", .5), lm(3*linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc3, ~tension|wool, type ="r")
q("no")
