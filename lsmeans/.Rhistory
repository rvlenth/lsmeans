class(Oats.lmer)
Oats.lmer = lmer(yield ~ factor(nitro)*Variety + (1|Block/Variety), data=Oats)
Oats.lsm = lsmeans(Oats.lmer, ~nitro|Variety)
Oats.glht = as.glht(Oats.lsm)
test(Oats.glht)
tests(Oats.glht)
summary(Oats.glht)
lapply(Oats.glht, test)
lapply(Oats.glht, tests)
ls("package:multcomp")
lapply(Oats.glht, adjusted)
lapply(Oats.glht, adjusted, NULL)
args(adjusted)
lapply(Oats.glht, adjusted, "single")
adjusted(Oats.glht[[1]])
adjusted(Oats.glht[[1]], type="sing")
confint(Oats.glht[[1]])
lapply(Oats.glht, confint)
library(rsm)
?coded.data
example(rsm)
CR
code2val(xs(CR.rsm), codings(CR.rsm))
ls()
code2val(xs(CR.rs2), codings(CR.rs2))
CR.rs2$xs
canonical(CR.rs2)$xs
xs(CR.rs1)
vignette("using-lsmeans")
?glht.lsmobj
search()
ls(8)
args(ls)
lsm
ls(envir="namespace:lsmeans")
?ls
getNamespace("lsmeans")
ls(envir=getNamespace("lsmeans"))
ls(envir=getNamespace("lsmeans"), pat="recover.data.")
ls(envir=getNamespace("lsmeans"), pat="lsm.basis.")
ls(envir=getNamespace("multcomp"), pat="modelparm.")
ls()
ls(all=T)
remove(list=ls())
save.image()
ls()
q("no")
install.packages("lsmeans")
vignette("lsmeans-changes", package="lsmeans")
sample(1:10000,10) -> s
s
sort(s)
sample(1:100000,100) -> s
s
sort(s)
sd(0:5)
x = c(rep(0,10), rep(1:5, 6))
x
x = c(rep(0,10), rep(1:5, each=6))
x
sd(x)
length(x)
x2 = c(rep(0,10), rep(c(1,3,5), each=6))
x2
sd(x2)
length(x2)
q("no")
library(lme4)
example(lme4)
example(lmer)
ls()
vcov(fm1)
requireNamespace("pbkrtest")
pbkrtest::vcovAdj(fm1)
ns = getNAmespace("pbkrtest")
ns = getNamespace("pbkrtest")
with(ns, vcovAdj(fm1))
vcov(fm2)
with(ns, vcovAdj(fm2))
vca = function(env, object)
with(env, vcovAdj(object))
vca(ns, fm1)
vca = function(object) {
ns = getNamespace("pbkrtest")
with(ns, vcovAdj(object))
}
vca(fm1)
?eval
fix(vca)
vca(fm1)
vca
vca(fm1)
fix(vca)
vca
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
?attach
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
fix(vca)
vca(fm1)
search()
detach()
fix(vca)
vca(fm1)
search()
vca(fm1)
fix(vca)
vca(fm1)
fix(vca)
vca(fm1)
vca
attachNamespace
fix(vca)
vca(fm1)
vca
library(lsmeans)
search()
ref.grid(fm1)
ref.grid(fm1, at=list(Days=c(3,4,5,6)))
ref.grid(fm1, at=list(Days=c(3,4,5,6))) -> rg
lsmeans(rg, "Days")
rg@V
slotNames(rg)
rg@dfargs
search()
loadedNamespaces()
library(pbkrtest)
loadedNamespaces()
q("no")
library(lme4)
example(lmer)
library(lsmeans)
lsmeans(fm1, "Days", at = list(Days=2:6))
search()
df = summary(lsmeans(fm1, "Days", at = list(Days=1:6)))
df
?mplot
?matrixplot
?matrix.plot
??matrix.plot
matplot(df$Days, df[, c(2,4,5)], type="l")
names(df)
matplot(df$Days, df[, c(2,5,6)], type="l")
?swiss
swiss.lm = lm(Fertility ~ (.)^2, data=swiss)
swiss.lm
summary(swiss)
summary(swiss.lm)
swiss.lm = lm(Fertility ~ (Agriculture+Education+Examination+Infant.Mortality)^2, data=swiss)
summary(swiss.lm)
summary(swiss)
swiss.rg = ref.grid(swiss.lm, at=list(
Agriculture = c(25,50,75),
Examination = c(8,16,24),
Infant.Mortality = c(15,20,25)))
swiss.rg
lsmip(swiss.rg, Agriculture ~ Examination | Infant.Mortality)
lsmip(swiss.rg, Agriculture ~ Examination | Infant.Mortality, ylab="Predicted Fertility")
lsns(swiss.rg, "Infant.Mortality")
lsmeans(swiss.rg, "Infant.Mortality")
lsmeans(swiss.rg, "Examination")
lsmeans(swiss.rg, "Examination", by = "Infant.Mortality")
swiss.rg
summary(swiss.lm)
lsmip(swiss.rg, Infant.Mortality ~ Examination | Agriculture, ylab="Predicted Fertility")
?swiss
pairs(swiss)
summary(swiss.rg)
predict(swiss.rg)
q("no")
source('H:/progs/R/devel/LSMEANS/lsmeans/test-data.R')
library(lsmeans)
setwd(c:/Lrmth/temp)
setwd("c:/Lenth/temp")
dir()
rource("battery.r")
source("battery.r")
fun <- read.csv('battery.csv', header=TRUE)
fun
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand, adjust='tukey')
result.pairs <- pairs(result.lsmo, adjust='tukey')
summary(result.pairs, infer=TRUE)
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand, adjust='tukey')
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand)
result <- lm(lifetime ~ brand, data=fun)
result.lsmo <- lsmeans(result, ~brand)
confint(pairs(result.lsmo))
q("no")
library(lsmeans)
library(lsmeans)
library(lsmeans)
oranges.mlm = lm(cbind(sales1,sales2) ~ price1+price2+day+store, data=oranges)
ref.grid(oranges.mlm)
ref.grid(oranges.mlm, mult.name="variety")
?mlm
?lm
?polr
help("polr",package="MASS")
MOats
names(MOats$yield)
names(MOats$yield) = c(0,.2,.4,.6)
MOats
dimnames(MOats$yield)[[2]] = c(0,.2,.4,.6)
MOats
getwd
getwd()
dir("data")
save(list=MOats, file="data/MOats.RData")
save(list="MOats", file="data/MOats.RData")
library(lsmeans)
example(ref.grid)
ref.grid(MOats.lm, mult.levs = list(T=LETTERS[1:2], U=letters[1:2]))
?ref.grid
show(ref.grid(MOats.lm, mult.levs = list(T=LETTERS[1:2], U=letters[1:2])))
library(lsmeans)
oranges.lm1 = lm(sales1 ~ price1 + price2 + day + store, data = oranges)
days.lsm = lsmeans(oranges.lm1, "day")
( days.sum = summary(days.lsm, infer=c(TRUE,TRUE), level=.90, adjust="bon") )
with(days.sum, {
plot(lsmean ~ day, ylim = range(c(lower.CL, upper.CL)))
segments(day,lower.CL, day, upper.CL)  })
args(segments)
with(days.sum, {
plot(lsmean ~ day, ylim = range(c(lower.CL, upper.CL)))
segments(x0=day, y0=lower.CL, y1=upper.CL)  })
with(days.sum, {
plot(lsmean ~ day, ylim = range(c(lower.CL, upper.CL)))
})
plot(lsmean ~ day, ylim = range(c(lower.CL, upper.CL)), data=days.sum)
plot(lsmean ~ day, ylim = range(c(lower.CL, upper.CL)), data=days.sum, type="p")
plot(lsmean ~ lower.CL, ylim = range(c(lower.CL, upper.CL)), data=days.sum, type="p")
days.sum = within(days.sum, Day <- as.numeric(day))
days.sum
plot(lsmean ~ Day, ylim = range(c(lower.CL, upper.CL)), data=days.sum)
args(segments)
segments(Day, y0=lower>CL, y1=upper.CL, data=days.sum)
with(days.sum, segments(Day, y0=lower>CL, y1=upper.CL))
with(days.sum, segments(Day, y0=lower.CL, y1=upper.CL))
q("no")
q("no")
q("no")
library(lsmeans)
MOats
subs = which(with(MOats, Variety=="Victory" & Block %in% c("II","V")))
subs
Moats.lm = lm(yield ~ Block*Variety, data=MOats, subset = -subs)
MOats.lm
Moats.lm
setwd("c:/lenth/temp")
dir()
source("mypredict.R")
predict(MOats.lm, new=MOats)
predict(Moats.lm, new=MOats)
mypredict(Moats.lm, new=MOats)
stats:::predict.mlm
q("no")
library(lsmeans)
?update.ref.grid
q("no")
?? multidimensional
?dist
dist = matrix(0, nrow=8, ncol=8)
dist[1,2]=dist[3,4]=dist[5,6]=dist[7,8]=1
dist
dist = dist+t(dist)
dist
dimnames(dist)=list(LETTERS[1:8],LETTERS[1:8])
dist
library(MASS)
isoMDS(dist, k=1)
Shepard(dist,p=2)
cmdscale(dist,k=1)
zapsmall(cmdscale(dist,k=1))
sort(zapsmall(cmdscale(dist,k=1)))
sammon(dist, k=1)
LETTERS[order(cmdscale(dist,k=1))]
order(cmdscale(dist,k=1))
cmdscale(matrix(0, nrow=5, ncol=5), k=1)
fuzz=matrix(runif(64), ncol=8)
fuzz = (fuzz + t(fuzz))/2
diag(fuzz) = rep(0,8)
fuzz
isoMDS(dist + .1*fuzz, k=1)
order(.Last.value$points)
order(cmdscale(dist+.1*fuzz, k=1))
fuzz
dist + .1*fuzz
apply(dist+.1*fuzz, 1, sum)
apply(dist, 1, sum)
?eurodist
eurodist
as.dist(dist)
?as.dist
dist(runif(5))
as.matrix(dist(runif(5)))
d = as.dist(dist)
d[1,2]
d[1]
d[5]
q("no")
q("no")
eff.aovlist
Block <- gl(8, 4)
A<-factor(c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1))
B<-factor(c(0,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1))
C<-factor(c(0,1,1,0,1,0,0,1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1,1,1,0,0))
Yield <- c(101, 373, 398, 291, 312, 106, 265, 450, 106, 306, 324, 449,
272, 89, 407, 338, 87, 324, 279, 471, 323, 128, 423, 334,
131, 103, 445, 437, 324, 361, 302, 272)
aovdat <- data.frame(Block, A, B, C, Yield)
old <- getOption("contrasts")
options(contrasts=c("contr.helmert", "contr.poly"))
(fit <- aov(Yield ~ A*B*C + Error(Block), data = aovdat))
eff.aovlist(fit)
summary(fit)
eff(fit)
eff.aovlist(fit)
vcov(fit[[2]])
zapsmall(vcov(fit[[2]]))
zapsmall(vcov(fit[[3]]))
13.29236/32.25391
fit1 = update(fit1, subset = -11)
fit1 = update(fit, subset = -11)
fit
fit1 = aov(Yield ~ A*B*C + Error(Block), data = aovdat, subset=-11)
summary(fit1)
eff.aovlist(fit1)
library(lsmeans)
lsmeans(fit, "A")
zapsmall(vcov(fit[[3]]))
zapsmall(vcov(fit1[[3]]))
zapsmall(vcov(fit1[[2]]))
data(Oats, package="nlme")
Oats.aov = aov(yield~Variety+factor(nitro) + Error(Block/Variety), data=Oats)
eff.aovlist(Oats.aov)
Oats17.aov = aov(yield~Variety+factor(nitro) + Error(Block/Variety), subset=-17, data=Oats)
eff.aovlist(Oats.aov)
eff.aovlist(Oats17.aov)
vcov(Oats17.aov[[2]])
vcov(Oats17.aov[[3]])
vcov(Oats17.aov[[4]])
coef(Oats17.aov[[2]])
coef(Oats17.aov[[3]])
coef(Oats17.aov[[4]])
lapply(Oats.aov, coef)
lapply(Oats17.aov, coef)
eff.aovlist(Oats17.aov)
model.tables(Oats17.aov, se=TRUE)
model.tables(Oats.aov, se=TRUE)
q("no")
library(lme4)
data(Oats, package = "nlme")
Oats.lmer <- lmer(yield ~ factor(nitro)*Variety + (1|Block/Variety), data = Oats, subset = -c(1,2,3,5,8,13,21,34,55))
library(lsmeans)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsmeans(Oats.lmer,  ~ Variety|nitro)
junk = function(x) {
if(x || requireNamespace("xyz")) cat("x is TRUE")
else cat("x is FALSE")
invisible()
}
junk(TRUE)
junk(FALSE)
junk(TRUE)
junk(FALSE)
fix(junk)
junk(FALSE)
junk(TRUE)
if(getOption("lsmeans")$xyz) TRUE else FALSE
.lsm.is.true = function(opt) {
x = getOption("lsmeans")[[opt]]
if (is.null(x))  FALSE
else if (is.logical(x))  x
else FALSE
}
.lsm.is.true("xyz")
lsm.options(xyz=TRUE)
.lsm.is.true("xyz")
lsm.options(xyz="Now is the time")
.lsm.is.true("xyz")
lsm.options(xyz=FALSE)
.lsm.is.true("xyz")
library(lsmeans)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsm.options(disable.pbkrtest=TRUE)
lsmeans(Oats.lmer,  ~ Variety|nitro)
library(lsmeans)
lsm.options(disable.pbkrtest=NULL)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsm.options(disable.pbkrtest = TRUE)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsm.options(disable.pbkrtest = FALSE)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsm.options()
print(lsm.options())
library(lsmeans)
lsmeans(Oats.lmer,  ~ Variety|nitro)
lsm.options(disable.pbkrtest = TRUE)
lsmeans(Oats.lmer,  ~ Variety|nitro)
q("no")
install.packages(c("AER", "agridat", "AlgDesign", "car", "caTools", "chron", "DAAG", "desirability", "devtools", "DiceDesign", "DoE.base", "dynlm", "e1071", "Ecdat", "effects", "evaluate", "foreach", "FrF2", "fts", "gam", "gdata", "ggplot2", "gplots", "gss", "gtools", "Hmisc", "httpuv", "httr", "igraph", "ineq", "iterators", "itertools", "lattice", "lme4", "lmtest", "lsmeans", "memoise", "minqa", "mixexp", "mixtools", "multcomp", "mvtnorm", "np", "odfWeave", "oz", "party", "plyr", "prodlim", "R.matlab", "R.oo", "R.utils", "Rcmdr", "Rcpp", "RcppEigen", "relax", "reshape", "reshape2", "rggobi", "RGtk2", "RJSONIO", "robustbase", "rsm", "sampleSelection", "SASmixed", "scales", "scatterplot3d", "segmented", "sem", "sfsmisc", "shiny", "statmod", "tcltk2", "TH.data", "tweedie", "VGAM", "xtable", "zoo"))
q("no")
install.packages("glmmADMB", repos="http://r-forge.r-project.org", type="source")
library(glmmADMB)
installed.packages()[,1]
install.packages("glmmADMB", repos=c("http://glmmadmb.r-forge.r-project.org/repos", getOption("repos")),type="source")
library(glmmADMB)
example(glmmADMB)
?glmmADMB
example(glmmadmb)
class(om)
class(bfit)
ls()
u
zi
d
call(bfit)
names(bfit)
summary(bfit)
bfit$call
class(bfit)
library(lsmeans)
ref.grid(bfit)
recover.data.glmmadmb <- lsmeans:::recover.data.lm
ref.grid(bfit)
recover.data(bfit, data=NULL)
names(bfit)
fixef(bfit)
lsmeans:::lsm.basis.merMod
coef(bfit)
lsmeans:::lsm.basis.lme
lsm.basis.glmmadmb = lsmeans:::lsm.basis.lme
ref.grid(binfit)
ref.grid(bfit)
bfit$family
names(bfit)
bfit$link
bfit$linkfun
bfit$ilinkfun
fix(lsm.basis.glmmadmb)
ref.grid(bfit)
lsmeans(bfit, trt)
lsmeans(bfit, ~trt)
pairs(lsmeans(bfit, ~trt))
bfl = lsmeans(bfit, ~trt)
summary(bfl, type="r")
summary(pairs(bfl), type="r")
fix(lsm.glmmadmb)
fix(lsm.basis.glmmadmb)
bfit$family
pmatch("binom", "binomial")
pmatch("binomo", "binomial")
fix(lsm.basis.glmmadmb)
bfl = lsmeans(bfit, ~trt)
summary(bfl, type="r")
lsm.basis.glmmadmb
( bfit.lsm = lsmeans(bfit, "trt") )
pairs(bfit.lsm)
summary(.Last.value, type = "response")
?extending-lsmeans
?"extending-lsmeans"
vignette("using-lsmeans")
X = matrix(rnorm(20), nrow=5)
X
wtavg = function(w) function(X) apply(diag(w) %*% X, 2, sum)
wtavg(1:5)(X)
wtavg = function(w) function(X) apply(diag(w) %*% X, 2, sum) / sum(w)
wtavg(1:5)(X)
X = matrix(rnorm(20), nrow=5)
wtavg(1:5)
ls()
lsmeans(bfit)
lsmeans(bfit,"trt")
example(lsmeans)
ls()
fiber.lsm
lsmeans(Oats.lme, "nitro")
lsmeans(Oats.lme, "nitro", fac.reduce = wtavg(1:3))
lsmeans(Oats.lme, "nitro", fac.reduce = wtavg(c(3,7,2)))
lsmeans(Oats.lme, "nitro")
lsmeans(Oats.lme, "nitro", fac.reduce = wtavg(c(3,7,2)))
?blas
??blas
??"quadratic form"
?"%*%"
nonest.basis
X = matrix(rnorm(25), nrow=5)
X
r=3
idx = r + seq_length(5-r)
idx = r + seq_len(5-r)
idx
diag(X[idx,idx]) = 1
X
q("no")
