plot(make.proto(mu,3*c(.7,.1,.7,.1,.7)), comp=TRUE)
example(summary)
par(ask=FALSE)
plot(Titan.lsm, comp=TRUE)
plot(make.proto(mu,3*c(.7,.1,.7,.1,.7)), comp=TRUE)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/plot.lsm.R')
plot(make.proto(mu,3*c(.7,.1,.7,.1,.7)), comp=TRUE)
plot(Titan.lsm, comp=TRUE)
plot(make.proto(mu,3*c(.7,.01,.7,.1,.7)), comp=TRUE)
plot(make.proto(mu,3*c(.7,.01,.7,.01,.7)), comp=TRUE)
plot(make.proto(mu,3*c(.7,.01,.7,.01,.7)), comp=TRUE,int=FALSE)
plot(make.proto(mu,3*c(.7,.3,.7,.1,.7)), comp=TRUE,int=FALSE)
plot(make.proto(mu,3*c(.7,7.3,.7,.1,.7)), comp=TRUE,int=FALSE)
plot(make.proto(mu,3*c(.7,7.3,.7,.1,.7)), comp=TRUE)
plot(make.proto(mu,3*c(.7,.3,.7,.1,.7)), comp=TRUE)
se = runif(5)
plot(make.proto(mu, se, comp=TRUE)
)
plot(make.proto(mu, se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se=runif(5)*2
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se=runif(5)*2
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se = 3*se
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se
plot(se~mu)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se=runif(5)*2
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(se~mu)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se=runif(5)*2
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
mu=runif(5,sd=3)
mu=runif(5,sig=3)
mu=runif(5,sigma=3)
mu=rnorm(5,sigma=3)
mu=rnorm(5,sd=3)
mu
se=runif(5)*2
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
mu=rnorm(5,sd=3); se=2*runif(5)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se=10*se
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
mu=rnorm(5,sd=3); se=10*runif(5)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
plot(make.proto(mu, se <- .9*se), comp=TRUE)
se=c(.05,.1,.3,.7,2)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
source('H:/progs/R/devel/LSMEANS/lsmeans/R/plot.lsm.R')
source('H:/progs/R/devel/LSMEANS/lsmeans/R/plot.lsm.R')
source('H:/progs/R/devel/LSMEANS/lsmeans/R/plot.lsm.R')
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
plot(make.proto(mu, se <- sample(se)), comp=TRUE)
q("no")
library()
install.packages("gee")
install.packages(c("bdsmatrix", "BH", "car", "DoE.base", "effects", "Formula", "FrF2", "gss", "hexbin", "httr", "ineq", "labeling", "multcomp", "mvtnorm", "nloptr", "party", "pbkrtest", "pscl", "R.utils", "randomForest", "Rcmdr", "RcmdrPlugin.DoE", "RcppEigen", "RCurl", "RGtk2", "RJSONIO", "sandwich", "segmented", "sem", "shiny", "SparseM", "vcd", "Vdgraph"))
library(pbkrtest)
?ddf_Lb
data(Oats, package="nlme")
om = lmer(yield ~ factor(nitro)+Variety + (1|Block/Variety), data=Oats, subset = sample(1:72, 39))
summary(om)
library(lsmeans)
ol = lsmeans(om, ~nitro)
op = pairs(ol)
test(op, jo=TRUE)
Va = vcovAdj(om)
V0 = vcov(om)
Va
V0
ddF_Lb(Va, op@linfct, V0)
search()
ddf_Lb(Va, op@linfct, V0)
ddf_Lb(Va, op@linfct[1,], V0)
ddf_Lb(Va, op@linfct[1,], Va)
ddf_Lb(Va, op@linfct[1,])
ddf_Lb
library(geepack)
?geese
methods("recover.data")
methods("lsm.basis")
library(gee)
library(lsmeans)
?gee
data(OME)
## not fully appropriate link for these data.
(fm <- gee(cbind(Correct, Trials-Correct) ~ Loud + Age + OME, id = ID,
data = OME, family = binomial, corstr = "exchangeable"))
ref.grid(fm)
library(lsmeans)
ref.grid(fm)
library(lsmeans)
ref.grid(fm)
summary(ref.grid(fm))
summary(fm)
?match.args
?matc.arg
?match.arg
names(fm)
class(gee)
class(fm)
fm$family
library(lsmeans)
summary(ref.grid(fm))
fm
summary(ref.grid(fm))
ref.grid(fm)
debug(lsmeans::ref.grid)
ref.grid(fm)
ref.grid(fm)
ref.grid(fm)
ref.grid(fm)
undebug(lsmeans::ref.grid)
ref.grid(fm)
ref.grid(fm)
undebug(ref.grid)
ref.grid(fm)
View(grid)
library(lsmeans)
ref.grid(fm)
library(lsmeans)
ref.grid(fm)
summary(ref.grid(fm))
summary(ref.grid(fm), vc="nai")
summary(ref.grid(fm), vc="rob")
summary(ref.grid(fm), vcov.method="nai")
summary(ref.grid(fm), vcov.method="nai")
summary(ref.grid(fm), vcov.method="nai")
library(lsmeans)
summary(ref.grid(fm), vcov.method="nai")
summary(ref.grid(fm, vcov.method="nai"))
library(lsmeans)
summary(ref.grid(fm, vcov.method="nai"))
summary(ref.grid(fm))
summary(ref.grid(fm, vc="junk"))
summary(ref.grid(fm, vc="n"))
summary(ref.grid(fm, vc="r"))
args(args(pmatch))
?pmatch
pmatch("x", c("x","xy"))
pmatch("xy", c("x","xy"))
?geeglm
data(dietox)
dietox$Cu     <- as.factor(dietox$Cu)
mf <- formula(Weight~Cu*(Time+I(Time^2)+I(Time^3)))
gee1 <- geeglm(mf, data=dietox, id=Pig, family=poisson("identity"),corstr="ar1")
gee1
names(gee1)
names(gee1$geese)
class(gee1)
zcor <- genZcor(clusz = rep(4, 50), waves = dat$visit, "unstr")
zfit <- geese(y ~ x1 + x2, id = id, data = dat, sformula = ~ x1,
corstr = "userdefined", zcor = zcor,
jack = TRUE, j1s = TRUE, fij = TRUE)
summary(zfit)
dat <- gendat()
fit <- geese(y ~ x1 + x2, id = id, data = dat, sformula = ~ x1,
corstr = "ar1", jack = TRUE, j1s = TRUE, fij = TRUE)
seiz.l <- reshape(seizure,
varying=list(c("base","y1", "y2", "y3", "y4")),
v.names="y", times=0:4, direction="long")
seiz.l <- seiz.l[order(seiz.l$id, seiz.l$time),]
seiz.l$t <- ifelse(seiz.l$time == 0, 8, 2)
seiz.l$x <- ifelse(seiz.l$time == 0, 0, 1)
m1 <- geese(y ~ offset(log(t)) + x + trt + x:trt, id = id,
data=seiz.l, corstr="exch", family=poisson)
data(seizure)
## Diggle, Liang, and Zeger (1994) pp166-168, compare Table 8.10
seiz.l <- reshape(seizure,
varying=list(c("base","y1", "y2", "y3", "y4")),
v.names="y", times=0:4, direction="long")
seiz.l <- seiz.l[order(seiz.l$id, seiz.l$time),]
seiz.l$t <- ifelse(seiz.l$time == 0, 8, 2)
seiz.l$x <- ifelse(seiz.l$time == 0, 0, 1)
m1 <- geese(y ~ offset(log(t)) + x + trt + x:trt, id = id,
data=seiz.l, corstr="exch", family=poisson)
summary(m1)
names(m1)
class(v1)
class(m1)
names(seiz.1)
names(seiz.l)
summary(seiz.l$trt)
ref.grid(m1, at=list(trt=c(0,1)))
terms(m1)
terms(gee1)
ref.grid(gee1)
library(lsmeans)
ref.grid(gee1)
library(lsmeans)
ref.grid(gee1)
lsmeans(gee1, "Cu")
ref.grid(gee1)@betahat
ref.grid(gee1)@bhat
ref.grid(gee1)@V
fm
lsmeans(fm, "OME")
library(lsmeans)
lsmeans(fm, "OME")
lsmeans(fm, "OME", vcov="naive")
lsmeans(fm, "OME", vcov="naive")
lsmeans(fm, "OME", vcov.method="naive")
library(lsmeans)
lsmeans(fm, "OME", vcov.method="naive")
names(m1)
m1$model
m1$formula
m1$call
m1$control
eval(m1$call)
m1$call$family
terms(m1$call)
attributes(m1)
m1$call$family$family
print.default(m1$call$family)
class(m1$call$family)
eval(m1$call$family)
eval(m1$call$family)$link
eval(m1$call$family)()$link
lsmeans(gee1, "trt", at=list(trt=c(0,1)))
ref.grid(gee1)
coef(gee1)
coef(fm)
library(lsmeans)
library(lsmeans)
lsmeans(gee1, "Cu")
ref.grid(gee1)
coef(gee1)
class(.Last.value)
library(lsmeans)
ref.grid(gee1)
predict(.Last.value)
ref.grid(gee1)@bhat
library(lsmeans)
ref.grid(gee1)
coef(gee1)
class(gee1)
coef.geeglm
geepack:::coef.geeglm
class(gee1)
coef.gee(gee1)
gee:::coef.gee(gee1)
stats:::coef.glm(gee1)
stats:::coef.lm(gee1)
methods("coef")
stats:::coef.default(gee1)
coef.default(gee1)
stats::coef.default(gee1)
names(fm)
stats::coef.default
stats:::coef.default
gee1$coefficients
names(gee1$geese)
coef(gee1$geese)
gee1$geese$beta
gee1$geese$call
geepack:::geeglm
names(gee1)
terms(model.frame(y~x))
y=1:20
x=y
terms(model.frame(y~x))
cl = gee1$geese$call
cl[[1]]
cl[[1]] = "model.frame"
terms(eval(cl))
cl[[1]] = model.frame
terms(eval(cl))
cl$family=NULL
terms(eval(cl))
cl$corstr=NULL
terms(eval(cl))
cl = gee1$geese$call
names(cl)
as.list(cl[c("formula","data","subset","na.action")])
args = as.list(cl[c("formula","data","subset","na.action")])
do.call("model.frame", args)
do.call("terms", args)
?terms
do.call("terms.formula", args)
args$mf
ls()
class(m1)
m1$call
gee1$geese$call
gee1$qr
gee1$family
names(m1)
methods("terms")
terms.formula
terms(y~x)
args = as.list(m1$call[-1])
args
terms.formula(x=args$formula, data=args$data)
terms.formula(x=args$formula)
parent.frame()
recover.data(m1$call, terms(m1$call$formula)), data = NULL)
recover.data(m1$call, terms(m1$call$formula), data = NULL)
recover.data(m1$call, terms(as.list(m1$call$formula)), data = NULL)
m1$call$formula
terms(m1$call$formula)
recover.data(m1$call, terms.formula(m1$call$formula)), data = NULL)
recover.data(m1$call, terms.formula(m1$call$formula), data = NULL)
recover.data(m1$call, terms.formula(m1$call$formula), na.action = na.omit, data = NULL)
na.omit
recover.data(m1$call, terms.formula(m1$call$formula), na.action = NULL, data = NULL)
m1$qr
m1$call$family
eval(m1$call$family)()
library(lsmeans)
library(lsmeans)
ref.grid(m1)
ref.grid(gee1)
lsmeans(gee1, "Cu")
lsmeans(gee1, "Cu", vcov = "naive")
m1$call
?offset
terms.formula(m1$call$formula)
terms.formula(m1$call$formula, data = seiz.l)
terms(model.frame(m1$call$formula, data = seiz.l))
terms.formula(m1$call$formula, data = NULL)
terms(model.frame(m1$call$formula, data =NULL))
library(lsmeans)
ref.grid(m1)
lsmeans(m1, "trt", at = list(trt=c(0,1)))
lsmeans(m1, "trt", at = list(trt=c(0,1)), vcov="naive")
names(m1)
lsmeans(m1, "trt", at = list(trt=c(0,1)), vcov="vbeta.na")
lsmeans(m1, "trt", at = list(trt=c(0,1)), vcov="vbeta.ajs")
lsmeans(m1, "trt", at = list(trt=c(0,1)), vcov="vbeta.j1s")
m1l = lsmeans(m1, "trt", at = list(trt=c(0,1)))
summary(m1l, type="r")
m1$call
summary(seiz.l)
uniquye(seiz.l$t)
unique(seiz.l$t)
m1l = lsmeans(m1, c("trt","x"), at = list(trt=c(0,1), x=c(0,1)))
m1l
lsmip(m1l, x~trt)
lsmip(m1l, x~trt, type="r")
m1l = lsmeans(m1, c("trt","x", "t"), at = list(trt=c(0,1), x=c(0,1), t=c(2,8)))
m1l
lsmip(m1l, x~trt|t, type="r")
lsmip(m1l, x~trt|t)
pairs(m1l, by=c("x","t"))
pairs(m1l, by=c("x","trt"))
m1l = lsmeans(m1, c("trt","x", "t"), at = list(trt=c(0,1), x=c(0,1), t=2))
pairs(m1l, by="x")
pairs(m1l, by="trt")
q("no")
data = read.csv("h:/Downloads/data.csv")
head(data)
pt1 = c(.29,90); pt2=c(.38,30)
(b = (pt1[2] - pt2[2])/(pt1[1]-pt2[1]))
(a=pt1[2] - b*pt1[1])
plot(Y~X, data=data)
abline(a,b)
data = transform(data, fit = a + b*X)
data = transform(data, resid = Y - fit)
data = transform(data, resid = Y - fit, col = 1 + (Y>62))
plot(resid ~ fit, data = data, col=col)
abline(h=0, lty=2)
abline(v=0, lty=2)
q("no")
installed.packages()["lsmeans",1:3]
install.packages("lsmeans")
install.packages(c("BH", "caTools", "coin", "devtools", "doBy", "e1071", "Ecdat", "geepack", "gplots", "Hmisc", "htmltools", "httr", "jsonlite", "party", "pbkrtest", "prodlim", "R2HTML", "Rcmdr", "RcmdrMisc", "rgl", "RUnit", "segmented", "xtable"))
methods("recover.data")
install.packages(c("RVAideMemoire", "ordinal"))
library(RVAideMemoire)
methods("recover.data")
library(lsmeans)
methods("recover.data")
args(get)
q("no")
library(ordinal)
?clm
q("no")
