ttt = make.tran("genlog", c(1, pi))
plot(xx, ttt$linkfun(xx))
ttt = make.tran("genlog", c(1.5, pi))
plot(xx, ttt$linkfun(xx))
make.tran("genlog")
q("no")
strsplit(2*sqrt(y), "\\(")
strsplit("2*sqrt(y)", "\\(")
strsplit("2*sqrty)", "\\(")
strsplit("2*sqrty)", "\\*")
strsplit("2 * sqrty)", "\\*")
as.numeric("2 ")
as.numeric("xyz ")
form = 2*sqrt(y) ~ x1 + x2
strsplit(strsplit(form[2], "\\(")[[1]][1], "\\*")[[1]]
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2sqrt(y) ~ x1 + x2
form = 2+sqrt(y) ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2*y
form = 2+y ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
form = 2*y ~ x1 + x2
strsplit(strsplit(as.character(form[2]), "\\(")[[1]][1], "\\*")[[1]]
try(as.numeric("xyz "))
try(as.numeric("xyz "), silent = TRUE)
args(try)
try(as.numeric("xyz "), silent = TRUE)
class(.Last.value)
?as.numeric
?suppressWarnings
suppressWarnings(as.numeric("xyz "))
suppressWarnings(as.numeric(" 3.789 "))
is
is.list(NULL)
link = lsmeans:::.make.tran("sqrt")
link = lsmeans:::.make.link("sqrt")
link$mult = 2
link
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult))
link2
link2$linkinv(3)
link2$mu.eta(3)
link$mu.eta(3)
link$linkinv(3)
ls(environment(link2$linkinv))
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult),
name = paste0(round(mult, 3), " * ", name))
link2
link2 = with(link, list(
linkinv = function(eta) linkinv(eta) / mult,
mu.eta = function(eta) mu.eta(eta) / mult,
name = paste0(round(mult, 3), " * ", name)))
link2
library(lsmeans)
library(lsmeans)
warp.lm = lm(sqrt(breaks) + sqrt(1 + breaks) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
warp.lm = lm(sqrt(breaks) + sqrt(breaks+1) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
summary(.Last.value)
summary(.Last.value, type = "r")
summary(ref.grid(warp.lm), type = "r")
library(lsmeans)
summary(ref.grid(warp.lm), type = "r")
summary(ref.grid(warp.lm))
rg = ref.grid(warp.lm)
summary(rg)
summary(update(rg, tran.mult = 3))
summary(update(rg, tran.mult = 3), type = "response")
summary(update(rg, tran.mult = NULL), type = "response")
summary(update(rg, tran = "sqrt", tran.mult = NULL), type = "response")
rg@tran
rg@misc$tran
rg
warp.lm = lm(2*sqrt(breaks) ~ wool*tension, data = earpbreaks)
warp.lm = lm(2*sqrt(breaks) ~ wool*tension, data = warpbreaks)
ref.grid(warp.lm)
library(lsmeans)
ref.grid(warp.lm)
args(gsub)
library(lsmeans)
args(gsub)
ref.grid(warp.lm)
summary(ref.grid(warp.lm))
library(lsmeans)
ref.grid(warp.lm)
ref.grid(with(make.tran("boxcox", .5), update(warp.lm, 3 * linkfun(breaks) ~ .)))
warp.bc = with(make.tran("boxcox", .5), lm(3 * linkfun(breaks) ~ wool*tension, data = warpbreaks))
warp.bc
summary(warp.bc)
ref.grid(warp.bc)
summary(.Last.value)
summary(ref.grid(warp.bc), type = "r")
ref.grid(warp.bc)@misc$tran
library(lsmeans)
ref.grid(warp.bc)
summary(.Last.value)
ref.grid(warp.bc)
summary(.Last.value, type = "r")
summary(ref.grid(warp.lm), type = "r")
summary(warp.lm)
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
summary(ref.grid(warp.bc), type = "r")
summary(ref.grid(warp.bc))
summary(ref.grid(warp.lm))
make.tran("boxcox", .5)
summary(warp.bc)
summary(wwarp.lm)
summary(warp.lm)
lsmeans(warp.lm, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
make.tran("boxcox", .5)
library(lsmeans)
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
summary(warp.bc)
lsmeans(warp.bc, ~tension|wool, type ="r")
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.as = with(make.tran("asin.sqrt"), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
make.tran("asin.sqrt")
warp.as = with(make.tran("asin.sqrt", 1), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
with(make.tran("asin.sqrt"), warpbreaks$breaks)
with(make.tran("asin.sqrt"), linkfun(warpbreaks$breaks))
with(make.tran("asin.sqrt", 100), linkfun(warpbreaks$breaks))
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.as = with(make.tran("asin.sqrt", 100), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.as, ~tension|wool, type ="r")
warp = lm(breaks ~ wool*tension, data = warpbreaks)
lsmeans(warp, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
library(lsmeans)
lsmeans(warp.bc, ~tension|wool, type ="r")
warp.bc = with(make.tran("boxcox", .5), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc, ~tension|wool, type ="r")
lsmeans(warp.lm, ~tension|wool, type ="r")
warp.lm2 = warp.lm
warp.sq = update(warp.lm, sqrt(breaks) ~ .)
lsmeans(wwarp.sq, ~tension|wool, type ="r")
lsmeans(warp.sq, ~tension|wool, type ="r")
lsmeans:::.make.link("sqrt")
coef(warp.sq)
coef(warp.slm2)
coef(warp.lm2)
coef(warp.lm2)/2
library(lsmeans)
lsmeans(warp.lm, ~tension|wool, type ="r")
lsmeans(warp.bc, ~tension|wool, type ="r")
warp.bc3 = with(make.tran("boxcox", .5), lm(3*linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc3, ~tension|wool, type ="r")
q("no")
install.packages(c("BH", "BRugs", "car", "curl", "devtools", "DiagrammeR", "digest", "doBy", "DoE.base", "effects", "evaluate", "formatR", "geepack", "ggplot2", "git2r", "gtable", "Hmisc", "htmltools", "htmlwidgets", "httr", "knitr", "lattice", "latticeExtra", "lhs", "lme4", "lsmeans", "manipulate", "MBESS", "MCMCglmm", "MCMCpack", "memoise", "mixtools", "multcomp", "munsell", "mvtnorm", "pbkrtest", "pheatmap", "plm", "prodlim", "qualityTools", "quantreg", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "rgl", "rJava", "rms", "rstudioapi", "RVAideMemoire", "scales", "sfsmisc", "shiny", "statmod", "TeachingDemos", "TH.data", "timeSeries", "urca", "visNetwork", "XML"))
example(lsmeans)
library(lsmeans)
example(lsmeans)
ls()
warp.lsm
regrid(warp.lsm, "log")
warp.lms = upadte(warp.lm, breaks - 20 ~ .)
warp.lms = update(warp.lm, breaks - 20 ~ .)
lsmeans(warp.lms, ~ "tension|wool")
lsmeans(warp.lms, ~ tension|wool)
regrid(lsmeans(warp.lms, ~ tension|wool))
lrg = regrid(lsmeans(warp.lms, ~ tension|wool), "log")
lrg
lrg@bhat
lrg@bhat[6] = NA
lrg
lrg@bhat
lrg@V
lrg@linfct
lrg@nbasis
lrg@nbasis = matrix(c(0,0,0,0,0,1))
lrg@nbasis
lrg
vignette("using-lsmeans")
lrg
X
y
lrg@V
lrg@V = lrg@V[1:5,1:5]
lrg
V
X
summary(lrg, type="r")
args(mean)
args(mean.default)
mean(rep(NA,5))
mean(rep(NA,5), na.rm = TRUE)
NaN <= NaN
diff(3,4)
diff(3:4)
diff(c(NA,3))
diff(c(NA,NA))
library(lsmeans)
summary(lrg, type="r")
tmp
lsmeans(warp.lms, ~tension|wool)
loc(c(NA, 1:5))
log(c(NA, 1:5))
1:5[-(1:5)]
(1:5)[-(1:5)]
excl = c(3,7)
tmp = 1:9
sapply(excl, function(ii) 0 + (tmp == ii))
library(lsmeans)
ls()
warp.lsm
lrg = regrid(lsmeans(warp.lms, ~tension|wool), "log")
library(lsmeans)
lrg = regrid(lsmeans(warp.lms, ~tension|wool), "log")
lrg
summary(lrg, type="r")
summary(pairs(lrg), type="r")
pw = pairs(lsmeans(warp.lms, ~tension|wool))
pw
regrid(pw, "log")
summary(regrid(pw, "log"), type = "r")
lrg
update(lrg, predict.type = "r")
args(regrid)
library(lsmeans)
summary(regrid(pw, "log", pre="r"))
lrg
lrg@nbasis
lrg@V
?ref.grid
library(lsmeans)
warp.bc = with(make.tran("boxcox", -.271), lm(linkfun(breaks) ~ wool*tension))
warp.bc = with(make.tran("boxcox", -.271), lm(linkfun(breaks) ~ wool*tension, data = warpbreaks))
lsmeans(warp.bc, ~wool)
lsmeans(warp.bc, ~wool, trans="resp")
lsmeans(warp.bc, ~wool, type = "r")
lsmeans(warp.bc, ~wool, trans="log")
lsmeans(warp.bc, ~wool, trans="log", type="r")
rg = regrid(ref.grid(warp.bc), transform = "response")
lsmeans(rg, "wool")
rg = regrid(ref.grid(warp.bc, type = "response"), transform = "response")
rg = regrid(ref.grid(warp.bc, type = "response"), transform = "log")
lsmeans(rg, "wool")
q("no")
load("H:/Documents/Dropbox/consulting/FacSal2015/fy2015-final.RData")
ls()
pred.err = 1000000/predict(final.lm) - saleq$Annual.Salary
plot(pred.err ~ TrkRank, data = saleq)
summary(pred.err)
plot(1000000/predict(final.lm) ~ Annual.Salary, data = saleq)
abline(0,1)
plot(1000000/predict(final.lm) ~ Annual.Salary, data = saleq, col=as.numeric(TrkRank))
plot(1000000/predict(final.lm) ~ Annual.Salary, data = saleq, col=as.numeric(TrkRank), subset = TrkRank=="O.15")
abline(0,1)
pred.sal = 1000000/predict*(final.lm)
pred.sal = 1000000/predict(final.lm)
hist(pred.sal[saleq$TrkRank == "O.15"])
predict(final.lm)[1:10]
saleq$ID.Number[1:10]
pred.sal[1:10]
ls()
show.results
head(pred.salary)
pred.salary[7]
pred.sal[7]
pred.salary
plot(pred.salary ~ pred.sal)
abline(0,1,col="red")
q("no")
library(lsmeans)
64001.6941/62297.6263
log(64001.6941/62297.6263)
args(xtable:::print.xtableList)
args(xtable:::xtableList)
print(xtable(LSM))
library(xtable)
print(xtable(LSM))
getwd()
install.packages("../../xtable", repos=NULL)
install.packages("../../xtable", repos=NULL, type="source")
dir("../..")
detach(package:xtable)
install.packages("../../xtable", repos=NULL, type="source")
install.packages("spdep")
install.packages("splm")
install.packages("sphet")
q("no")
q("no")
# from the data wine, I estimated the model
library(ordinal)
data(wine)
fm22.clmm= clmm(rating~temp+contact +(1|judge),data=wine, Hess=T)
library(lsmeans)
rg <- ref.grid(fm22.clmm, mode = "link")
rg <- ref.grid(fm22.clmm, mode = "linear.predictor")
rg@bhat
rg
rg@linfct
lsmeans(fm22.clmm, "temp")
lsmeans(fm22.clmm, "temp", mode = "mean")
lsmeans(fm22.clmm, "temp", mode = "prob")
lsmeans(fm22.clmm, ~ rating|temp, mode = "prob")
lsmeans(fm22.clmm, ~ rating|temp, mode = "prob")
lsmeans(fm22.clmm, ~ cut|temp, mode = "cum")
lsmeans(fm22.clmm, ~ rating|temp, mode = "prob")
lsmeans(fm22.clmm, mode = "prob")
ref.grid(fm22.clmm, mode = "prob")
summary(ref.grid)
summary(ref.grid(fm22.clmm, mode = "prob"))
summary(ref.grid(fm22.clmm, mode = "mean"))
rg = ref.grid(fm22.clmm, mode = "mean")
lsmeans(rg, "temp")
lsmeans(rg, "temp")
lsmeans(rg, "temp")
lsmeans(rg, "temp")
xxx=lsmeans(rg, "temp")
xxx=lsmeans(rg, "temp")
debug(is.na)
xxx=lsmeans(rg, "temp")
q("no")
update.packages()
install.packages(c("ape", "BH", "BHH2", "car", "curl", "DEoptimR", "devtools", "DiagrammeR", "doBy", "dynaTree", "Ecfun", "effects", "evaluate", "formatR", "fortunes", "geepack", "git2r", "gplots", "heplots", "highr", "Hmisc", "htmltools", "httr", "jsonlite", "knitr", "lava", "lme4", "lsmeans", "mboost", "mime", "mixOmics", "multcomp", "nlme", "OpenMx", "openssl", "plyr", "quantreg", "R.matlab", "R.utils", "R2HTML", "Rcmdr", "RcmdrMisc", "Rcpp", "readxl", "relimp", "rms", "robustbase", "RODBC", "rpf", "rstudioapi", "RVAideMemoire", "scatterplot3d", "sem", "semTools", "shiny", "sp", "spdep", "SPOT", "StanHeaders", "stringi", "tseries", "vegan", "VGAM", "visNetwork", "withr", "xml2", "zoo"))
data(Oats, package="nlme")
library(lme4)
Oats.lmer = lmer(yield~Variety + factor(nitro) + (1|Block/Variety), data = Oats,
subset = -c(1,2,3,5,8,13,21,34,55))
library(lsmeans)
lsmeans(Oats.lmer, pairwise ~ Variety)
lsm.options(disable.satterth=FALSE)
lsmeans(Oats.lmer, pairwise ~ Variety)
install.packages("lmerTest")
lsmeans(Oats.lmer, pairwise ~ Variety)
?`extending-lsmeans`
?update
lsmeans(Oats.lmer, pairwise ~ Variety, opt = list(initMesg="Using Satterthwaite df"))
q("no")
install.packages("MCMCpack")
library(MASS)
example(glm.nb)
mod = glm.nb(y ~ lag1+lag2*lag3, link=identity, etastart=rep(5, 42))
library(lsmeans)
pairs(lsmeans(mod, "lag1", trend="lag3", at = list(lag1=c(0,5,10))))
mod2 = glm.nb(y ~ lag1+lag2*lag3, link=log, etastart=rep(5, 42))
pairs(lsmeans(mod2, "lag1", trend="lag3", at = list(lag1=c(0,5,10))))
pairs(lstrends(mod2, "lag1", var="lag3", at = list(lag1=c(0,5,10))))
args(lsmeans)
?lsmeans
pairs(lstrends(mod2, "lag2", var="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", at = list(lag2=c(0,5,10))))
packageVersion("lsmeans")
packageVersion("lsmeans")
pairs(lsmeans(mod2, ~lag2, at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, ~lag2, trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, ~lag2, trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
model
recover.data(model, data=NULL)
as.name("lstrends")
?do.call
?eval
library(lsmeans)
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
args(lstrends)
library(lsmeans)
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
cl
object@call
slotNames(object)
object@model.info
object@model.info$call
cl$model = object@model.info$call
cl
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
rg = ref.grid(mod2)
pairs(lsmeans(rg, "lag2", trend="lag3"))
pairs(lsmeans(rg, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(rg, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod, "lag2", trend="lag3", at = list(lag2=c(0,5,10))))
pairs(lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10)), transform = "response"))
lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10)), transform = "response")
lsmeans(mod, "lag2", trend="lag3", at = list(lag2=c(0,5,10)))
lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10)))
lsmeans(mod2, "lag2", trend="lag3", at = list(lag2=c(0,5,10)), transform = "response")
lrg = .Last.ref.grid
lrg
lsmeans(lrg, "lag2")
lsmeans(mod2, "lag2", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
lrg = .Last.ref.grid
lsmeans(mod2, "lag2", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
lsmeans(mod2, "lag1", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
lstrends
args(ref.grid)
args(lsmeans:::lsmeans.character.ref.grid)
lsmeans(mod2, "lag1", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
lsmeans(mod2, "lag1", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
lsmeans(mod2, "lag1", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
lsmeans(mod2, "lag2", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)), transform = "response")
.Last.ref.grid
lrg
lsmeans(mod2, "lag2", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)))
lsmeans(mod2, "lag2", trend="lag3", at = list(lag1=c(0,5,10),lag2=c(0,5,10)))
q("no")
data<-structure(list(id = c(91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L,
99L, 100L, 101L, 102L, 103L, 105L, 106L, 107L, 108L, 109L, 110L,
111L, 112L, 113L, 114L, 115L, 116L, 117L, 119L, 120L, 121L, 122L,
123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133L,
134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L,
146L, 147L, 148L, 149L, 150L, 91L, 92L, 93L, 94L, 95L, 96L, 97L,
98L, 99L, 100L, 101L, 102L, 103L, 105L, 106L, 107L, 108L, 109L,
110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 119L, 120L, 121L,
122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L,
133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L,
144L, 146L, 147L, 148L, 149L, 150L), quad = c(2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L,
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L,
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,
6L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 4L, 4L, 4L, 4L, 4L,
4L, 4L, 4L, 4L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), year = c(2015L,
2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L,
2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L,
2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L,
2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L,
2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L,
2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L, 2015L,
2015L, 2015L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L,
2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L,
2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L,
2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L,
2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L,
2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L, 2014L,
2014L, 2014L, 2014L, 2014L, 2014L), timing = structure(c(1L,
3L, 2L, 1L, 1L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 2L, 3L, 1L, 1L,
3L, 2L, 3L, 1L, 3L, 2L, 3L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L,
1L, 3L, 3L, 2L, 2L, 1L, 2L, 3L, 2L, 1L, 1L, 2L, 2L, 3L, 1L, 2L,
2L, 2L, 1L, 1L, 2L, 1L, 1L, 3L, 1L, 3L, 2L, 1L, 1L, 2L, 3L, 2L,
2L, 2L, 2L, 1L, 1L, 2L, 3L, 1L, 1L, 3L, 2L, 3L, 1L, 3L, 2L, 3L,
1L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 3L, 3L, 2L, 2L, 1L, 2L,
3L, 2L, 1L, 1L, 2L, 2L, 3L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 3L,
1L), .Label = c("early", "late", "never"), class = "factor"),
intensity = structure(c(2L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 2L,
1L, 2L, 1L, 1L, 2L, 3L, 2L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L,
1L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 3L, 3L, 2L, 1L, 1L,
1L, 3L, 1L, 1L, 2L, 2L, 1L, 3L, 2L, 1L, 2L, 1L, 1L, 2L, 2L,
2L, 1L, 3L, 2L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 2L, 1L, 2L, 1L,
1L, 2L, 3L, 2L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 2L, 1L,
1L, 2L, 2L, 2L, 2L, 1L, 2L, 3L, 3L, 2L, 1L, 1L, 1L, 3L, 1L,
1L, 2L, 2L, 1L, 3L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 3L, 2L
), .Label = c("high", "low", "zero"), class = "factor"),
treatment = structure(c(3L, 1L, 4L, 3L, 2L, 5L, 1L, 4L, 5L,
4L, 5L, 2L, 2L, 5L, 1L, 3L, 2L, 1L, 4L, 1L, 2L, 1L, 4L, 1L,
2L, 3L, 2L, 4L, 3L, 5L, 5L, 3L, 2L, 3L, 1L, 1L, 5L, 4L, 2L,
4L, 1L, 4L, 2L, 3L, 5L, 4L, 1L, 3L, 4L, 5L, 4L, 2L, 3L, 5L,
3L, 2L, 1L, 3L, 1L, 4L, 3L, 2L, 5L, 1L, 4L, 5L, 4L, 5L, 2L,
2L, 5L, 1L, 3L, 2L, 1L, 4L, 1L, 2L, 1L, 4L, 1L, 2L, 3L, 2L,
4L, 3L, 5L, 5L, 3L, 2L, 3L, 1L, 1L, 5L, 4L, 2L, 4L, 1L, 4L,
2L, 3L, 5L, 4L, 1L, 3L, 4L, 5L, 4L, 4L, 3L, 5L, 2L, 1L, 3L
), .Label = c("control", "early-high", "early-low", "late-high",
"late-low"), class = "factor"), plant.leaf.g = c(846.216,
382.704, 2393.088, 61.832, 1315.86, 275.816, 3705.862, 3500.52,
67.482, 432, 487.492, 1228.618, 776.16, 1575, 735.9, 2417.75,
1342.92, 2359.046, 686.726, 1385.856, 343.684, 2277.312,
465.528, 2314.584, 508.4, 1243.644, 1064.448, 1020.646, NA,
494.832, 1318.248, 1516.4, 1271.218, 512.512, 157.878, 3753.992,
586.032, 1042.176, 889.632, 651.052, 498.042, 625.872, 16.28,
497.51, 593.75, 706.84, 2238.742, 232.584, 671.532, 90.72,
1412.442, 902.728, 3077.184, 619.106, 0.576, 400.452, 684.522,
849.852, 152.76, 1280.448, 274.47, 387.614, 98.496, 2304.504,
644.952, 35.392, 250.56, 267.33, 2212.08, 2392.596, 751.944,
629.418, 731.544, 1013.196, 1516.4, 130.536, 2910.6, 554.4,
2163.35, 223.86, 2369.376, 551.976, 985.6, 1482.24, 815.386,
1664.132, 596.376, 1581.432, 217.128, 1041.656, 951.168,
256.172, 1587.148, 359.448, 546.48, 1226.544, 371.64, 293.504,
177.726, 343.26, 691.24, 207.604, 588.924, 1405.258, 136.17,
451.432, 576.18, 424.804, 884.534, 2466.45, 1524.432, 973.208,
369.474, 410.048)), .Names = c("id", "quad", "year", "timing",
"intensity", "treatment", "plant.leaf.g"), class = "data.frame", row.names = c(NA,
-114L))
with(data, table(timing, intensity))
with(data, table(timing, intensity, year))
library(lme4)
m3 = lmer(log(plant.leaf.g) ~ treatment+year+(1|id), data=data)
m3 = lmer(log(plant.leaf.g) ~ treatment + year + (1|id), data=data)
m4 = lmer(log(plant.leaf.g) ~ treatment * year + (1|id), data=data)
anova(m3, m4)
plot(m4, which = 1)
plot(update(m4, plant.leaf.g ~ .), which = 1)
plot(update(m4, sqrt(plant.leaf.g) ~ .), which = 1)
m4 = lmer(sqrt(plant.leaf.g) ~ treatment * year + (1|id), data=data)
m3 = lmer(sqrt(plant.leaf.g) ~ treatment + year + (1|id), data=data)
anova(m3, m4)
anova(m4)
levels(data$treatment)
trt.con = data.frame(
timing = c(0, 1, 1, -1, -1)/2,
intensity = c(0, 1, -1, 1, -1)/2,
tim.int = c(0, 1, -1, -1, 1)/2,
ctl.vs.trt = c(4, -1, -1, -1, -1)/4,
row.names = levels(data$treatment))
trt.con
library("lsmeans")
(m4.lsm = lsmeans(m4, ~ treatment | year, type = "response"))
(m4.lsm = lsmeans(m4, ~ treatment | year, at = list(year = c(2014, 2015)), type = "response"))
contrast(m4.lsm, trt.con)
q("no")
