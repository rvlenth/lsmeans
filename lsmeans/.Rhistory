bhat3 = coef(mod3)
bhat1[is.na(bhat1)] = 0
bhat2[is.na(bhat2)] = 0
bhat3[is.na(bhat3)] = 0
X1 = get.terms(mod1)
X1 = get.terms(mod1, new = testset)
X2 = get.terms(mod2, new = testset)
X3 = get.terms(mod3, new = testset)
testset$fit1 = X1 %*% bhat1
testset$fit1 = X2 %*% bhat2
testset$fit1 = X1 %*% bhat1
testset$fit2 = X2 %*% bhat2
testset$fit3 = X3 %*% bhat3
testset
apply(X1, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod1$qr))
apply(X2, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod2$qr))
apply(X3, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod3$qr))
lsmeans::nonest.basis(mod2$qr)
X2 %*% nonest.basis(mod2$qr)
X2 %*% lsmeans::nonest.basis(mod2$qr)
zapsmall(lsmeans::nonest.basis(mod2$qr))
mod2$qr
library(lsmeans)
zapsmall(lsmeans::nonest.basis(mod2$qr))
nbasis
zapsmall(nbasis)
qrX$pivot = 1:4
nbasis2 = .Last.value
X2 %*% nbasis2
qr.R(mod2$qr)
tR = t(qr.R(mod2$qr))
tR[4,4] = 1
tR
qr.Q(qr(tR))
QR = qr.Q(qr(tR))
X2 %*% QR
QR[c(1,2,4,3),] = QR
QR
X2 %*% QR
zapsmall(X2 %*% QR)
lsmeans::nonest.basis(model.matrix(mod2))
model.matrix(mod2) %*% QR
X2
testset
X3
X2
X2 %*% QR[,4]
X2 %*% QR
zapsmall(QR[,4])
z2 = zapsmall(QR[,4])
X2 %*% z2
rbind(testset, c(1,1,1,1))
rbind(testset, c(x1=1,x2=1,x3=1,x4=1))
testset
rbind(testset, c(x1=1,x2=1,x3=1,x4=1,0,0,0))
rbind(testset, c(x1=1,x2=1,x3=1,x4=1,fit1=0,fit2=0,fit3=0))
rbind(testset, data.frame(x1=1,x2=1,x3=1,x4=1,fit1=0,fit2=0,fit3=0))
ts = testset[c(1:5,5), ]
ts
ts[6,] = 1
ts
testset=ts
X1 = get.terms(mod1, new = testset)
X2 = get.terms(mod2, new = testset)
X3 = get.terms(mod3, new = testset)
testset$fit1 = X1 %*% bhat1
testset$fit2 = X2 %*% bhat2
testset$fit3 = X3 %*% bhat3
X2 %*% QR
apply(QR,2,sum)
testset[6,2] = 2
testset[6,3] = 3
testset[6,4] = 4
testset
X1 = get.terms(mod1, new = testset)
X2 = get.terms(mod2, new = testset)
X3 = get.terms(mod3, new = testset)
testset$fit1 = X1 %*% bhat1
testset$fit2 = X2 %*% bhat2
testset$fit3 = X3 %*% bhat3
X2 %*% QR
apply(X2, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod2$qr))
cbind(x1,x2,x3,x4)
cbind(x1,x2,x3,x4,y)
testset
testset[,1:4]
apply(testset, 1, function(x) paste("x",1:4,"=",x, sep=""))
apply(testset[,1:4], 1, function(x) paste("x",1:4,"=",x, sep=""))
t(apply(testset[,1:4], 1, function(x) paste("x",1:4,"=",x, sep="")))
bhat1
testset
row.names(testset) = 1:6
testset
predict(mod1) - predict(mod2)
XX2 = cbind(1,X2)
XX2
lsmeans::nonest.basis(mod1$qr)
lsmeans::nonest.basis(mod2$qr)
testset
X2
(X2+1)%*%QR[,4]
X1
q("no")
install.packages("rms")
library(rms)
?rms
example(rms)
args(example)
example(rms, run=TRUE)
dist <- datadist(data=2)
dist <- datadist(age,race,bp,sex,height)
example(lrm)
ls()
names(f)
terms(f)
call(f)
f$call
lsmeans:::recover.data.lm(f)
lsmeans:::recover.data.lm(f, data=NULL)
class(f)
ref.grid(f)
library(lsmeans)
ref.grid(f)
?contrast
contrast
rms::contrast
contrast(f)
class(f) = c(class(f),"lm")
class(f)
ref.grid(f)
terms(f)
?lrm
class(fit)
class(fit) = c(class(f),"lm")
ref.grid(fit)
lsmeans:::recover.data.lm(fit, data=NULL)
lsmeans:::recover.data.lme(fit, data=NULL)
lsmeans:::recover.data.lmer(fit, data=NULL)
names(fit)
fit$na.action
X
?Predict
Predict
vcov(fit)
coef(fit)
recover.data.rms = lsmeans::recover.data.lm
recover.data.rms = lsmeans:::recover.data.lm
lsm.basis.rms = lsmeans:::lsm.basis.lm
ref.grid(f)
ref.grid(fit)
fix(recover.data.rms)
fit$na.action
fix(recover.data.rms)
ref.grid(fit)
lsmeans::recover.data.call
lsmeans:::recover.data.call
fit$na.action$omit
fix(recover.data.rms)
ref.grid(fit)
search()
ls(3)
ns = loadNamespace("rms")
ls(ns)
fit$call
names(fit)
fit$non.slopes
fit$Design
recover.data(fit)
recover.data(fit,data=NULL)
lsm.basis.rcs
lsm.basis.rms
unique(factor(c(1,2,3,2,3,1,2,4,2,1,3)))
coef(fit)
Predict(fit, cholesterol=c(150,160,170), type="x")
fix(lsm.basis.rms)
fix(lsm.basis.rms)
ref.grid(fit)
Predict(fit, cholesterol=c(150,160,170), type="model.frame")
Predict(fit, cholesterol=c(150,160,170), type="X")
Predict(fit, cholesterol=c(150,160,170), type="pred")
Predict(fit, cholesterol=c(150,160,170), type="x")
Predict(fit, cholesterol=c(150,160,170), sec=c("male","female"), type="x")
Predict(fit, cholesterol=c(150,160,170), sex=c("male","female"), type="x")
ls(ns,pat="vc")
args(vcov.rms)
args(rms:::vcov.rms)
vcov(fit)
vcov(fit,FALSE)
ref.grid(fit)
ref.grid(fit, at=list(age=c(35,40,50)))
fix(lsm.basis.rms)
ref.grid(fit, at=list(age=c(35,40,50)))
fix(lsm.basis.rms)
ref.grid(fit, at=list(age=c(35,40,50)))
Predict(fit, cholesterol=c(150,160,170), sex=c("male","female"), type="x") -> ppp
class(ppp)
names(ppp)
summary(ppp)
as.data.frame(ppp)
ppp
Predict
Predict(fit, type="x")
Predict
?predictrms
fix(lsm.basis.rms)
ref.grid()fit
ref.grid(fit)
ls(3)
fix(lsm.basis.rms)
ref.grid(fit)
fix(lsm.basis.rms)
ref.grid(fit)
lsmeans(fit, "sex")
ref.grid(fit, at=list(cholesterol=c(100,130,180)))
summary(.Last.value)
ref.grid(fit, at=list(cholesterol=c(100,130,180))) -> rg
rg$X
rg@linfct
rg@V
rg@bhat
rg@linfct %*% rg@bhat
length(rg@bhat)
ncol(rg@linfct)
rg@linfct[1,]
fix(lsm.basis.rms)
ref.grid(fit, at=list(cholesterol=c(100,130,180))) -> rg
summary(rg)
Predict(fit, sex, cholesterol=c(100,130,180))
confint(ref.grid(fit, at=list(blood.pressure=119.3427,cholesterol=c(100,130,180))))
Predict(fit, sex, cholesterol=c(100,130,180))
confint(ref.grid(fit, at=list(blood.pressure=119.3427,age=50.25048,cholesterol=c(100,130,180))))
lsm.basis.rms
recover.data.rms
Predict(fit, sex, cholesterol=c(100,130,180))
Predict(fit, sex, cholesterol=c(100,130,180), type = "x")
Predict(fit, sex, cholesterol=c(100,130,180), type = "model.frame")
class(fit)
?lrm
mean(age)
mean(blood.pressure)
mean(blood.pressure[-(1:3)])
q("no")
library(lsmeans)
library(nlme)
example(nlme)
names(Loblolly)
anova(fm1,fm2)
fm3 = update(fm2, fixed = Asym + lrc ~ Seed)
fm3 = update(fm2, fixed = list(Asym + lrc ~ Seed))
names(ChickWeight)
Chick.nlme = nlme(weight ~ SSlogis(Time, Asym, xmid, scal), data = ChickWeight,
fixed = Asym + xmid + scal ~ 1,
random = Asym ~ 1)
Chick.nlme = nlme(weight ~ SSlogis(Time, Asym, xmid, scal), data = ChickWeight,
fixed = Asym + xmid + scal ~ 1,
random = Asym ~ 1,
start = c(Asym=103, xmid=15, scal=1))
Chick.nlme
Chick.nlmed = update(Chick.nlme, fixed = Asym + xmid + scal ~ Diet,
start=c(300,0,0,0, 14,0,0,0, 7,0,0,0))
anova(Chick.nlme,Chick.nlmed)
Chick.nlmed
lsmip(Chick.nlmed, ~ Diet, param = "Asym")
terms(Chick.nlmed)
lsmeans:::recover.data.nlme
terms(Chick.nlmed)
ls()
terms(fm2)
names(fm2)
names(fm2$modelStruct)
names(fm2$dims)
names(fm2$contrasts)
names(fm2$apVar)
names(fm2$groups)
names(fm2$call)
names(fm2$method)
names(fm2$plist)
names(fm2$plist$Asym)
names(fm2$plist$Asym$fixed)
names(fm2$fixDF)
names(fm2$fixDF$terms)
names(fm2$fixDF$terms$Asym)
fm2$fixDF$terms$Asym
fm2$fixDF$terms
attributes(fm2)
attributes(fm2$modelStruct)
attributes(fm2$dims)
names(fm2)
attributes(fm2$contrasts)
attributes(fm2$coefficients)
attributes(fm2$varFix)
attributes(fm2$apVar)
attributes(fm2$logLik)
attributes(fm2$call)
attributes(fm2$fitted)
ns = getNamespace("glht")
ns = getNamespace("multcomp")
ls(envir=ns)
ls(envir=ns, pat="*nlme")
ls(envir=ns, pat=".nlme")
ls(envir=ns, pat=".lme")
glht:::modelparm.lme
multcomp:::modelparm.lme
class(fm1)
nlme:::terms.lme
ns = getNamespace("nlme")
ls(envir=ns, pat=".lme")
ls(envir=ns, pat="terms")
ls(ns)
lsmeans:::recover.data.lme
terms(fm2)
nlsList(Chick.nlmed)
print.default(fm2)
Chick.nlmed$fixDF
attr(Chick.nlmed$fixDF, "terms")
Chick.nlmed$fixDF$terms
attr(Chick.nlmed$fixDF$terms, "terms")
Chick.nlmed$fixDF$terms
attributes(Chick.nlmed$fixDF$terms)
attributes(Chick.nlmed$fixDF)
ls()
terms(fm1)
terms.default
stats:::terms.default
?terms
class(Chick.nlmed$fixDF)
class(Chick.nlmed$fixDF$terms)
Chick.nlmed$fixDF$terms
Chick.nlmed$fixDF$assign
Chick.nlmed$fixDF$terms$assign
attr(Chick.nlmed$fixDF$terms, "assign")
attributes(Chick.nlmed$fixDF$terms)
attributes(Chick.nlmed$fixDF)
names(attributes(Chick.nlmed$fixDF))
attr(Chick.nlmed$fixDF, "assign")
terms(y ~ x1+x2)
library(lsmeans)
lsmip(Chick.nlmed, ~ Diet, param = "Asym")
lsmeans(Chick.nlmed, ~ Diet, param = "Asym")
lsmeans(Chick.nlmed, ~ Diet, param = "xmed")
Chick.nlmed
lsmeans(Chick.nlmed, ~ Diet, param = "xmid")
cld(.Last.value)
lsmeans(Chick.nlmed, ~ Diet, param = "Asym")
cld(.Last.value)
lsmeans(Chick.nlmed, ~ Diet, param = "scal")
cld(.Last.value)
plot(lsmeans(Chick.nlmed, ~ Diet, param = "Asym"), comp=TRUE)
plot(lsmeans(Chick.nlmed, ~ Diet, param = "Asym"), comp=TRUE, adj="none")
plot(lsmeans(Chick.nlmed, ~ Diet, param = "xmid"), comp=TRUE, adj="none")
plot(lsmeans(Chick.nlmed, ~ Diet, param = "scal"), comp=TRUE, adj="none")
Chick.final = update(Chick.nlmed, fixed = Asym + xmid ~ Diet)
Chick.final = update(Chick.nlmed, fixed = list(Asym + xmid ~ Diet, scal ~ 1))
fixef(Chick.nlmed)
Chick.final = update(Chick.nlmed, fixed = list(Asym + xmid ~ Diet, scal ~ 1), start=fixef(Chick.nlmed[1:9])
)
Chick.final = update(Chick.nlmed, fixed = list(Asym + xmid ~ Diet, scal ~ 1), start=fixef(Chick.nlmed)[1:9])
plot(lsmeans(Chick.FINAL, ~ Diet, param = "Asym"), comp=TRUE, adj="none")
plot(lsmeans(Chick.final, ~ Diet, param = "Asym"), comp=TRUE, adj="none")
plot(lsmeans(Chick.final, ~ Diet, param = "xmid"), comp=TRUE, adj="none")
plot(lsmeans(Chick.nlmed, ~ Diet, param = "xmid"), comp=TRUE, adj="none")
lsmeans(Chick.nlmed, ~ Diet, param = "xmid")
lsmeans(Chick.final, ~ Diet, param = "xmid")
anova(Chick.nlmed, Chick.final)
Chick.final
Chick.nlmed
?SSlogis
plot(ChickWeight)
with(ChickWeight, table(Diet,Chick))
with(ChickWeight, table(Diet))
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
plot(Chick.final)
?plot.nlme
?plot.lme
Chick.final$fixDF
Chick.final$fixDF$terms
Chick.final$fixDF$x
Chick.final$fixDF$X
?nlme
example(lsmobj)
library(lsmeans)
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
library(lsmeans)
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
library(lsmeans)
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
?lmeObject
q("no")
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight)
library(nlme)
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight)
with(ChickWeight, which(Chick==18))
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight, subset = -(195:196))
Chick.nlsl
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight)
Chick.nlsl
coef(Chick.nlsl)
pars = coef(Chick.nlsl)
CW = data.frame(pars = coef(Chick.nlsl), Diet = factor(rep(c(1,1,2,3,4), each=10)))
head(CW)
pairs(CW)
CW$lpars = log(CW$pars)
class(CW$pars)
head(CW$pars)
names(CW)
CW = data.frame(Diet = factor(rep(c(1,1,2,3,4), each=10)))
CW$pars = coef(Chick.nlsl)
class(CW$pars)
CW$pars = as.data.frame(coef(Chick.nlsl))
class(CW$pars)
CW$lpars = log(CW$pars)
CW
pairs(CW[, c(1,5:7)])
pairs(CW[, c(1,3)])
pairs(CW)
class(pairs)
class(CW)
names(CW)
with(CW, pairs(cbind(Diet,lpars)))
CW.lm = lm(log(pars) ~ Diet, data = CW)
CW.lm
CW.lm = lm(lpars ~ Diet, data = CW)
CW$pars = as.matrix(CW$pars)
CW.lm = lm(log(pars) ~ Diet, data = CW)
CW.lm
coef(CW.lm)
library(lsmeans)
lsmeans(CW.lm, ~Diet, mult.name = "par")
lsmeans(CW.lm, ~Diet|par, mult.name = "par")
cld(lsmeans(CW.lm, ~Diet|par, mult.name = "par"), type="r")
plot(lsmeans(CW.lm, ~Diet|par, mult.name = "par"), type="r")
CW.com = contrast(lsmeans(CW.lm, ~par|Diet, mult.name = "par"), list(slope=c(1,0,-1), mid=c(0,1,0))
)
CW.con
CW.con
CW.com
summary(CW.com, by="contrast")
pairs(.Last.value)
pairs(CW.com, by="contrast")
pairs(regrid(CW.com), by="contrast")
regrid(CW.com)
regrid(CW.com, by="contrast")
summary(regrid(CW.com), by="contrast")
plot(ChickWeight)
plot(augPred(Chick.nlsl), layout=c(10,5))
SSlogis
?SSlogis
CW.con = contrast(lsmeans(CW.lm, ~par|Diet, mult.name = "par"), list(slope=c(1,0,-1), mid=c(0,1,0)), offset = c(log(.25),0))
summary(regrid(CW.con), by="contrast")
Chick.lme = lme(weight ~ Time*Diet, ~Time|Chick, data = ChickWeight)
summary(Chick.lme)
lstrends(Chick.lme, ~Diet, var = "Time")
pairs(lstrends(Chick.lme, ~Diet, var = "Time"))
pairs(CW.con, by = "par")
pairs(CW.con, by = "contrast")
CW$pars
pairs(CW$pars)
library(ordinal)
ls(2)
?income
income
income.clm = clm(income ~ year, weights = pct, data = income, link = "cauchit")
summary(income.clm)
lsmeans(income.clm, ~cut | year, type = "link")
lsmeans(income.clm, ~cut | year, mode = "link")
lsmeans(income.clm, ~cut | year, mode = "lin")
lsmeans(income.clm, ~ prob | year, mode = "prob")
ref.grid(income.clm, mode="prob")
lsmeans(income.clm, ~ income | year, mode = "prob")
lsmeans(income.clm, ~ year, mode = "mean")
lsmeans(income.clm, ~ year, mode = "latent")
pairs(lsmeans(income.clm, ~ year, mode = "latent"))
pairs(lsmeans(income.clm, ~ year, mode = "latent"), rev = TRUE)
lsmip(income.clm, year ~ income, mode = "prob")
?soup
with(soup, table(PROD, PRODID))
ls(2)
q("no")
library(lsmeans)
methods("lsmeans")
library(lsmeans)
example(lsmeans)
exam-0ple(MOats)
example(MOats)
library(ordinal); wine.clm = clm(rating ~ temp * contact, scale = ~ judge,
+ data = wine, link = "probit")
library(ordinal); wine.clm = clm(rating ~ temp * contact, scale = ~ judge,
data = wine, link = "probit")
lsmeans(wine.clm, ~ temp*contact | judge)
lsmip(wine.clm, temp ~ contact | judge)
lsmip(wine.clm, temp ~ contact)
lsmeans(wine.clm, eff ~ judge, mode = "scale")
lsmeans(wine.clm, eff ~ judge, mode = "scale", type="resp")
lsmeans(wine.clm, eff ~ judge, mode = "scale", options=(pred.type="resp"))
jud = regrid(lsmeans(wine.clm, ~ judge, mode = "scale"))
jud
lsmip(wine.clm, temp*warm ~ cut | judge, mode = "cum")
lsmip(wine.clm, temp*contact ~ cut | judge, mode = "cum")
lsmip(wine.clm, temp*contact ~ cut | judge, mode = "lin")
lsmip(wine.clm, temp*contact ~ cut | judge, mode = "cum")
lsmip(wine.clm, temp*contact ~ rating | judge, mode = "prob")
wine8 = wine[wine$judge=="8", ]
with(wine8, table(rating, interaction(temp, contact)))
wine.clm
wine.clm0 = clm(rating~temp*contact, data=wine)
anova(wine.clm0, wine.clm)
names(wine)
with(wine, table(rating,judge))
