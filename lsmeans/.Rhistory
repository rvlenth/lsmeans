Predict
Predict(fit, type="x")
Predict
?predictrms
fix(lsm.basis.rms)
ref.grid()fit
ref.grid(fit)
ls(3)
fix(lsm.basis.rms)
ref.grid(fit)
fix(lsm.basis.rms)
ref.grid(fit)
lsmeans(fit, "sex")
ref.grid(fit, at=list(cholesterol=c(100,130,180)))
summary(.Last.value)
ref.grid(fit, at=list(cholesterol=c(100,130,180))) -> rg
rg$X
rg@linfct
rg@V
rg@bhat
rg@linfct %*% rg@bhat
length(rg@bhat)
ncol(rg@linfct)
rg@linfct[1,]
fix(lsm.basis.rms)
ref.grid(fit, at=list(cholesterol=c(100,130,180))) -> rg
summary(rg)
Predict(fit, sex, cholesterol=c(100,130,180))
confint(ref.grid(fit, at=list(blood.pressure=119.3427,cholesterol=c(100,130,180))))
Predict(fit, sex, cholesterol=c(100,130,180))
confint(ref.grid(fit, at=list(blood.pressure=119.3427,age=50.25048,cholesterol=c(100,130,180))))
lsm.basis.rms
recover.data.rms
Predict(fit, sex, cholesterol=c(100,130,180))
Predict(fit, sex, cholesterol=c(100,130,180), type = "x")
Predict(fit, sex, cholesterol=c(100,130,180), type = "model.frame")
class(fit)
?lrm
mean(age)
mean(blood.pressure)
mean(blood.pressure[-(1:3)])
q("no")
library(lsmeans)
library(nlme)
example(nlme)
names(Loblolly)
anova(fm1,fm2)
fm3 = update(fm2, fixed = Asym + lrc ~ Seed)
fm3 = update(fm2, fixed = list(Asym + lrc ~ Seed))
names(ChickWeight)
Chick.nlme = nlme(weight ~ SSlogis(Time, Asym, xmid, scal), data = ChickWeight,
fixed = Asym + xmid + scal ~ 1,
random = Asym ~ 1)
Chick.nlme = nlme(weight ~ SSlogis(Time, Asym, xmid, scal), data = ChickWeight,
fixed = Asym + xmid + scal ~ 1,
random = Asym ~ 1,
start = c(Asym=103, xmid=15, scal=1))
Chick.nlme
Chick.nlmed = update(Chick.nlme, fixed = Asym + xmid + scal ~ Diet,
start=c(300,0,0,0, 14,0,0,0, 7,0,0,0))
anova(Chick.nlme,Chick.nlmed)
Chick.nlmed
lsmip(Chick.nlmed, ~ Diet, param = "Asym")
terms(Chick.nlmed)
lsmeans:::recover.data.nlme
terms(Chick.nlmed)
ls()
terms(fm2)
names(fm2)
names(fm2$modelStruct)
names(fm2$dims)
names(fm2$contrasts)
names(fm2$apVar)
names(fm2$groups)
names(fm2$call)
names(fm2$method)
names(fm2$plist)
names(fm2$plist$Asym)
names(fm2$plist$Asym$fixed)
names(fm2$fixDF)
names(fm2$fixDF$terms)
names(fm2$fixDF$terms$Asym)
fm2$fixDF$terms$Asym
fm2$fixDF$terms
attributes(fm2)
attributes(fm2$modelStruct)
attributes(fm2$dims)
names(fm2)
attributes(fm2$contrasts)
attributes(fm2$coefficients)
attributes(fm2$varFix)
attributes(fm2$apVar)
attributes(fm2$logLik)
attributes(fm2$call)
attributes(fm2$fitted)
ns = getNamespace("glht")
ns = getNamespace("multcomp")
ls(envir=ns)
ls(envir=ns, pat="*nlme")
ls(envir=ns, pat=".nlme")
ls(envir=ns, pat=".lme")
glht:::modelparm.lme
multcomp:::modelparm.lme
class(fm1)
nlme:::terms.lme
ns = getNamespace("nlme")
ls(envir=ns, pat=".lme")
ls(envir=ns, pat="terms")
ls(ns)
lsmeans:::recover.data.lme
terms(fm2)
nlsList(Chick.nlmed)
print.default(fm2)
Chick.nlmed$fixDF
attr(Chick.nlmed$fixDF, "terms")
Chick.nlmed$fixDF$terms
attr(Chick.nlmed$fixDF$terms, "terms")
Chick.nlmed$fixDF$terms
attributes(Chick.nlmed$fixDF$terms)
attributes(Chick.nlmed$fixDF)
ls()
terms(fm1)
terms.default
stats:::terms.default
?terms
class(Chick.nlmed$fixDF)
class(Chick.nlmed$fixDF$terms)
Chick.nlmed$fixDF$terms
Chick.nlmed$fixDF$assign
Chick.nlmed$fixDF$terms$assign
attr(Chick.nlmed$fixDF$terms, "assign")
attributes(Chick.nlmed$fixDF$terms)
attributes(Chick.nlmed$fixDF)
names(attributes(Chick.nlmed$fixDF))
attr(Chick.nlmed$fixDF, "assign")
terms(y ~ x1+x2)
library(lsmeans)
lsmip(Chick.nlmed, ~ Diet, param = "Asym")
lsmeans(Chick.nlmed, ~ Diet, param = "Asym")
lsmeans(Chick.nlmed, ~ Diet, param = "xmed")
Chick.nlmed
lsmeans(Chick.nlmed, ~ Diet, param = "xmid")
cld(.Last.value)
lsmeans(Chick.nlmed, ~ Diet, param = "Asym")
cld(.Last.value)
lsmeans(Chick.nlmed, ~ Diet, param = "scal")
cld(.Last.value)
plot(lsmeans(Chick.nlmed, ~ Diet, param = "Asym"), comp=TRUE)
plot(lsmeans(Chick.nlmed, ~ Diet, param = "Asym"), comp=TRUE, adj="none")
plot(lsmeans(Chick.nlmed, ~ Diet, param = "xmid"), comp=TRUE, adj="none")
plot(lsmeans(Chick.nlmed, ~ Diet, param = "scal"), comp=TRUE, adj="none")
Chick.final = update(Chick.nlmed, fixed = Asym + xmid ~ Diet)
Chick.final = update(Chick.nlmed, fixed = list(Asym + xmid ~ Diet, scal ~ 1))
fixef(Chick.nlmed)
Chick.final = update(Chick.nlmed, fixed = list(Asym + xmid ~ Diet, scal ~ 1), start=fixef(Chick.nlmed[1:9])
)
Chick.final = update(Chick.nlmed, fixed = list(Asym + xmid ~ Diet, scal ~ 1), start=fixef(Chick.nlmed)[1:9])
plot(lsmeans(Chick.FINAL, ~ Diet, param = "Asym"), comp=TRUE, adj="none")
plot(lsmeans(Chick.final, ~ Diet, param = "Asym"), comp=TRUE, adj="none")
plot(lsmeans(Chick.final, ~ Diet, param = "xmid"), comp=TRUE, adj="none")
plot(lsmeans(Chick.nlmed, ~ Diet, param = "xmid"), comp=TRUE, adj="none")
lsmeans(Chick.nlmed, ~ Diet, param = "xmid")
lsmeans(Chick.final, ~ Diet, param = "xmid")
anova(Chick.nlmed, Chick.final)
Chick.final
Chick.nlmed
?SSlogis
plot(ChickWeight)
with(ChickWeight, table(Diet,Chick))
with(ChickWeight, table(Diet))
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
plot(Chick.final)
?plot.nlme
?plot.lme
Chick.final$fixDF
Chick.final$fixDF$terms
Chick.final$fixDF$x
Chick.final$fixDF$X
?nlme
example(lsmobj)
library(lsmeans)
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
library(lsmeans)
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
library(lsmeans)
lsmeans(Chick.final, pairwise ~ Diet, param = "Asym")
?lmeObject
q("no")
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight)
library(nlme)
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight)
with(ChickWeight, which(Chick==18))
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight, subset = -(195:196))
Chick.nlsl
Chick.nlsl = nlsList(weight ~ SSlogis(Time, asym, xmid, scal) | Chick,
data = ChickWeight)
Chick.nlsl
coef(Chick.nlsl)
pars = coef(Chick.nlsl)
CW = data.frame(pars = coef(Chick.nlsl), Diet = factor(rep(c(1,1,2,3,4), each=10)))
head(CW)
pairs(CW)
CW$lpars = log(CW$pars)
class(CW$pars)
head(CW$pars)
names(CW)
CW = data.frame(Diet = factor(rep(c(1,1,2,3,4), each=10)))
CW$pars = coef(Chick.nlsl)
class(CW$pars)
CW$pars = as.data.frame(coef(Chick.nlsl))
class(CW$pars)
CW$lpars = log(CW$pars)
CW
pairs(CW[, c(1,5:7)])
pairs(CW[, c(1,3)])
pairs(CW)
class(pairs)
class(CW)
names(CW)
with(CW, pairs(cbind(Diet,lpars)))
CW.lm = lm(log(pars) ~ Diet, data = CW)
CW.lm
CW.lm = lm(lpars ~ Diet, data = CW)
CW$pars = as.matrix(CW$pars)
CW.lm = lm(log(pars) ~ Diet, data = CW)
CW.lm
coef(CW.lm)
library(lsmeans)
lsmeans(CW.lm, ~Diet, mult.name = "par")
lsmeans(CW.lm, ~Diet|par, mult.name = "par")
cld(lsmeans(CW.lm, ~Diet|par, mult.name = "par"), type="r")
plot(lsmeans(CW.lm, ~Diet|par, mult.name = "par"), type="r")
CW.com = contrast(lsmeans(CW.lm, ~par|Diet, mult.name = "par"), list(slope=c(1,0,-1), mid=c(0,1,0))
)
CW.con
CW.con
CW.com
summary(CW.com, by="contrast")
pairs(.Last.value)
pairs(CW.com, by="contrast")
pairs(regrid(CW.com), by="contrast")
regrid(CW.com)
regrid(CW.com, by="contrast")
summary(regrid(CW.com), by="contrast")
plot(ChickWeight)
plot(augPred(Chick.nlsl), layout=c(10,5))
SSlogis
?SSlogis
CW.con = contrast(lsmeans(CW.lm, ~par|Diet, mult.name = "par"), list(slope=c(1,0,-1), mid=c(0,1,0)), offset = c(log(.25),0))
summary(regrid(CW.con), by="contrast")
Chick.lme = lme(weight ~ Time*Diet, ~Time|Chick, data = ChickWeight)
summary(Chick.lme)
lstrends(Chick.lme, ~Diet, var = "Time")
pairs(lstrends(Chick.lme, ~Diet, var = "Time"))
pairs(CW.con, by = "par")
pairs(CW.con, by = "contrast")
CW$pars
pairs(CW$pars)
library(ordinal)
ls(2)
?income
income
income.clm = clm(income ~ year, weights = pct, data = income, link = "cauchit")
summary(income.clm)
lsmeans(income.clm, ~cut | year, type = "link")
lsmeans(income.clm, ~cut | year, mode = "link")
lsmeans(income.clm, ~cut | year, mode = "lin")
lsmeans(income.clm, ~ prob | year, mode = "prob")
ref.grid(income.clm, mode="prob")
lsmeans(income.clm, ~ income | year, mode = "prob")
lsmeans(income.clm, ~ year, mode = "mean")
lsmeans(income.clm, ~ year, mode = "latent")
pairs(lsmeans(income.clm, ~ year, mode = "latent"))
pairs(lsmeans(income.clm, ~ year, mode = "latent"), rev = TRUE)
lsmip(income.clm, year ~ income, mode = "prob")
?soup
with(soup, table(PROD, PRODID))
ls(2)
q("no")
library(lsmeans)
methods("lsmeans")
library(lsmeans)
example(lsmeans)
exam-0ple(MOats)
example(MOats)
library(ordinal); wine.clm = clm(rating ~ temp * contact, scale = ~ judge,
+ data = wine, link = "probit")
library(ordinal); wine.clm = clm(rating ~ temp * contact, scale = ~ judge,
data = wine, link = "probit")
lsmeans(wine.clm, ~ temp*contact | judge)
lsmip(wine.clm, temp ~ contact | judge)
lsmip(wine.clm, temp ~ contact)
lsmeans(wine.clm, eff ~ judge, mode = "scale")
lsmeans(wine.clm, eff ~ judge, mode = "scale", type="resp")
lsmeans(wine.clm, eff ~ judge, mode = "scale", options=(pred.type="resp"))
jud = regrid(lsmeans(wine.clm, ~ judge, mode = "scale"))
jud
lsmip(wine.clm, temp*warm ~ cut | judge, mode = "cum")
lsmip(wine.clm, temp*contact ~ cut | judge, mode = "cum")
lsmip(wine.clm, temp*contact ~ cut | judge, mode = "lin")
lsmip(wine.clm, temp*contact ~ cut | judge, mode = "cum")
lsmip(wine.clm, temp*contact ~ rating | judge, mode = "prob")
wine8 = wine[wine$judge=="8", ]
with(wine8, table(rating, interaction(temp, contact)))
wine.clm
wine.clm0 = clm(rating~temp*contact, data=wine)
anova(wine.clm0, wine.clm)
names(wine)
with(wine, table(rating,judge))
q9("no")
q("no")
library(lsmeans)
install.packages("mediation")
install.packages("MCMCpack")
vignette("using-lsmeans")
?lsmeans
detach(package:lsmeans)
install.packages("lsmeans")
install.packages("lsmeans")
vignette("using-lemeans")
vignette("using-lsmeans")
vignette("using-lsmeans", package="lsmeans")
install.packages("lsmeans")
vignette("using-lsmeans", package="lsmeans")
q("no")
library(lsmeans)
vignette("using-lsmeans")
?texi2pdf
texi2pdf
tools::texi2pdf
tools::texi2dvi
library(lsmeans)
library(tools)
buildVignettes("lsmeans")
vignette("using-lsmeans")
library(lsmeans)
vignette("using-lsmeans")
detach(package:lsmeans)
library(lsmeans)
vignette("using-lsmeans")
?texi2pdf
getwd()
setwd("vignettes")
dir()
Sweave("using-lsmeans.rnw")
dir()
texi2pdf("using-lsmeans.tex", clean = TRUE)
args(texi2pdf)
texi2pdf("using-lsmeans.tex", clean = TRUE, texi2dvi = "latexmk")
q("no")
q("no")
warp.lm <- lm(breaks ~ wool * tension, data = warpbreaks)
lsmeans(warp.lm, list(pairwise ~ wool|tension, pairwise ~ tension|wool))
library(lsmeans)
lsmlist <- lsmeans(warp.lm, list(pairwise ~ wool|tension, pairwise ~ tension|wool))
names(lsmlist)
lsmlist
mydiffs = lsmlist[[4]]
mydiffs@linfct = rbind(lsmlist[[2]]@linfct, lsmlist[[4]]@linfct)
mydiffs@grid = rbind(lsmlist[[2]]@grid, lsmlist[[4]]@grid)
lsmlist[[4]]@grid
mydiffs@grid = data.frame(contrast=1:9)
mydiffs
nrowmydiffs@linfct
mydiffs@linfct
mydiffs@grid = data.frame(contrast=1:9)
mydiffs@grid
mydiffs@misc
mydiffs = update(mydiffs, pri.vars="contrast", by.vars=NULL)
mydiffs
mydiffs = update(mydiffs, pri.vars="contrast", by.vars=NULL,adjust="mvt")
mydiffs
mydiffs = lsmlist[[4]]
mydiffs@linfct = rbind(lsmlist[[2]]@linfct, lsmlist[[4]]@linfct)
mydiffs@grid = data.frame(contrast=1:9)
mydiffs = update(mydiffs, pri.vars="contrast", by.vars=NULL, adjust="mvt")
mydiffs
q("no")
x = data.frame()
x$xyz = 1:5
?data.frame
x = data.frame(row.rames=1:5)
x$xyz = 1:5
x
x[3,"xyz"] = 17
x
library(lsmeans)
warp.lm = lm(breaks ~ wool * tension, data = warpbreaks)
lsms = lsmeans(warp.lm, list(pairwise ~ wool|tension, pairwise ~ tension|wool))
lsms
lsmeans:::rbind.ref.grid(lsms[[2]], lsms[[4]])
lsmeans:::rbind.ref.grid(lsms[[2]], lsms[[4]])
objs
bhats
obj@linfct
gnms
grid
rows
grid
g
as.character(g[[1]])
rows
grid()
grid
obj@grid = grid
library(lsmeans)
rbind(lsms[[2]], lsms[[4]])
x = .Last.value
summay(x)
summary(x)
summary(x, by="wool")
summary(x, by="tension")
?update.ref.grid
x
summary(x, adj = "tukey")
library(lsmeans)
x = rbind(lsms[[2]], lsms[[4]])
x
summary(x, adj="tukey")
rbind(lsms[[3]], lsms[[4]])
test(.Last.value, adj="tukey")
rbind(lsms[[2]], lsms[[3]], lsms[[4]])
lsms[[4]]@grid
rbind(lsms[[4]], lsms[[2]])
library(lsmeans)
rbind(lsms[[4]], lsms[[2]])
frst = lsms[[1]]
frst = updata(frst, by=NULL)
frst = update(frst, by=NULL)
rbind(frst, lsms[[4]], lsms[[2]])
get("[")
methods("[")
get("[.data.frame")
getMethod("[","terms")
getS3Method("[","terms")
?getMethod
?method
?methods
.S3methods("[", "terms")
stats:::[.terms]
get("stats:::[.terms")
get("[.simple.list")
# extract rows of a ref.grid
"[.ref.grid" <- function(x, i, ...) {
}
fix("[.ref.grid")
[.ref.grid = edit()
"[.ref.grid" <- edit()
library(lsmeans)
example("lsmeans")
ls()
warp.lsm
warp.lsm[c(1,2,3,5)]
w = warp.lsm[c(1,2,3,5)]
w@linfct
w@grid
w@misc
summary(w, adjust="none")
w
summary(w, inder=F)
summary(w, infer=F)
print(summary(w, infer=F))
as.data.frame(w, infer=F)
as.data.frame(summary(w, infer=F))
w[1:3]
w[1:2]
w[1]
warp.lsm[2]
warp.lsm[1:3]
warp.lsm[c(1,3,5)]
ls()
get("[.ref.grid")
w@misc
fix("[.ref.grid")
w = update(w, famSize = NULL)
w
nrow(summary(w))
summary(w)
w = update(w, famSize = 1)
w = update(w, famSize = 2)
summary(w)
summary(w, adjust="none")
as.data.frame(summary(w, adjust="none"))
as.data.frame(test(w, adjust="none"))
as.data.frame(test(w))
test(w)
test(w, adjust="none")
w = update(w, famSize = NULL)
test(w, adjust="none")
test(w)
as.data.frame(test(w))
as.data.frame(test(w, adjust="none"))
as.data.frame(test(w))
test(update(w, famSize=2))
w@misc
w@misc$by.vars = NULL
w@misc
w
fix("[.ref.grid")
warp.lsm[c(1:3,5)]
test(.Last.value)
w = warp.lsm[c(1:3,5)]
w@misc
w@by.vars = NULL
w@misc$by.vars = NULL
w
test(w)
test(w, adjust="none")
pairs(w)
