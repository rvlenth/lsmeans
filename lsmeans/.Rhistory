head(Early)
?Chem97
Early.lmm = lmer(cog ~ age*trt + (1|id), data = Early)
plot(Early)
Early.lmm = lmer(cog ~ age*trt + (1+age|id), data = Early)
summary(Early.lmm)
Early.lmm = lmer(cog ~ age*trt + (1|id) + (0+age|id), data = Early)
summary(Early.lmm)
anova(Early.lmm)
Earlyc.lmm = lmer(cog ~ age*trt + (1+age|id), data = Early)
anova(Early.lmm, Earlyc.lmm)
lsmeans(Earlyc.lmm, pairwise~trt)
lstrends(Earlyc.lmm, pairwise~trt, var = "age")
levels(Early$id)
plot(cog~age|trt, groups=~id, data="Early", type="o")
plot(cog~age|trt, groups=~id, data=Early, type="o")
str(Early)
xyplot(cog~age|trt, groups=~id, data=Early, type="o")
Early.lmm = lmer(cog ~ age*trt + (1|id), data = Early)
anova(Early.lmm, Earlyc.lmm)
q("no")
library(lsmeans)
toy5 = lsmobj(bhat=rnorm(5),V=diag(1,5),df=20)
toy5 = lsmobj(bhat=rnorm(5),V=diag(1,5),linfct=diag(1,5),df=20)
toy5 = lsmobj(bhat=rnorm(5),V=diag(1,5),linfct=diag(1,5),df=20,levels=1:5)
toy5
toy5.dunn = contrast(toy5, "trt.vs.ctrl1")
toy5.dunn
summary(as.glht(toy5.dunn))
confint(as.glht(toy5.dunn))
vcov(toy5)
vcov(toy5.dunn)
library(mvtnorm)
args(qmvt)
qmvt(.95, df=20, sigma=vcov(toy.dunn))
qmvt(.95, df=20, sigma=vcov(toy5.dunn))
qmvt(.95, df=20, sigma=vcov(toy5.dunn), tail="both")$quantile
qmvt(.95, df=20, sigma=vcov(toy5.dunn), tail="left")$quantile
qmvt(.95, df=20, sigma=vcov(toy5.dunn), tail="low")$quantile
qmvt(.95, df=20, sigma=vcov(toy5.dunn), tail="low")$quantile/sqrt(2)
qmvt(.95, df=20, sigma=vcov(toy5.dunn), tail="both")$quantile/sqrt(2)
confint(as.glht(toy5.dunn))
confint(as.glht(toy5.dunn))
trt.vs.ctrl1.lsmc(1:5)
xpx = function(x) t(x) %*% x
xpx(trt.vs.ctrl1.lsmc(1:5))
xpx = function(x) {x = as.matrix(x); t(x) %*% x}
xpx(trt.vs.ctrl1.lsmc(1:5))
xpx(trt.vs.ctrl1.lsmc(1:7))
dnt = function(k) {
V = xpx(trt.vs.ctrl1.lsmc(seq_len(k)))
qmvt(.95, df=20, sigma=V, tail="both")$quantile/sqrt(2)
}
dnt(5)
dnt(5)
dnt(6)
dnt(9)
dnt(2)
dnt(3)
fix(dnt)
dnt(5)
dnt(5,alpha=.01)
dnt(5, tail="lower")
dnt(5, tail="lower",df=13)
dnt(3, tail="lower",df=2)
dnt(3, tail="lower",df=1)
dnt(3, tail="lower",df=1)
dnt(5, tail="lower",df=1)
dnt(5, tail="lower",df=1, interval=sqrt(2)*c(14,15))
dnt(10, tail="lower",df=1, interval=sqrt(2)*c(16,18))
dnt(10, tail="lower",df=100)
dnt(10, tail="both",df=100)
dnt(10, tail="both",df=100)
dnt(10, tail="both",df=10000)
dnt(30, tail="both",df=10000)
tuk=dnt
fix(tuk)
tuk(5)
tuk(20,df=35)
tuk(20,df=35,tail="lower")
tuk
dnt
q("no")
ls()
library(mvtnorm)
pdunn = function(x, k, df, tail = "both") {}
fix(pdunn)
pdunn = edit()
pdunn = edit()
pdunn(.5,4,20)
pdunn(.5,4,20,tail="lower")
fix(pdunn)
debug(pdunn)
pdunn(.5,4,20,tail="l")
tail
corr
undebug(pdunn)
pdunn(0,4,20,tail="l")
fix(pdunn)
args(pmvt)
fix(pdunn)
pdunn(0,4,20,tail="l")
pdunn(0,4,Inf,tail="l")
pdunn(0,4,Inf,tail="b")
pdunn(0,3,Inf,tail="l")
pdunn(0,2,Inf,tail="l")
pdunn(0,1,Inf,tail="l")
pdunn(0,4,5,tail="l")
x = seq(-2,3,by=.25)
plot(pdunn(x) ~ x, type="o")
lines(pdunn(x,1) ~ x, lty=3)
abline(h=.5,lty=2)
lines(pdunn(x,2) ~ x, lty=3)
lines(pdunn(x,3) ~ x, lty=3)
lines(pdunn(x,5) ~ x, lty=3)
abline(v=0, lty=2)
abline(v=1, lty=2)
pdunn(.8)
pdunn(.75)
pdunn(.73)
pdunn(.73,5)
pdunn(.8,5)
pdunn(.82,5)
pdunn(.83,5)
pdunn(.83,5)
pdunn(.9,6)
pdunn(.9,6)
pdunn(.6,3)
pdunn(.3,2)
pdunn(.36,2)
pdunn(.37,2)
pdunn(.4,2)
lines(pt(x - .73, df=20)~x, col="blue")
lines(pt(x - .73, df=100)~x, col="green")
lines(pnorm(x - .73)~x, col="red")
plot(pdunn(x) ~ x, type="l")
lines(pnorm(x - .73)~x, col="red")
lines(pnorm((x - .73)/.95~x, col="blue")
lines(pnorm((x - .73)/.95)~x, col="blue")
lines(pnorm((x - .73)/.95) ~ x, col="blue")
lines(pnorm((x - .73)/.9) ~ x, col="green")
lines(pdunn(x,20) ~ x, lty=2)
abline(h=.5)
abline(v=1)
plot(pdunn(x) ~ x, type="l")
lines(pnorm(x)^4 ~ x, lty=2)
rsq = function(k) {
mat = matrix(.5, nrow=k, ncol=k)
diag(mat) = 1
mat2 = mat %*% mat
list(mat2=mat2, tr=sum(diag(mat2)))
}
rsq(4)
rsq(1)
rsq(2)
sapply(1:10, rsq)
sapply(1:10, rsq)/1:10
sapply(1:10, rsq)/(1:10)
sapply(1:10, function(k) rsq(k)$tr)
sapply(1:10, function(k) rsq(k)$tr) / k
sapply(1:10, function(k) rsq(k)$tr) / 1:10
lines(pnorm(x)^1.75 ~ x, col="red")
lines(pt(x, 20)^1.75 ~ x, col="blue")
lines(pt(x, 20)^2.25 ~ x, col="blue")
lines(pt(x, 20)^2.5 ~ x, col="blue")
plot(pdunn(x) ~ x, type="l")
lines(pt(x, 20)^2.5 ~ x, col="blue")
plot(pdunn(x) ~ x, type="l")
log(5,base=2)
lines(pt(x, 20)^2.321928 ~ x, col="blue")
lines(pt(x/.9, 20)^2.321928 ~ x, col="red")
lines(pt(x/1.1, 20)^2.321928 ~ x, col="red")
plot(pdunn(x) ~ x, type="l")
lines(pt(x/1.1, 20)^2.321928 ~ x, col="red")
pdunn(2)
q("no")
methods("deriv")
deriv.default
base::deriv.default
base:::deriv.default
get("deriv.default")
?deriv
stats::deriv.default
stats:::deriv.default
nss = getNamespace("stats")
ls(nss)
ls(nss, pat="deriv")
stats:::C_deriv
?numericDeriv
example(numericDeriv)
expr = expression(x*y[i]^2)
expr
env = new.env()
env$x=1:5
eny$y=7:3
env$y=7:3
env$i=3
numericDeriv(expr, "x", env)
ls(env)
class(env)
myenv
ls(myenv)
myenv$x
nd = numericDeriv(quote(pnorm(x, mean, sd)), c("mean", "sd"), myenv)
with(myenv, plot(nd~x, type="l"))
with(myenv, lines(x, nd$gradient[,1], lty=2)
)
with(myenv, lines(x, attr(nd, "gradient")[,1], lty=2))
with(myenv, lines(x, attr(nd, "gradient")[,2], lty=3))
with(myenv, plot(nd~x, type="l", ylim=c(-1,1)))
with(myenv, lines(x, attr(nd, "gradient")[,1], lty=2))
with(myenv, lines(x, attr(nd, "gradient")[,2], lty=3))
expr = expression(x*y^2)
numericDeriv(expr, "x", env)
env$x=as.double(1:5)
env$7=as.double(7:3)
env$y=as.double(7:3)
numericDeriv(expr, "x", env)
args(numericDeriv)
expr = quote(x*y^2)
numericDeriv(expr, "x", env)
numericDeriv(expr, c("x","y"), env)
deriv(expr, c("x","y"))
eval(.Last.value, env)
expr = quote(x*y[i]^2)
numericDeriv(expr, c("x","y"), env)
expr = quote(x*y[x]^2)
numericDeriv(expr, c("x","y"), env)
expr = quote(x*y[rev(x)]^2)
numericDeriv(expr, c("x","y"), env)
?predict.lm
ls()
x1 = -4:4
x2 = c(-2,1,-1,2,0,2,-1,1,-2)
sum(x2)
sum(x1)
x3 = 3*x1 - 2*x2
x4 = x2 - x1 + 4
y = 1 + x1 + x2 + x3 + x4 + c(-.5,.5,.5,-.5,0,.5,-.5,-.5,.5)
mod1 = lm(y ~ x1+x2+x3+x4)
mod2 = lm(y ~ x1+x2+x3+x4 - 1)
mod3 = lm(y ~ x4+x3+x2+x1)
coef(mod1)
coef(mod2)
coef(mod3)
resid(mod1)
cbind(x1,x2,c3,c4)
cbind(x1,x2,x3,x4)
tst = matrix(c(3,1,7,2,  6,2,14,4,   6,2,14,0,   0,0,0,4,  0,0,0,0), ncol=4, byrow=TRUE)
tst
testset = data.frame(x1=c(3,6,6,0,0), x2=c(1,2,2,0,0), x3=c(7,14,14,0,0), x4=c(2,4,0,4,0))
testset
tst - as.matrix(testset)
predict(mod1, newdata = testset, type = "terms")
predict(mod2, newdata = testset, type = "terms")
predict(mod3, newdata = testset, type = "terms")
get.terms = function(model, newdata) {
m = model.frame(model)
m = model.frame(model)
}
fix(get.terms)
get.terms(mod1, testset)
get.terms
terms(mod1)
fix(get.terms)
get.terms(mod1, testset)
get.terms
bhat1 = coeef(mod1)
bhat1 = coef(mod1)
bhat2 = coef(mod2)
bhat3 = coef(mod3)
bhat1[is.na(bhat1)] = 0
bhat2[is.na(bhat2)] = 0
bhat3[is.na(bhat3)] = 0
X1 = get.terms(mod1)
X1 = get.terms(mod1, new = testset)
X2 = get.terms(mod2, new = testset)
X3 = get.terms(mod3, new = testset)
testset$fit1 = X1 %*% bhat1
testset$fit1 = X2 %*% bhat2
testset$fit1 = X1 %*% bhat1
testset$fit2 = X2 %*% bhat2
testset$fit3 = X3 %*% bhat3
testset
apply(X1, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod1$qr))
apply(X2, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod2$qr))
apply(X3, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod3$qr))
lsmeans::nonest.basis(mod2$qr)
X2 %*% nonest.basis(mod2$qr)
X2 %*% lsmeans::nonest.basis(mod2$qr)
zapsmall(lsmeans::nonest.basis(mod2$qr))
mod2$qr
library(lsmeans)
zapsmall(lsmeans::nonest.basis(mod2$qr))
nbasis
zapsmall(nbasis)
qrX$pivot = 1:4
nbasis2 = .Last.value
X2 %*% nbasis2
qr.R(mod2$qr)
tR = t(qr.R(mod2$qr))
tR[4,4] = 1
tR
qr.Q(qr(tR))
QR = qr.Q(qr(tR))
X2 %*% QR
QR[c(1,2,4,3),] = QR
QR
X2 %*% QR
zapsmall(X2 %*% QR)
lsmeans::nonest.basis(model.matrix(mod2))
model.matrix(mod2) %*% QR
X2
testset
X3
X2
X2 %*% QR[,4]
X2 %*% QR
zapsmall(QR[,4])
z2 = zapsmall(QR[,4])
X2 %*% z2
rbind(testset, c(1,1,1,1))
rbind(testset, c(x1=1,x2=1,x3=1,x4=1))
testset
rbind(testset, c(x1=1,x2=1,x3=1,x4=1,0,0,0))
rbind(testset, c(x1=1,x2=1,x3=1,x4=1,fit1=0,fit2=0,fit3=0))
rbind(testset, data.frame(x1=1,x2=1,x3=1,x4=1,fit1=0,fit2=0,fit3=0))
ts = testset[c(1:5,5), ]
ts
ts[6,] = 1
ts
testset=ts
X1 = get.terms(mod1, new = testset)
X2 = get.terms(mod2, new = testset)
X3 = get.terms(mod3, new = testset)
testset$fit1 = X1 %*% bhat1
testset$fit2 = X2 %*% bhat2
testset$fit3 = X3 %*% bhat3
X2 %*% QR
apply(QR,2,sum)
testset[6,2] = 2
testset[6,3] = 3
testset[6,4] = 4
testset
X1 = get.terms(mod1, new = testset)
X2 = get.terms(mod2, new = testset)
X3 = get.terms(mod3, new = testset)
testset$fit1 = X1 %*% bhat1
testset$fit2 = X2 %*% bhat2
testset$fit3 = X3 %*% bhat3
X2 %*% QR
apply(X2, 1, lsmeans::is.estble, lsmeans::nonest.basis(mod2$qr))
cbind(x1,x2,x3,x4)
cbind(x1,x2,x3,x4,y)
testset
testset[,1:4]
apply(testset, 1, function(x) paste("x",1:4,"=",x, sep=""))
apply(testset[,1:4], 1, function(x) paste("x",1:4,"=",x, sep=""))
t(apply(testset[,1:4], 1, function(x) paste("x",1:4,"=",x, sep="")))
bhat1
testset
row.names(testset) = 1:6
testset
predict(mod1) - predict(mod2)
XX2 = cbind(1,X2)
XX2
lsmeans::nonest.basis(mod1$qr)
lsmeans::nonest.basis(mod2$qr)
testset
X2
(X2+1)%*%QR[,4]
X1
q("no")
install.packages("rms")
library(rms)
?rms
example(rms)
args(example)
example(rms, run=TRUE)
dist <- datadist(data=2)
dist <- datadist(age,race,bp,sex,height)
example(lrm)
ls()
names(f)
terms(f)
call(f)
f$call
lsmeans:::recover.data.lm(f)
lsmeans:::recover.data.lm(f, data=NULL)
class(f)
ref.grid(f)
library(lsmeans)
ref.grid(f)
?contrast
contrast
rms::contrast
contrast(f)
class(f) = c(class(f),"lm")
class(f)
ref.grid(f)
terms(f)
?lrm
class(fit)
class(fit) = c(class(f),"lm")
ref.grid(fit)
lsmeans:::recover.data.lm(fit, data=NULL)
lsmeans:::recover.data.lme(fit, data=NULL)
lsmeans:::recover.data.lmer(fit, data=NULL)
names(fit)
fit$na.action
X
?Predict
Predict
vcov(fit)
coef(fit)
recover.data.rms = lsmeans::recover.data.lm
recover.data.rms = lsmeans:::recover.data.lm
lsm.basis.rms = lsmeans:::lsm.basis.lm
ref.grid(f)
ref.grid(fit)
fix(recover.data.rms)
fit$na.action
fix(recover.data.rms)
ref.grid(fit)
lsmeans::recover.data.call
lsmeans:::recover.data.call
fit$na.action$omit
fix(recover.data.rms)
ref.grid(fit)
search()
ls(3)
ns = loadNamespace("rms")
ls(ns)
fit$call
names(fit)
fit$non.slopes
fit$Design
recover.data(fit)
recover.data(fit,data=NULL)
lsm.basis.rcs
lsm.basis.rms
unique(factor(c(1,2,3,2,3,1,2,4,2,1,3)))
coef(fit)
Predict(fit, cholesterol=c(150,160,170), type="x")
fix(lsm.basis.rms)
fix(lsm.basis.rms)
ref.grid(fit)
Predict(fit, cholesterol=c(150,160,170), type="model.frame")
Predict(fit, cholesterol=c(150,160,170), type="X")
Predict(fit, cholesterol=c(150,160,170), type="pred")
Predict(fit, cholesterol=c(150,160,170), type="x")
Predict(fit, cholesterol=c(150,160,170), sec=c("male","female"), type="x")
Predict(fit, cholesterol=c(150,160,170), sex=c("male","female"), type="x")
ls(ns,pat="vc")
args(vcov.rms)
args(rms:::vcov.rms)
vcov(fit)
vcov(fit,FALSE)
ref.grid(fit)
ref.grid(fit, at=list(age=c(35,40,50)))
fix(lsm.basis.rms)
ref.grid(fit, at=list(age=c(35,40,50)))
fix(lsm.basis.rms)
ref.grid(fit, at=list(age=c(35,40,50)))
Predict(fit, cholesterol=c(150,160,170), sex=c("male","female"), type="x") -> ppp
class(ppp)
names(ppp)
summary(ppp)
as.data.frame(ppp)
ppp
Predict
Predict(fit, type="x")
Predict
?predictrms
fix(lsm.basis.rms)
ref.grid()fit
ref.grid(fit)
ls(3)
fix(lsm.basis.rms)
ref.grid(fit)
fix(lsm.basis.rms)
ref.grid(fit)
lsmeans(fit, "sex")
ref.grid(fit, at=list(cholesterol=c(100,130,180)))
summary(.Last.value)
ref.grid(fit, at=list(cholesterol=c(100,130,180))) -> rg
rg$X
rg@linfct
rg@V
rg@bhat
rg@linfct %*% rg@bhat
length(rg@bhat)
ncol(rg@linfct)
rg@linfct[1,]
fix(lsm.basis.rms)
ref.grid(fit, at=list(cholesterol=c(100,130,180))) -> rg
summary(rg)
Predict(fit, sex, cholesterol=c(100,130,180))
confint(ref.grid(fit, at=list(blood.pressure=119.3427,cholesterol=c(100,130,180))))
Predict(fit, sex, cholesterol=c(100,130,180))
confint(ref.grid(fit, at=list(blood.pressure=119.3427,age=50.25048,cholesterol=c(100,130,180))))
lsm.basis.rms
recover.data.rms
Predict(fit, sex, cholesterol=c(100,130,180))
Predict(fit, sex, cholesterol=c(100,130,180), type = "x")
Predict(fit, sex, cholesterol=c(100,130,180), type = "model.frame")
class(fit)
?lrm
mean(age)
mean(blood.pressure)
mean(blood.pressure[-(1:3)])
q("no")
