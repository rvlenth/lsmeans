
R Under development (unstable) (2017-08-25 r73135) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tests of lsmeans for lm and mlm objects
> 
> require(lsmeans)
Loading required package: lsmeans
Loading required package: estimability
> 
> # ---------- multivariate ---------------------------------
> 
> MOats.lm <- lm (yield ~ Block + Variety, data = MOats)
> MOats.rg <- ref.grid (MOats.lm, 
+                 mult.levs = list(nitro = c(0,.2,.4,.6)))
> lsmeans(MOats.rg, ~ nitro | Variety)
Variety = Golden Rain:
 nitro    lsmean       SE df  lower.CL  upper.CL
   0.0  80.00000 5.540591 10  67.65479  92.34521
   0.2  98.50000 6.602048 10  83.78972 113.21028
   0.4 114.66667 8.695358 10  95.29220 134.04113
   0.6 124.83333 7.303221 10 108.56074 141.10592

Variety = Marvellous:
 nitro    lsmean       SE df  lower.CL  upper.CL
   0.0  86.66667 5.540591 10  74.32146  99.01187
   0.2 108.50000 6.602048 10  93.78972 123.21028
   0.4 117.16667 8.695358 10  97.79220 136.54113
   0.6 126.83333 7.303221 10 110.56074 143.10592

Variety = Victory:
 nitro    lsmean       SE df  lower.CL  upper.CL
   0.0  71.50000 5.540591 10  59.15479  83.84521
   0.2  89.66667 6.602048 10  74.95639 104.37695
   0.4 110.83333 8.695358 10  91.45887 130.20780
   0.6 118.50000 7.303221 10 102.22741 134.77259

Results are averaged over the levels of: Block 
Confidence level used: 0.95 
> 
> # Try putting missing values whenever Yield is "Marvellous"
> # plus another one for good measure
> mo = MOats
> mo$yield[mo$Variety == "Marvellous", 3] <- NA
> mo$yield[2,4] <- NA
> mo.lm <- lm (yield ~ Block + Variety, data = mo)
> lsmeans(mo.lm, "Variety")
 Variety      lsmean       SE df lower.CL upper.CL
 Golden Rain 107.825 3.658594  4 97.66711 117.9829
 Victory      97.625 3.092077  4 89.04002 106.2100

Results are averaged over the levels of: Block, rep.meas 
Confidence level used: 0.95 
> 
> # Same as above, but use na.exclude
> ## In R 3.0.2, this will return NAs for the SEs and test stats
> ## Reported as Bug 15693 - should be fixed in later versions
> mo.excl.lm <- lm (yield ~ Block + Variety, data = mo, na.action = na.exclude)
> lsmeans(mo.excl.lm, "Variety")
 Variety      lsmean       SE df lower.CL upper.CL
 Golden Rain 107.825 3.658594  4 97.66711 117.9829
 Victory      97.625 3.092077  4 89.04002 106.2100

Results are averaged over the levels of: Block, rep.meas 
Confidence level used: 0.95 
> 
> 
> # ------------ univariate -------------
> # make an unbalanced, collinear, dataset with covariates
> set.seed(19841776)
> warp <- warpbreaks[-c(1,2,3,5,8,13,21,34), ]
> warp$x1 <- rnorm(nrow(warp), 17, 3)
> warp$x2 <- warp$x1^3 / 1007
> warp.lm <- lm(breaks ~ poly(x1,3) + x2 + wool*tension, data=warp)
> # Note: This model is not full-rank
> ( warp.lsm <- lsmeans(warp.lm, "tension", by = "wool") )
wool = A:
 tension lsmean SE df asymp.LCL asymp.UCL
 L       nonEst NA NA        NA        NA
 M       nonEst NA NA        NA        NA
 H       nonEst NA NA        NA        NA

wool = B:
 tension lsmean SE df asymp.LCL asymp.UCL
 L       nonEst NA NA        NA        NA
 M       nonEst NA NA        NA        NA
 H       nonEst NA NA        NA        NA

Confidence level used: 0.95 
> # (Nothing is estimable)
> 
> # However, contrasts ARE estimable:
> (warp.pairs <- pairs(warp.lsm))
wool = A:
 contrast   estimate       SE df t.ratio p.value
 L - M    24.5835929 6.065419 37   4.053  0.0007
 L - H    24.7443633 6.179264 37   4.004  0.0008
 M - H     0.1607705 4.959344 37   0.032  0.9994

wool = B:
 contrast   estimate       SE df t.ratio p.value
 L - M    -1.5953197 4.805899 37  -0.332  0.9412
 L - H     8.2584640 4.920788 37   1.678  0.2269
 M - H     9.8537837 4.687418 37   2.102  0.1032

P value adjustment: tukey method for comparing a family of 3 estimates 
> 
> #switcheroo of by variables:
> (tmp = pairs(warp.lsm, by = "tension"))
tension = L:
 contrast  estimate       SE df t.ratio p.value
 A - B    20.604585 6.155409 37   3.347  0.0019

tension = M:
 contrast  estimate       SE df t.ratio p.value
 A - B    -5.574328 4.907136 37  -1.136  0.2633

tension = H:
 contrast  estimate       SE df t.ratio p.value
 A - B     4.118686 5.000739 37   0.824  0.4154

> 
> # compare these contrasts
> pairs(tmp, by = "contrast")
contrast = A - B:
 contrast1  estimate       SE df t.ratio p.value
 L - M     26.178913 7.679004 37   3.409  0.0044
 L - H     16.485899 7.867834 37   2.095  0.1046
 M - H     -9.693013 6.867934 37  -1.411  0.3456

P value adjustment: tukey method for comparing a family of 3 estimates 
> 
> # Joint tests
> test(warp.pairs, joint = TRUE)  # all 6 but reduces to 4
There are linearly dependent rows - df are reduced accordingly
 wool df1 df2     F p.value
 A      2  37 9.709  0.0004
 B      2  37 2.471  0.0983

> 
> test(warp.pairs, joint = TRUE, rows = 1:3)  # just wool A
There are linearly dependent rows - df are reduced accordingly
 df1 df2     F p.value
   2  37 9.709  0.0004

> 
> test(warp.pairs, joint = TRUE, rows = 2:3)  # just wool A but not lin dep
 df1 df2     F p.value
   2  37 9.709  0.0004

>                                             # should be identical result
> 
> test(warp.pairs, joint = TRUE, rows = 4:5)  # just wool B
 df1 df2     F p.value
   2  37 2.471  0.0983

> 
> 
> # Test different ways of accessing data
> ## ... using "with" ...
> warp.lm2 <- with(warp, lm(breaks ~ x1 + x2 + wool*tension))
> lsmeans(warp.lm2, ~ tension)
NOTE: Results may be misleading due to involvement in interactions
 tension   lsmean       SE df lower.CL upper.CL
 L       38.01851 3.027239 38 31.89018 44.14684
 M       26.51562 2.358621 38 21.74084 31.29040
 H       21.50623 2.379736 38 16.68871 26.32376

Results are averaged over the levels of: wool 
Confidence level used: 0.95 
> 
> ## ... using "attach" ...
> attach(warp)
> warp.lm3 <- lm(breaks ~ x1 + x2 + wool*tension)
> lsmeans(warp.lm3, "tension")
NOTE: Results may be misleading due to involvement in interactions
 tension   lsmean       SE df lower.CL upper.CL
 L       38.01851 3.027239 38 31.89018 44.14684
 M       26.51562 2.358621 38 21.74084 31.29040
 H       21.50623 2.379736 38 16.68871 26.32376

Results are averaged over the levels of: wool 
Confidence level used: 0.95 
> 
> detach("warp")
> # won't work if detached
> try(lsmeans(warp.lm3, "tension")) 
Error in eval(predvars, data, env) : object 'x1' not found
Error in ref.grid(object = structure(list(coefficients = c(`(Intercept)` = 39.9798298407204,  : 
  Perhaps a 'data' or 'params' argument is needed
> 
> # However, we're OK again if we use 'data'
> lsmeans(warp.lm3, "tension", data = warp)
NOTE: Results may be misleading due to involvement in interactions
 tension   lsmean       SE df lower.CL upper.CL
 L       38.01851 3.027239 38 31.89018 44.14684
 M       26.51562 2.358621 38 21.74084 31.29040
 H       21.50623 2.379736 38 16.68871 26.32376

Results are averaged over the levels of: wool 
Confidence level used: 0.95 
> 
> 
> # --- aovlist objects ----
> # dataset borrowed from pbkrtest
> beets <- data.frame (
+     harvest = factor(rep(rep(c("h1","h2"), each=5) , 3)),
+     block = factor(rep(rep(c("blk1","blk2","blk3"), each=5), 2)),
+     sow = factor(letters[c(3,4,5,2,1,3,2,4,5,1,5,2,3,4,1,
+                            2,1,5,4,3,4,1,3,2,5,1,4,3,2,5)]),
+     yield = c(128,118,95,131,136.5,136.5,150,140,99.5,156,
+               99,128,126,120.5,137.5,147,153.5,100,139,141,
+               115.5,135,130,134,91.5,155,140.5,142,151,102) )
> # Use true contrasts for coding...
> old.opt <- options(contrasts = c("contr.helmert","contr.poly"))
> beets.aov <- aov(yield ~ harvest*sow + Error(block/harvest), data=beets)
> lsmeans(beets.aov, eff ~ sow | harvest)
$lsmeans
harvest = h1:
 sow    lsmean       SE    df  lower.CL  upper.CL
 a   136.33333 1.313393 18.89 133.58327 139.08340
 b   131.00000 1.313393 18.89 128.24993 133.75007
 c   128.00000 1.313393 18.89 125.24993 130.75007
 d   118.00000 1.313393 18.89 115.24993 120.75007
 e    95.16667 1.313393 18.89  92.41660  97.91673

harvest = h2:
 sow    lsmean       SE    df  lower.CL  upper.CL
 a   154.83333 1.313393 18.89 152.08327 157.58340
 b   149.33333 1.313393 18.89 146.58327 152.08340
 c   139.83333 1.313393 18.89 137.08327 142.58340
 d   139.83333 1.313393 18.89 137.08327 142.58340
 e   100.50000 1.313393 18.89  97.74993 103.25007

Confidence level used: 0.95 

$contrasts
harvest = h1:
 contrast   estimate       SE df t.ratio p.value
 a effect  14.633333 1.220428 16  11.990  <.0001
 b effect   9.300000 1.220428 16   7.620  <.0001
 c effect   6.300000 1.220428 16   5.162  0.0001
 d effect  -3.700000 1.220428 16  -3.032  0.0079
 e effect -26.533333 1.220428 16 -21.741  <.0001

harvest = h2:
 contrast   estimate       SE df t.ratio p.value
 a effect  17.966667 1.220428 16  14.722  <.0001
 b effect  12.466667 1.220428 16  10.215  <.0001
 c effect   2.966667 1.220428 16   2.431  0.0272
 d effect   2.966667 1.220428 16   2.431  0.0272
 e effect -36.366667 1.220428 16 -29.798  <.0001

P value adjustment: fdr method for 5 tests 

> 
> # restore old 'contrasts' that confound the intercept
> options(old.opt)
> 
> 
> # --------------- Other stuff -------------------
> # using cld
> cld(lsmeans(warp.lm2, ~ tension | wool))
wool = A:
 tension   lsmean       SE df lower.CL upper.CL .group
 H       23.53324 3.489132 38 16.46986 30.59662  1    
 M       23.74441 3.497424 38 16.66424 30.82457  1    
 L       48.35296 4.913079 38 38.40695 58.29897   2   

wool = B:
 tension   lsmean       SE df lower.CL upper.CL .group
 H       19.47922 3.308686 38 12.78114 26.17731  1    
 L       27.68406 3.501649 38 20.59534 34.77278  1    
 M       29.28683 3.244426 38 22.71884 35.85483  1    

Confidence level used: 0.95 
P value adjustment: tukey method for comparing a family of 3 estimates 
significance level used: alpha = 0.05 
> 
> # passing to glht
> require(multcomp)
Loading required package: multcomp
Loading required package: mvtnorm
Loading required package: survival
Loading required package: TH.data
Loading required package: MASS

Attaching package: 'TH.data'

The following object is masked from 'package:MASS':

    geyser

> # This will fail because glht can't deal with rank deficiency
> # Hope this changes.
> try( as.glht(pairs(warp.lsm)) )
Note: df set to 37
Error in glht.matrix(model = structure(list(object = new("lsmobj",
model.info = list( : 
  'ncol(linfct)' is not equal to 'length(coef(model))'
In addition: Warning message:
In glht.matrix(model = list(object = new("lsmobj",
model.info = list( :
  1 out of 10 coefficients not estimable in 'model'
> 
> # However, warp.lm2 isn't rank-deficient
> warp.lsm2 <- lsmeans(warp.lm2, ~ tension)
NOTE: Results may be misleading due to involvement in interactions
> warp.con <- contrast(warp.lsm2, "eff")
> summary(warp.con, adjust = "sidak")
 contrast  estimate       SE df t.ratio p.value
 L effect  9.338389 2.332591 38   4.003  0.0008
 M effect -2.164500 2.018477 38  -1.072  0.6426
 H effect -7.173889 2.059398 38  -3.483  0.0038

Results are averaged over the levels of: wool 
P value adjustment: sidak method for 3 tests 
> summary(as.glht(warp.con))
Note: df set to 38

	 Simultaneous Tests for General Linear Hypotheses

Linear Hypotheses:
              Estimate Std. Error t value Pr(>|t|)    
L effect == 0    9.338      2.333   4.003  < 0.001 ***
M effect == 0   -2.165      2.018  -1.072  0.53538    
H effect == 0   -7.174      2.059  -3.483  0.00357 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Adjusted p values reported -- single-step method)

> 
> summary(glht(warp.lm2, lsm(eff ~ tension | wool)))
Note: df set to 38
$`wool = A`

	 Simultaneous Tests for General Linear Hypotheses

Fit: lm(formula = breaks ~ x1 + x2 + wool * tension)

Linear Hypotheses:
              Estimate Std. Error t value Pr(>|t|)    
L effect == 0   16.476      3.655   4.508   <0.001 ***
M effect == 0   -8.132      3.023  -2.690   0.0274 *  
H effect == 0   -8.344      3.047  -2.738   0.0245 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Adjusted p values reported -- single-step method)


$`wool = B`

	 Simultaneous Tests for General Linear Hypotheses

Fit: lm(formula = breaks ~ x1 + x2 + wool * tension)

Linear Hypotheses:
              Estimate Std. Error t value Pr(>|t|)  
L effect == 0    2.201      2.790   0.789   0.7121  
M effect == 0    3.803      2.665   1.427   0.3373  
H effect == 0   -6.004      2.701  -2.223   0.0801 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Adjusted p values reported -- single-step method)


> 
> # confint
> confint(contrast(warp.lsm2, "trt.vs.ctrl1"))
 contrast  estimate       SE df  lower.CL  upper.CL
 M - L    -11.50289 3.845692 38 -20.38431 -2.621472
 H - L    -16.51228 3.910237 38 -25.54276 -7.481796

Results are averaged over the levels of: wool 
Confidence level used: 0.95 
Conf-level adjustment: dunnettx method for 2 estimates 
> 
> # lstrends
> warp.lm4 <- lm(log(breaks) ~ tension*wool*x1, data = warp)
> lstrends(warp.lm4, ~tension|wool, var = "x1")
wool = A:
 tension    x1.trend         SE df     lower.CL    upper.CL
 L       -0.20402014 0.10134674 34 -0.409981497 0.001941214
 M        0.08236286 0.04306539 34 -0.005156549 0.169882263
 H        0.04675497 0.03684713 34 -0.028127400 0.121637343

wool = B:
 tension    x1.trend         SE df     lower.CL    upper.CL
 L        0.06079456 0.05318559 34 -0.047291572 0.168880693
 M        0.03676248 0.03214052 34 -0.028554928 0.102079881
 H        0.01436618 0.02731486 34 -0.041144293 0.069876660

Trends are based on the log (transformed) scale 
Confidence level used: 0.95 
> lstrends(warp.lm4, ~tension|wool, var = "x1", transform = "response")
wool = A:
 tension    x1.trend        SE df    lower.CL  upper.CL
 L       -11.0371815 5.4827056 34 -22.1793798 0.1050168
 M         1.6835245 0.8802711 34  -0.1054016 3.4724507
 H         0.9777406 0.7705476 34  -0.5882005 2.5436817

wool = B:
 tension    x1.trend        SE df    lower.CL  upper.CL
 L         1.6678054 1.4590651 34  -1.2973716 4.6329825
 M         1.0345211 0.9044562 34  -0.8035551 2.8725972
 H         0.2665878 0.5068716 34  -0.7634991 1.2966748

Trends are obtained after back-transforming from the log scale 
Confidence level used: 0.95 
> 
> # exotic chain rule examples
> lstrends(warp.lm4, ~tension|wool, var = "sqrt(x1-7)")
wool = A:
 tension sqrt(x1-7).trend        SE df    lower.CL   upper.CL
 L            -1.32842099 0.6598914 34 -2.66948167 0.01263968
 M             0.53628307 0.2804084 34 -0.03357545 1.10614160
 H             0.30443213 0.2399199 34 -0.18314382 0.79200808

wool = B:
 tension sqrt(x1-7).trend        SE df    lower.CL   upper.CL
 L             0.39584705 0.3463034 34 -0.30792605 1.09962015
 M             0.23936875 0.2092742 34 -0.18592755 0.66466505
 H             0.09354145 0.1778532 34 -0.26789974 0.45498264

Trends are based on the log (transformed) scale 
Confidence level used: 0.95 
> lstrends(warp.lm4, ~tension|wool, var = "sqrt(x1-7)", transform = "response")
wool = A:
 tension sqrt(x1-7).trend        SE df     lower.CL   upper.CL
 L             -71.865569 35.699128 34 -144.4149266  0.6837877
 M              10.961807  5.731643 34   -0.6862935 22.6099068
 H               6.366289  5.017209 34   -3.8299059 16.5624831

wool = B:
 tension sqrt(x1-7).trend        SE df     lower.CL   upper.CL
 L              10.859456  9.500301 34   -8.4474784 30.1663901
 M               6.735999  5.889118 34   -5.2321277 18.7041260
 H               1.735813  3.300355 34   -4.9713144  8.4429412

Trends are obtained after back-transforming from the log scale 
Confidence level used: 0.95 
> 
> 
> 
> # -------- Transformations -------------
> ## ... of response ...
> warp.lm5 <- lm(log(breaks) ~ x1 + x2 + tension*wool, data = warp)
> warp.lsm5 <- lsmeans(warp.lm5, ~tension | wool)
> summary(warp.lsm5)
wool = A:
 tension   lsmean        SE df lower.CL upper.CL
 L       3.813803 0.1826369 38 3.444074 4.183532
 M       3.099011 0.1300119 38 2.835816 3.362206
 H       3.056508 0.1297036 38 2.793937 3.319079

wool = B:
 tension   lsmean        SE df lower.CL upper.CL
 L       3.282384 0.1301689 38 3.018870 3.545897
 M       3.332706 0.1206070 38 3.088550 3.576862
 H       2.933453 0.1229958 38 2.684461 3.182445

Results are given on the log (not the response) scale. 
Confidence level used: 0.95 
> summary(warp.lsm5, type = "resp")
wool = A:
 tension response       SE df lower.CL upper.CL
 L       45.32245 8.277551 38 31.31426 65.59711
 M       22.17601 2.883144 38 17.04430 28.85278
 H       21.25321 2.756618 38 16.34524 27.63489

wool = B:
 tension response       SE df lower.CL upper.CL
 L       26.63919 3.467596 38 20.46816 34.67077
 M       28.01405 3.378691 38 21.94524 35.76116
 H       18.79240 2.311387 38 14.65030 24.10561

Confidence level used: 0.95 
Intervals are back-transformed from the log scale 
> 
> ## In a GLM
> # One of the glm examples...
> d.AD <- data.frame(treatment = gl(3,3), outcome = gl(3,1,9), 
+     counts = c(18,17,15,20,10,20,25,13,12))
> glm.D93 <- glm(counts ~ outcome + treatment, family = poisson(), data = d.AD)
> 
> ( lsm.D93 <- lsmeans(glm.D93, ~ outcome) )
 outcome   lsmean        SE df asymp.LCL asymp.UCL
 1       3.044522 0.1259882 NA  2.797590  3.291455
 2       2.590267 0.1581139 NA  2.280370  2.900165
 3       2.751535 0.1458650 NA  2.465645  3.037425

Results are averaged over the levels of: treatment 
Results are given on the log (not the response) scale. 
Confidence level used: 0.95 
> # un-log the results to obtain rates
> summary(lsm.D93, type = "resp")
 outcome     rate       SE df asymp.LCL asymp.UCL
 1       21.00000 2.645751 NA 16.405066  26.88194
 2       13.33333 2.108185 NA  9.780295  18.17714
 3       15.66667 2.285218 NA 11.771074  20.85149

Results are averaged over the levels of: treatment 
Confidence level used: 0.95 
Intervals are back-transformed from the log scale 
> 
> # un-log some comparisons to obtain ratios
> summary(contrast(lsm.D93, "trt.vs.ctrl", ref = 2), 
+     type = "resp", adjust = "none")
 contrast rate.ratio        SE df z.ratio p.value
 1 - 2         1.575 0.3184189 NA   2.247  0.0246
 3 - 2         1.175 0.2527659 NA   0.750  0.4535

Results are averaged over the levels of: treatment 
Tests are performed on the log scale 
> 
> 
> # weighting
> nutr.lm <- lm(gain ~ (age + group + race)^2, data = nutrition)
> lsmeans(nutr.lm, "race", weights = "equal")
NOTE: Results may be misleading due to involvement in interactions
 race       lsmean       SE df   lower.CL upper.CL
 Black    1.258929 1.646003 92 -2.0101755 4.528033
 Hispanic   nonEst       NA NA         NA       NA
 White    2.932008 1.346612 92  0.2575192 5.606496

Results are averaged over the levels of: age, group 
Confidence level used: 0.95 
> 
> lsmeans(nutr.lm, "race", weights = "prop")
NOTE: Results may be misleading due to involvement in interactions
 race       lsmean        SE df   lower.CL upper.CL
 Black    1.926554 1.3940313 92 -0.8421122 4.695221
 Hispanic   nonEst        NA NA         NA       NA
 White    2.522821 0.6044604 92  1.3223102 3.723331

Results are averaged over the levels of: age, group 
Confidence level used: 0.95 
> 
> lsmeans(nutr.lm, "race", weights = "outer")
NOTE: Results may be misleading due to involvement in interactions
 race       lsmean        SE df   lower.CL upper.CL
 Black    2.546674 1.4313624 92 -0.2961356 5.389483
 Hispanic   nonEst        NA NA         NA       NA
 White    3.142940 0.7494154 92  1.6545363 4.631344

Results are averaged over the levels of: age, group 
Confidence level used: 0.95 
> 
> lsmeans(nutr.lm, "race", weights = "cells")
NOTE: Results may be misleading due to involvement in interactions
 race        lsmean       SE df  lower.CL upper.CL
 Black    0.3809524 1.166180 92 -1.935181 2.697086
 Hispanic 1.6666667 3.085422 92 -4.461247 7.794581
 White    2.7951807 0.586592 92  1.630158 3.960203

Results are averaged over the levels of: age, group 
Confidence level used: 0.95 
> 
> 
> # covariate predictions
> feedlot.add <- lm(swt ~ ewt + herd + diet, data = feedlot)
> lsmeans(feedlot.add, "herd", cov.reduce = ewt ~ herd)
 herd    lsmean       SE df  lower.CL  upper.CL
 9     856.1375 26.66927 53  802.6457  909.6293
 16    943.2625 34.05583 53  874.9551 1011.5698
 3     993.4646 23.83657 53  945.6545 1041.2747
 32    959.9984 20.47652 53  918.9277 1001.0691
 24    984.5125 22.79846 53  938.7846 1030.2404
 31   1105.4646 23.83657 53 1057.6545 1153.2747
 19   1058.3821 22.24379 53 1013.7667 1102.9975
 36   1126.9800 25.97394 53 1074.8829 1179.0771
 34   1010.5553 21.88667 53  966.6562 1054.4544
 35   1092.9718 20.58269 53 1051.6882 1134.2555
 33   1072.0051 26.22250 53 1019.4094 1124.6007

Results are averaged over the levels of: diet 
Confidence level used: 0.95 
> 
> 
> proc.time()
   user  system elapsed 
   2.43    0.10    2.52 
